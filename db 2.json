{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a9671047df0a7447aef38821972d09a05667233f","modified":1532153686396},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1529738482220},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529738482219},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1529738482222},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1529738482223},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1529738482223},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529738482223},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1529738482223},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1529738482223},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1529738482224},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1529738482225},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1529738482226},{"_id":"themes/next/_config.yml","hash":"ecebce7dfcc04729c6ac5d9109109325c655cf33","modified":1530434380692},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1529738482227},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1529738482262},{"_id":"source/tags/index.md","hash":"9842de3d0988b9f19ff1cc01f867a20dc21d0ae6","modified":1530434310511},{"_id":"source/_posts/AIDL.md","hash":"5595fdf1f642c51fa9399694d1f94b7c6a354c17","modified":1530434008846},{"_id":"source/_posts/Activity.md","hash":"e83644e74fe3c5272640659d82663ab4ba5b0fc8","modified":1474880309000},{"_id":"source/_posts/Android笔试题目.md","hash":"8940c102e9fb5798f956f81c8a7607e9119ed8d8","modified":1530434012919},{"_id":"source/_posts/CSRF浅析.md","hash":"f96a833097b0df9c66f2eaec6c85b4b88751db96","modified":1516764152893},{"_id":"source/_posts/Handler_async_task.md","hash":"954ba98025643d82639ce97a30606ab6c3d0405d","modified":1474880309000},{"_id":"source/_posts/IntentService简介及简单使用.md","hash":"2b04fa560dea1d70093349f3a7ec867deaf51d91","modified":1475829151595},{"_id":"source/_posts/JAVA-NIO.md","hash":"142a3567bb90dd76005391df06aeaef9dedb5ef0","modified":1503491668013},{"_id":"source/_posts/JAVA中的引用.md","hash":"6c4a948601395abf645722d2bb5c23a38c7b9bd4","modified":1475843190140},{"_id":"source/_posts/JavaScript中的面向对象程序设计.md","hash":"658688159a32b6d699e1fed22fdc8dc76e635457","modified":1510668840661},{"_id":"source/_posts/Java中的synchronized和volatile_todo.md","hash":"80940dcddb27aabe58e0a6de14449c13ab7fca84","modified":1477470283113},{"_id":"source/_posts/Java中的单例模式.md","hash":"99da6bbaa66e11d0284b9e7f2742af4894c86e59","modified":1503839409988},{"_id":"source/_posts/Java核心技术卷读书笔记.md","hash":"5d3e798f44b37dd902b2ef8bcb7d025c1577c13e","modified":1512478800358},{"_id":"source/_posts/Java正则表达式.md","hash":"ba195012e6e12226b021b7721ca1d1e6cc859f1d","modified":1476623777539},{"_id":"source/_posts/Java高级程序设计之面向对象.md","hash":"d32829a4ca28548d719e8ab09546500752f69595","modified":1503839503019},{"_id":"source/_posts/Maven实战读书笔记.md","hash":"2e452539d1811865ca1abf5200ad9038a9edd66a","modified":1507731446582},{"_id":"source/_posts/RecycleView.md","hash":"55a9f080e5799c3c133f9d9b9cb6c7e145aae6df","modified":1474880309000},{"_id":"source/_posts/SQL记录-二.md","hash":"c25f24b194a0dea93f131c9c47591fe7039bf7d0","modified":1501685422243},{"_id":"source/_posts/SQL记录.md","hash":"01327d79337c49d829a4b3ac5f2d1facdb68049e","modified":1500302115557},{"_id":"source/_posts/Service.md","hash":"e8ad2b2692574826dd74c7f8e85d4d01c7138abc","modified":1474880309000},{"_id":"source/_posts/UI.md","hash":"c8dd8ad6cebd7356f02ab05ce26f87d0ce73d2b3","modified":1530434085534},{"_id":"source/_posts/View.md","hash":"1414cd83f9e42ac53f9df221d58cb1a93a873d00","modified":1530434079746},{"_id":"source/_posts/android动画学习.md","hash":"426bcec5e8dd45903bd8565dfa45a2b49ac4d0d3","modified":1476883574574},{"_id":"source/_posts/android动画简介.md","hash":"ece7395e1260695c1a7046049075a9c689725208","modified":1476970007281},{"_id":"source/_posts/android常用工具包.md","hash":"0eb5af33e7a1886fd9ca22c4d6fec32cd49482aa","modified":1475837395505},{"_id":"source/_posts/android序列化.md","hash":"b493346cd10f2ae334ea0a80fb48826ce301e431","modified":1475914358710},{"_id":"source/_posts/broadcast.md","hash":"949058488ccf1bb98b3265f8daac7da227fb99a9","modified":1474880309000},{"_id":"source/_posts/elasticsearch.md","hash":"27b97d5ad7adc54d9cff48fdf515dfb9c22c4e61","modified":1532153586540},{"_id":"source/_posts/hexo第三方服务添加.md","hash":"35710ab849f698f905807e06a0c913db0cc43f30","modified":1500213264846},{"_id":"source/_posts/javascript高级程序设计笔记.md","hash":"dbbad022347db619e816fb3abe1355833dc97b8f","modified":1500820825987},{"_id":"source/_posts/mybatis入门以及整合spring.md","hash":"88f77168757fdb9348aeacb82fdfff31eb92198d","modified":1503496235892},{"_id":"source/_posts/python-scrapy.md","hash":"e4f9d0c4fb785db634849ccc8075f559f5155252","modified":1520085862849},{"_id":"source/_posts/python-tips.md","hash":"702b37132402a945e749fa03d1599877798d31aa","modified":1520085910263},{"_id":"source/_posts/servletRequest中读取body的问题.md","hash":"86a0c24f5967fcad42fd1365761f8e1c6a7ebf4f","modified":1516957572190},{"_id":"source/_posts/session与cookie.md","hash":"4a3f4a9e8ebee4cf0247a1cd7db8420accbfdf57","modified":1526128409322},{"_id":"source/_posts/sql中group by以及having的使用.md","hash":"5e9644900def1a413e1c450add9ed91caff5fcd4","modified":1477640635855},{"_id":"source/_posts/todo常见布局.md","hash":"2edb1c426278481df550075a5ac5ce6290f0c33f","modified":1476099311822},{"_id":"source/_posts/travelMap.md","hash":"d3fc8d633df6bb5fa84e78e2b370e24e14944358","modified":1475932551864},{"_id":"source/_posts/ubuntu下编译安装nginx.md","hash":"0d74c021b58b9045220964d8cce6ba1903fc56e9","modified":1492064588750},{"_id":"source/_posts/vps-git-hexo-nginx搭建博客网站.md","hash":"3fce5f862ada6e559b4df85db8bef9b33f48b691","modified":1492658261546},{"_id":"source/_posts/web线程安全.md","hash":"4be4a1ec4a836a945d2cc81e4b7cf1761c4a28f6","modified":1516762483796},{"_id":"source/_posts/关于RecyclerView以及ListView中的图像加载问题.md","hash":"af5be086d836b987c461c73de715bf31f8462c60","modified":1475839199100},{"_id":"source/_posts/关于handler以及一些回调的思考.md","hash":"68b3accd0a348810a5e8e6ba119db96ec0bb093f","modified":1530433948731},{"_id":"source/_posts/测试https图床imgur.md","hash":"218565298603c10c2cb5c2117e459bd58a70376a","modified":1529749990128},{"_id":"source/_posts/深入剖析tomcat笔记.md","hash":"cefe024abb5ad390f6c9e983d547d816e89ae80e","modified":1509375060949},{"_id":"source/_posts/跨域请求.md","hash":"5a9ece1b37d30c9c4a3842ce2a1c51802ce4348d","modified":1516764786897},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1529738482222},{"_id":"source/_posts/面试一些知识点记录.md","hash":"c95a4392d384c49d09de26e1ef62a0ddf6822de7","modified":1475472638073},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529738482220},{"_id":"source/_posts/.DS_Store","hash":"3995649b7df68a19c412c60f23360404ca22266f","modified":1532153625850},{"_id":"source/_posts/面试.md","hash":"0424d2831b232c1298640b9b1cdcb331b445a84f","modified":1530433849868},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1529738125070},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1529738482202},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1529738482204},{"_id":"themes/next/.git/index","hash":"0789a716035444351d54f16b2b4c9b02ac9c85b7","modified":1529738482360},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1529738482192},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1529738482221},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1529738482220},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1529738482221},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1529738482221},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1529738482263},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529738482263},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1529738482227},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1529738482228},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1529738482227},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1529738482227},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1529738482228},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1529738482228},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1529738482228},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1529738482230},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1529738482228},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1529738482229},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1529738482231},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1529738482231},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1529738482231},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1529738482232},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1529738482231},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1529738482233},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1529738482232},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1529738482261},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1529738482262},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1529738482262},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1529738482262},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1529738482262},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1529738482262},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1529738482262},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529738482358},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529738482358},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529738482358},{"_id":"source/_posts/blog/.DS_Store","hash":"929ddbc7f9066aa0bae23c886e0baed42c358689","modified":1529721842274},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482289},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1529738125071},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1529738125070},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1529738125072},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1529738125072},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1529738125074},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1529738125074},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1529738125072},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1529738125075},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1529738125071},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1529738125073},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1529738125073},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1529738125076},{"_id":"themes/next/.git/logs/HEAD","hash":"e3b7abc69c7ecd8babe43ca35ff897459219cd9d","modified":1529738482202},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1529738482263},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1529738482263},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1529738482264},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1529738482264},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1529738482264},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1529738482265},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1529738482265},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1529738482265},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1529738482265},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529738482232},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529738482232},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529738482245},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1529738482246},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1529738482247},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1529738482246},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1529738482247},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1529738482248},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1529738482254},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1529738482254},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1529738482249},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1529738482248},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1529738482251},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1529738482251},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1529738482255},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1529738482251},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1529738482249},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1529738482252},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1529738482259},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1529738482259},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529738482259},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1529738482259},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1529738482260},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1529738482259},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529738482259},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1529738482289},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529738482290},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529738482289},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529738482290},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529738482289},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529738482290},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529738482290},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529738482291},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529738482291},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529738482292},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529738482292},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529738482293},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529738482293},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529738482293},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529738482293},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529738482293},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529738482294},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529738482293},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529738482294},{"_id":"source/_posts/blog/.git/FETCH_HEAD","hash":"f65bcf5b6fb7113d315e1f02a567bf945b413cae","modified":1474895429000},{"_id":"source/_posts/blog/.git/ORIG_HEAD","hash":"745714651714f4763e38a6eabc16475efe19bd5b","modified":1474895429000},{"_id":"source/_posts/blog/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1474622713000},{"_id":"source/_posts/blog/.git/config","hash":"a4b077f22c7183517e863ddd837bc303464e9951","modified":1474622713000},{"_id":"source/_posts/blog/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1474622710000},{"_id":"source/_posts/blog/.git/index","hash":"e6916803541b989e627dccdd0e941a675879428e","modified":1474895429000},{"_id":"source/_posts/blog/.git/packed-refs","hash":"e905442672e44377e78b8e6c1e4b7017b3c6ad0e","modified":1474622713000},{"_id":"source/_posts/blog/Android/.DS_Store","hash":"d6f04d0ebab864ad19b2115488c8c25ce3fa382c","modified":1529721842271},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482254},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482254},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482287},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482288},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482281},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482281},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529738482281},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1529738482202},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1529738482254},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529738482254},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529738482250},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529738482251},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529738482255},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529738482252},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529738482252},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529738482253},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529738482253},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529738482253},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529738482253},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529738482253},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529738482255},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529738482255},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529738482256},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1529738482257},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529738482257},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529738482257},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529738482257},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529738482257},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1529738482257},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1529738482258},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1529738482258},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529738482260},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529738482261},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529738482261},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1529738482260},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1529738482287},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529738482287},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529738482280},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1529738482288},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1529738482288},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529738482281},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1529738482281},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1529738482281},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529738482319},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529738482314},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529738482319},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1529738482319},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1529738482324},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1529738482319},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529738482325},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1529738482325},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1529738482325},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1529738482340},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529738482326},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529738482326},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529738482327},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529738482327},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529738482327},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1529738482341},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1529738482342},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1529738482342},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1529738482342},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529738482343},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529738482342},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529738482344},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1529738482354},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1529738482354},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529738482343},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529738482344},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529738482357},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529738482357},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529738482357},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529738482348},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529738482344},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529738482349},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529738482344},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529738482349},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529738482345},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529738482345},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529738482345},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529738482345},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529738482346},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529738482346},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529738482346},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529738482346},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529738482347},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529738482347},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529738482346},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529738482348},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529738482295},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529738482294},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529738482295},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529738482295},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529738482296},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529738482295},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529738482296},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529738482298},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529738482296},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529738482299},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529738482299},{"_id":"source/_posts/blog/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1474622710000},{"_id":"source/_posts/blog/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1474622710000},{"_id":"source/_posts/blog/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1474622710000},{"_id":"source/_posts/blog/.git/logs/HEAD","hash":"39cd32708da7bed3dc24b8dd38b4d35e53439541","modified":1474895429000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529738482341},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"e3b7abc69c7ecd8babe43ca35ff897459219cd9d","modified":1529738482203},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1529738482201},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529738482260},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1529738482260},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529738482273},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1529738482278},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529738482278},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529738482279},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529738482279},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529738482279},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1529738482280},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529738482277},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1529738482286},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1529738482286},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529738482286},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529738482286},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1529738482287},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1529738482282},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1529738482287},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529738482285},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529738482285},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1529738482285},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529738482285},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1529738482285},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1529738482282},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529738482283},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529738482282},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1529738482283},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1529738482283},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529738482283},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1529738482284},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529738482306},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529738482311},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529738482312},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529738482320},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529738482320},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529738482321},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529738482321},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529738482320},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529738482321},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529738482323},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529738482324},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529738482324},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529738482326},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529738482326},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529738482327},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529738482328},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529738482328},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529738482297},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529738482353},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529738482354},{"_id":"source/_posts/blog/.git/objects/0b/4c0629e5ef48f649c9be087ae0d0a5bf357ec4","hash":"ef224168e1074c82d47d6e78d0773a912df9fdb8","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/1b/856fc9373178d5b6ed349c47961979b0c4cc82","hash":"2810a327c9c26c772375470348e69344ab6b877f","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/31/620e7a3e4ff7ca04e738eba256db6b18278478","hash":"4c20a3072e29d6a513f5c076b81d87a836dc0ae4","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/2d/4e1335cb32da430911272ef31dd759739ab2b3","hash":"d8a8cd8ce08b7aa80c56c657fa318ce8c7413287","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/13/956c03b5a07d36f3d2c8d63777a74703529689","hash":"5b61437a2a1eb86700bba7a3962212a9ec7297bb","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/39/82ba1f3df9d448b5ea09f5a1e2166028f4e1a9","hash":"aacbe537d6f65d6683cfa446d2fd50846f4ce511","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/45/5e2fdcf997495163a5f86a7aa19655dd555cf7","hash":"02e08bc66a6b33d7f8e464bfa91b789641d85ea0","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/50/d02f1e3efb86659ad6b61a89b1b0cfe2fe10db","hash":"fa1e31656a4776732e1fae4e5005a4acad40a2dd","modified":1474879817000},{"_id":"source/_posts/blog/.git/objects/59/cad40fedb5c57a1268e0800ac7d6c78dda0d74","hash":"3ab2cd36fee9fcd171d11b9c1f58a3dc56c4574a","modified":1474879817000},{"_id":"source/_posts/blog/.git/objects/58/528a6ebb57189867fd77b46e2e95ac4a455c7f","hash":"13c0426829f9a4643f0e875be26d649868fb6dbd","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/69/7d09322b9b9732c641134e43d1dd099fd6060a","hash":"772c683ef040c2232677a3c18a7d6c527297868e","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/6e/b67346ecd6a67de0676a8679df2ba07e9855ee","hash":"1ac125aa1ffb69b81b199a9a3c7945e43b316c6f","modified":1474879817000},{"_id":"source/_posts/blog/.git/objects/80/f013379b0c916c7970f2d31e6ee80b93a3c044","hash":"e6cf0a88defba2b290da87469ce490f1cc8ee29a","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/8b/2c5922eddc0c1bdf06c28265e451688595dbb2","hash":"14ce474ea97a287abc789a6a972f8e1d807c3358","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/8d/08bd04fddffe55dbcc71577a82a399a8ef918a","hash":"19403ced939d06f4a35f5e175700ec17aef51b6f","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/90/8d6b988d9afdfab50deacf672b23f54ab8433a","hash":"25869317ae64bcd7468373116f121a6bf80f3d97","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/aa/73a675a873824a51027dd6bac83dc6b69ad660","hash":"a01e0f98a10bbdbd2da202f6642f35d9ea5328d5","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/ac/c2908896c2c50aa834112adc51297418664051","hash":"45574d5eead823de38e87ebdab7a35c91318c8f8","modified":1474879817000},{"_id":"source/_posts/blog/.git/objects/ac/f6df2a3734cb5dfc59956fb20127d74b286e03","hash":"562523e96d17738b35cb70da7a71688a59d91b09","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/ad/a0cfb2a3e7c39f3cd7caae68e33e3dc520851e","hash":"cc1676ac21378f396cb8259d5e54edecc69042ec","modified":1474879817000},{"_id":"source/_posts/blog/.git/objects/ae/5e068a730ce63fee41bb6b2c909f6b0e76f064","hash":"b9f3a2d95cb30c5313a143691254af149b3618e2","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/bf/797877c0c25144548b657423c45407e8444a3f","hash":"5b6e06cefaa6f7279064a432944e426ec3115bf7","modified":1474622805000},{"_id":"source/_posts/blog/.git/objects/be/c9d107b49d3fe8ecd5cfceae2234ca901778df","hash":"b9df96565de1111c87cf6058ac199bae4f03d820","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/b9/dc1d84f7d731b848e68c5de3d0174c6f5cebd3","hash":"4ff7b7e3d924f9ae64476eeb217da03d4dc10fce","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/d1/25bccf50bdf7ed0b3087782c68e94078fd77d7","hash":"5760ba9caf380928213f3dac0862422abba0b9a7","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/c4/755d28f66fa307c35b0a66957c61644bbeb936","hash":"a48b79243e57bcb3883378127c7a0b5802fe9e58","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/db/5dcb5c52841985f6aa1fa27f8e9326d6e3bd6d","hash":"6676fa9e8ea70730c4d896bd2061cea303ce6251","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/d5/baebb4877f340e9c96846b4c20749f4f2ab551","hash":"7b88fa6b73cd0458f1119809c8702b12535e5bd3","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/df/1e0ff9ed8d89f05510cbe59f0e1794be877ce8","hash":"867721eecd565e6a8928b8c95559cd90e973a748","modified":1474622805000},{"_id":"source/_posts/blog/.git/objects/dd/809a1b12e4a4f750d71bc0f0455e653b185d51","hash":"06edc224b1d596b643799410d7ca7cf955a823ad","modified":1474895429000},{"_id":"source/_posts/blog/.git/objects/fd/ae9cbedfb37b28f826f18f697fb6a88b6632df","hash":"e413da77d0c9808105983adf6331a90618ec68ec","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/f3/1935f8e7a9113024e7ec622dea8ec57c70a588","hash":"23155a4aaa41c68882ae3b319ff2c31076288b9c","modified":1474880309000},{"_id":"source/_posts/blog/.git/objects/pack/pack-d4708ca20f393bfc99f41c8c135645c742df3d8d.idx","hash":"e0aaec1767f457814dc3fd209697ff899a560950","modified":1474622713000},{"_id":"source/_posts/blog/.git/objects/f6/4f16b6cdea8bea1c54271eb377065dafc0213d","hash":"099a018730242a6bfe8b99e595ecd61747e1da0c","modified":1474879545000},{"_id":"source/_posts/blog/.git/objects/pack/pack-d4708ca20f393bfc99f41c8c135645c742df3d8d.pack","hash":"14eec1e79c14b82602cb3eed486e2bd919acb4ae","modified":1474622713000},{"_id":"source/_posts/blog/.git/refs/heads/master","hash":"d262a7d03f627726a9810abf3d595e1c170ed9fa","modified":1474895429000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529738482311},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529738482356},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529738482340},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529738482339},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"e3b7abc69c7ecd8babe43ca35ff897459219cd9d","modified":1529738482201},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529738482268},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1529738482268},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529738482268},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1529738482266},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1529738482267},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529738482267},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529738482267},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529738482267},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529738482268},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529738482268},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1529738482272},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529738482273},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1529738482273},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529738482273},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529738482269},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529738482270},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1529738482271},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529738482273},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1529738482273},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529738482274},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1529738482275},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529738482275},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529738482276},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529738482275},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529738482275},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1529738482275},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529738482276},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529738482276},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529738482276},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1529738482277},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529738482286},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529738482284},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529738482302},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529738482301},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529738482284},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529738482303},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529738482303},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529738482302},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529738482321},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529738482321},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529738482322},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529738482322},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529738482323},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529738482322},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529738482330},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529738482332},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529738482338},{"_id":"source/_posts/blog/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1474622713000},{"_id":"source/_posts/blog/.git/logs/refs/heads/master","hash":"39cd32708da7bed3dc24b8dd38b4d35e53439541","modified":1474895429000},{"_id":"source/_posts/blog/.git/refs/remotes/origin/master","hash":"d262a7d03f627726a9810abf3d595e1c170ed9fa","modified":1474895429000},{"_id":"themes/next/.git/objects/pack/pack-88df782ce6fe81241cc1f463a32af916d4193f78.idx","hash":"bb5ce2ffd2b23aeab4e99d217116d616aeac700b","modified":1529738482162},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529738482318},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/HEAD","hash":"0773db8517b8169a5d4bcdc921339cbc5de20af5","modified":1474622713000},{"_id":"source/_posts/blog/.git/logs/refs/remotes/origin/master","hash":"97dd3fe42f353db71818260c59bf59b789481c1c","modified":1474895429000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529738482353},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529738482336},{"_id":"themes/next/.git/objects/pack/pack-88df782ce6fe81241cc1f463a32af916d4193f78.pack","hash":"66da6ac57fd465b0b8f43f6be7c446eeee84eb9f","modified":1529738482155},{"_id":"public/search.xml","hash":"dd66d6c2f70dd793cdc2290b90d7122504e4ba1c","modified":1532153705507},{"_id":"public/tags/index.html","hash":"89112f3ba2044314bb3c7c5d19b53c8e62e53292","modified":1532153705594},{"_id":"public/2018/06/23/测试https图床imgur/index.html","hash":"bed87b82bda2e2d9623365e0d46d831e432d0b00","modified":1532153705594},{"_id":"public/2018/02/07/session与cookie/index.html","hash":"dd95606f1208a9f1e357a27eab1c3177ea9783cd","modified":1532153705594},{"_id":"public/2018/01/28/python-scrapy/index.html","hash":"d969661d4b4aee5cfa57013b94ce44212797f994","modified":1532153705595},{"_id":"public/2018/01/28/python-tips/index.html","hash":"5a62d01a728626e0954f764c2cbf66811f575d8d","modified":1532153705595},{"_id":"public/2018/01/26/servletRequest中读取body的问题/index.html","hash":"6e6947bd233db85b166661580317eb16461510bc","modified":1532153705595},{"_id":"public/2018/01/24/CSRF浅析/index.html","hash":"c96ba7fb6aaa51c603c075c1918e38e28c94cf1f","modified":1532153705595},{"_id":"public/2018/01/24/web线程安全/index.html","hash":"83d17f3c33865b2e46dec6d211b82fed19ba20ec","modified":1532153705595},{"_id":"public/2017/11/14/跨域请求/index.html","hash":"61799a6fdf57a813bfa678837afbae66dd400040","modified":1532153705595},{"_id":"public/2017/10/30/深入剖析tomcat笔记/index.html","hash":"686f9696e1faa128b935fe9a1512edca1c767ac1","modified":1532153705595},{"_id":"public/2017/10/11/Maven实战读书笔记/index.html","hash":"65802749bd9f2e5d3fca8b36715c3bee9a0cbb83","modified":1532153705595},{"_id":"public/2017/10/11/Java核心技术卷读书笔记/index.html","hash":"c0aea5377e88c9a04938f2edc5f65c0c53b5fac2","modified":1532153705595},{"_id":"public/2017/08/28/JavaScript中的面向对象程序设计/index.html","hash":"0070867bf65d04d8bc380e39b744743bfea7c3fe","modified":1532153705595},{"_id":"public/2017/08/23/mybatis入门以及整合spring/index.html","hash":"c117e7d933149eb437a929d5b7b9b225382f2bba","modified":1532153705595},{"_id":"public/2017/08/23/JAVA-NIO/index.html","hash":"15d18314b9965690beb795f267bf155c0b959caf","modified":1532153705595},{"_id":"public/2017/08/01/Java高级程序设计之面向对象/index.html","hash":"edf976cb3671f9235cc7e3872781cb85e5d7658d","modified":1532153705595},{"_id":"public/2017/07/31/SQL记录-二/index.html","hash":"b5c104f151be1bc7a19d22b293637b345107d4c9","modified":1532153705595},{"_id":"public/2017/07/18/javascript高级程序设计笔记/index.html","hash":"52b608469b0ed71d173935ead78ddfd919a9596b","modified":1532153705595},{"_id":"public/2017/07/17/SQL记录/index.html","hash":"2a8a8417f143a9b1f96fd605781a92d7b797ba4b","modified":1532153705596},{"_id":"public/2017/07/16/hexo第三方服务添加/index.html","hash":"8aa67ece8ccf83e1e9524c50e9b71b78c7c9d6d8","modified":1532153705596},{"_id":"public/2017/04/13/ubuntu下编译安装nginx/index.html","hash":"61db0a7ee0915fd90a383ef4f161e3c96e4c62f3","modified":1532153705596},{"_id":"public/2017/04/13/vps-git-hexo-nginx搭建博客网站/index.html","hash":"881cbda3cc9a43cf7cfa3aa89284aa5d079b0b85","modified":1532153705596},{"_id":"public/2016/10/28/sql中group by以及having的使用/index.html","hash":"6ae37c1341cd170c675cc5f2c75c63cc3b0ac83c","modified":1532153705596},{"_id":"public/2016/10/26/Java中的synchronized和volatile_todo/index.html","hash":"87c10d3bfe5e38d166414721fb34d2a3dccb358a","modified":1532153705596},{"_id":"public/2016/10/26/Java中的单例模式/index.html","hash":"57d25e506337f64b4f6cae8f7d30b0a3f3a31d8f","modified":1532153705596},{"_id":"public/2016/10/19/android动画学习/index.html","hash":"42b39f1fba41bd14ef64206edd109538233fd407","modified":1532153705596},{"_id":"public/2016/10/16/Java正则表达式/index.html","hash":"f72af84e3c80ec76a200e06cb1d9a2a56a592bf8","modified":1532153705596},{"_id":"public/2016/10/10/android动画简介/index.html","hash":"b7c6e81a37c7440e7748428ac65c3a1b8e70eea0","modified":1532153705596},{"_id":"public/2016/10/10/todo常见布局/index.html","hash":"c7d00a18e2856f4c83512e5ceab0bde17d0b36e0","modified":1532153705597},{"_id":"public/2016/10/08/travelMap/index.html","hash":"af9bbf95e5e96d82c3e358d49670a4dc2bd3af46","modified":1532153705597},{"_id":"public/2016/10/08/android序列化/index.html","hash":"179aeb57697811a51eda7cea550ffa67002e4251","modified":1532153705597},{"_id":"public/2016/10/07/JAVA中的引用/index.html","hash":"c5b912b5d8525090f9cf012f725d05b661f7ea18","modified":1532153705597},{"_id":"public/2016/10/07/关于RecyclerView以及ListView中的图像加载问题/index.html","hash":"8c77953489676c947c68762ecdfa6aa230d59a46","modified":1532153705597},{"_id":"public/2016/10/07/android常用工具包/index.html","hash":"a8750bee9cf79a5bc7ac3133696fb6acb6bc9476","modified":1532153705597},{"_id":"public/2016/10/07/IntentService简介及简单使用/index.html","hash":"edc477ab8437ebba6a8b9d1f10b79abccf8f1ed2","modified":1532153705597},{"_id":"public/2016/10/03/面试一些知识点记录/index.html","hash":"4475ba56d2a0cd639053543c214d379415375b20","modified":1532153705597},{"_id":"public/2016/09/26/Handler_async_task/index.html","hash":"1ae8c52dddcfc061e8d5412bab1ec59649108b3f","modified":1532153705597},{"_id":"public/2016/09/26/Service/index.html","hash":"a5c2c9bf82b0982cf330a0c0d602b9a89c49866e","modified":1532153705597},{"_id":"public/2016/09/26/UI/index.html","hash":"81058842710c41cadc36309dc2cdf2e0a16320fa","modified":1532153705597},{"_id":"public/2016/09/26/View/index.html","hash":"74f3916f5e25ff2ef689b9787a62dfe85a14f978","modified":1532153705598},{"_id":"public/2016/09/26/Android笔试题目/index.html","hash":"5ad378b4a119d098dc4159071d6ddcf4af83e6a9","modified":1532153705598},{"_id":"public/2016/09/26/RecycleView/index.html","hash":"ef9abb4f0405d53b312598382d7da01aa88f25b0","modified":1532153705598},{"_id":"public/2016/09/26/Activity/index.html","hash":"a0f068bfd7f9bde4dbcb1578910cb0738672b056","modified":1532153705598},{"_id":"public/2016/09/26/AIDL/index.html","hash":"1c30b310d887c42847a8007578814e8337266176","modified":1532153705598},{"_id":"public/2016/09/26/broadcast/index.html","hash":"6cd25860af2b32e4440580c12caac6be94324840","modified":1532153705598},{"_id":"public/2016/06/23/关于handler以及一些回调的思考/index.html","hash":"39d6f2da2154477e1bc05cf797a3a552522e5ff8","modified":1532153705598},{"_id":"public/2016/06/23/面试/index.html","hash":"1455c93868e397ca53ccadce8a1bbc769433dd74","modified":1532153705598},{"_id":"public/archives/index.html","hash":"6ab87d046fa188cefc36238c521c624b7e1b310c","modified":1532153705598},{"_id":"public/archives/page/2/index.html","hash":"828fd66b7ca6bc631e2ddcae15a98b000298333f","modified":1532153705598},{"_id":"public/archives/page/3/index.html","hash":"53ce0f8e31810df3ce497db4e0f52c05a88c9e48","modified":1532153705598},{"_id":"public/archives/page/4/index.html","hash":"449bc744856349d1fd7fad020e251a02ebf500bb","modified":1532153705599},{"_id":"public/archives/page/5/index.html","hash":"44175d18661016e7598f2ae554c4ebba5ba0b50c","modified":1532153705599},{"_id":"public/archives/2016/index.html","hash":"04c0f2d2c372aa6b7b5423222b8b0dacd758739b","modified":1532153705599},{"_id":"public/archives/2016/page/2/index.html","hash":"80bb01700adea32bd73cb447ffd10b05aa10c958","modified":1532153705599},{"_id":"public/archives/2016/page/3/index.html","hash":"d8f08d86b2033b5f60643a94990fa0cb7e2ee0a1","modified":1532153705599},{"_id":"public/archives/2016/06/index.html","hash":"e5fbce38ccc3ea303ffdbd498c72946b598a9c61","modified":1532153705599},{"_id":"public/archives/2016/09/index.html","hash":"85c9366ee7c75dc6fb44de4dff5837f523ec04a0","modified":1532153705599},{"_id":"public/archives/2016/10/index.html","hash":"e7dffab45267b1cabbb11690b5fcf8395266ffba","modified":1532153705599},{"_id":"public/archives/2016/10/page/2/index.html","hash":"710e426798bca21294fb19ca6e21c80a6bf219cd","modified":1532153705599},{"_id":"public/archives/2017/index.html","hash":"da7c546c3bbcb8d1f44d7fc6d76f303a00fbbdfd","modified":1532153705599},{"_id":"public/archives/2017/page/2/index.html","hash":"7c089c428e82d215affac4557257faa685cd886b","modified":1532153705599},{"_id":"public/archives/2017/04/index.html","hash":"8726768a34c552fa6426faaa4700d4de588f6128","modified":1532153705600},{"_id":"public/archives/2017/07/index.html","hash":"3317c9d486995bd9659b4d742988a333192816c1","modified":1532153705600},{"_id":"public/archives/2017/08/index.html","hash":"6ce9e9b6bbc6b26fd332a6c137d455c9c314c08c","modified":1532153705600},{"_id":"public/archives/2017/10/index.html","hash":"0802e0a226a7c7bed678a973c90d8d51f5eb5bfc","modified":1532153705600},{"_id":"public/archives/2017/11/index.html","hash":"0c5ed36b725360eff27be6d0b8ee6037354d5db2","modified":1532153705600},{"_id":"public/archives/2018/index.html","hash":"946e0e79b4a19d066d23097b962b8f35b582bb46","modified":1532153705600},{"_id":"public/archives/2018/01/index.html","hash":"5e3b3a594c2f95cc24392a828130c84834eefe15","modified":1532153705600},{"_id":"public/archives/2018/02/index.html","hash":"e5314e115ed1ae78f37e5f4eb4e469e62febe847","modified":1532153705600},{"_id":"public/archives/2018/06/index.html","hash":"c9d2129865c6f09243071f19863cfe55cadf80d6","modified":1532153705600},{"_id":"public/index.html","hash":"b0d69e753c0ee85e93edba294021e9f43f61a8e3","modified":1532153705600},{"_id":"public/page/3/index.html","hash":"6bae666af939f9719ae6f54969bdda0b071e33ad","modified":1532153705600},{"_id":"public/page/4/index.html","hash":"7a07123127d9d5aa6759df773a832dd9619efbff","modified":1532153705600},{"_id":"public/page/2/index.html","hash":"cc6261308186c714562f92c203a9aeaa4c73bf43","modified":1532153705600},{"_id":"public/page/5/index.html","hash":"ae3bee786301f995e7571a12b176237ad2c8de26","modified":1532153705600},{"_id":"public/tags/android/index.html","hash":"bae329e785fd0d8f00347fda6579301fd4af238c","modified":1532153705600},{"_id":"public/tags/android/page/2/index.html","hash":"2fa5941fd97e0f5afd5c83c2925938075ddf077f","modified":1532153705600},{"_id":"public/tags/web安全/index.html","hash":"abf52f757c972c1f494cb056e1b32399bfb94b42","modified":1532153705600},{"_id":"public/tags/第一行代码/index.html","hash":"ea0312b653e093bc465cd7ef04e23944f6b6ec1e","modified":1532153705600},{"_id":"public/tags/CSRF/index.html","hash":"c18a26524cce35493b22d6c9c204d3f5faebfe69","modified":1532153705600},{"_id":"public/tags/java/index.html","hash":"eddedc42694f2caddb795f6e40b419cfbc5026d1","modified":1532153705600},{"_id":"public/tags/JavaScript/index.html","hash":"11f1fbad55265c07c8bca6f61d2c87493121d03a","modified":1532153705601},{"_id":"public/tags/面向对象/index.html","hash":"a552d96f2c1af5f63874abdde17756f62ba6e201","modified":1532153705601},{"_id":"public/tags/设计模式/index.html","hash":"8c6abe8c09003fcb32baa6ccaec797704ddeb5f9","modified":1532153705601},{"_id":"public/tags/读书笔记/index.html","hash":"33af96d0a5421ae8017b3a35a7d144229c770d8a","modified":1532153705601},{"_id":"public/tags/javascript/index.html","hash":"c33f10daed81db9dc7ca8fe48f46229d4669a6e7","modified":1532153705601},{"_id":"public/tags/继承/index.html","hash":"b9bea6d0c079ac05e7ee47b67ac44b556226e957","modified":1532153705601},{"_id":"public/tags/Maven/index.html","hash":"6b4946bfba933f32e2008a306caf8ec545137f05","modified":1532153705601},{"_id":"public/tags/SQL/index.html","hash":"5f613a2054bdcbedd15b78303dcd2460c45de32a","modified":1532153705601},{"_id":"public/tags/数据库/index.html","hash":"0cd173c19859e2da3e0e11640b5cdd437588fb96","modified":1532153705601},{"_id":"public/tags/hexo/index.html","hash":"c268dfed02f6d37f349df3f88eb4f396128845ef","modified":1532153705601},{"_id":"public/tags/mybatis/index.html","hash":"70227a3af0ddd9162aaae7d5f6112de1faf61d51","modified":1532153705601},{"_id":"public/tags/spring/index.html","hash":"5324296a7b26585b764ce4a39b6a1a1143aead0d","modified":1532153705601},{"_id":"public/tags/python/index.html","hash":"583f2f9e4f1239d45c87f0514d29ca0feb93e3ee","modified":1532153705601},{"_id":"public/tags/爬虫/index.html","hash":"d79972c74221b9ebdaba3c1e881ac89353efd4c3","modified":1532153705601},{"_id":"public/tags/tips/index.html","hash":"1c1fdb46015c0f7fe3bae1d5e1c266b3bbcbaba2","modified":1532153705601},{"_id":"public/tags/java-web/index.html","hash":"7e129d77611ca799fb493697c35b203e46b21c9b","modified":1532153705601},{"_id":"public/tags/servlet/index.html","hash":"34e109d2c6f40fd5ac56517212ef5bdc0d4dc06d","modified":1532153705601},{"_id":"public/tags/session/index.html","hash":"ebafcfd6c3058fd4a7f470dabdc3825f31347f7a","modified":1532153705601},{"_id":"public/tags/cookie/index.html","hash":"e36ff8293716c1f4a1cbd94abe21c942c1a0081d","modified":1532153705601},{"_id":"public/tags/sql/index.html","hash":"5ef40be6ffdb54b035139f2aab6af3a9f84a4697","modified":1532153705601},{"_id":"public/tags/ubuntu/index.html","hash":"3bf3651809425634f1084770f29ae341bcc1d434","modified":1532153705601},{"_id":"public/tags/vps/index.html","hash":"2320928ba4265694528925d647add3db5031f43e","modified":1532153705602},{"_id":"public/tags/nginx/index.html","hash":"931da0cccafa58c7930f8c16e1756cb5623c8eb8","modified":1532153705602},{"_id":"public/tags/git/index.html","hash":"5c1a0fab7aad8254ff66cc3275bfb5d13453adb5","modified":1532153705602},{"_id":"public/tags/blog/index.html","hash":"a5314d24465fa9227afd84aaa71a1808511fe7ac","modified":1532153705602},{"_id":"public/tags/线程安全/index.html","hash":"d7ca7ef22c2984b7655baa842866ffbac0bbe828","modified":1532153705602},{"_id":"public/tags/http/index.html","hash":"86f316592df2cc1a6de016dd91f6240a3eb12c84","modified":1532153705602},{"_id":"public/tags/网络/index.html","hash":"6d4fe4e57551b6878fc6f066e3cc8b3e6a6e435c","modified":1532153705602},{"_id":"public/tags/面试/index.html","hash":"9f4ffe801c84c0aa73d2c2b8ba00b9b4c514b5a1","modified":1532153705602},{"_id":"public/tags/android面试题目/index.html","hash":"1feec698dc120b16dbb2b4596d777e411fb7f497","modified":1532153705602},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1532153705612},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1532153705612},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532153705612},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532153705612},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1532153705612},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1532153705612},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1532153705612},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1532153705612},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1532153705612},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1532153705612},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532153705612},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532153705612},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532153705612},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532153705612},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1532153705612},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1532153705612},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1532153705612},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532153705613},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1532153705613},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1532153705613},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532153705613},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532153705613},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532153705613},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532153705613},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532153705613},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532153705613},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1532153705613},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1532153705613},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1532153705613},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1532153705613},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1532153705613},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1532153705613},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532153705613},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532153706128},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532153706134},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1532153706153},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1532153706153},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1532153706153},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1532153706153},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1532153706154},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1532153706154},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1532153706154},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1532153706154},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1532153706154},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1532153706154},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1532153706154},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1532153706154},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1532153706155},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1532153706155},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1532153706155},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1532153706155},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1532153706155},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1532153706156},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1532153706156},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1532153706157},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1532153706157},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1532153706157},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1532153706159},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1532153706159},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1532153706159},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1532153706159},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1532153706159},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1532153706159},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1532153706159},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1532153706159},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1532153706159},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1532153706160},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532153706160},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1532153706160},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1532153706160},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1532153706160},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1532153706160},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1532153706160},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1532153706160},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1532153706160},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1532153706160},{"_id":"public/css/main.css","hash":"ecd7c8cdd817f61a8591e1cfacdd7ef525f59ea0","modified":1532153706160},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1532153706160},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1532153706161},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1532153706161},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1532153706161},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1532153706161},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1532153706161},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1532153706161},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1532153706161},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1532153706161},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1532153706161},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1532153706161},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1532153706161},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1532153706161},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1532153706161},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1532153706161},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1532153706162},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1532153706162},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1532153706162},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1532153706162},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1532153706162},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532153706162},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532153706162},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532153706163},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1532153706184}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2018-07-01T08:37:43.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-01 16:37:43\ntype: \"tags\"\n---\n","updated":"2018-07-01T08:38:30.511Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjv0r4yv0000lq0hwy3bd8yi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AIDL","date":"2016-09-25T16:00:00.000Z","_content":"\n<font style=\"font-family:微软雅黑\">\n## Aidl:android interface definition language\naidl是安卓中一种跨进程通信的方式。\n#### 服务端\n* 创建一个service来监听客户端的连接请求\n* 创建aidl文件，声明将要供客户端使用的接口以及方法\n* 在service中实现接口方法。\n#### 客户端\n* 绑定服务端的service\n* 将服务端返回的Binder对象转化成AIDL接口的类型\n* 那么我们就能够在客户端中实现调用AIDL的方法了。（跨进程方法调用）\n","source":"_posts/AIDL.md","raw":"title: AIDL\ndate: 2016-09-26\ntags:\n- android\n \n---\n\n<font style=\"font-family:微软雅黑\">\n## Aidl:android interface definition language\naidl是安卓中一种跨进程通信的方式。\n#### 服务端\n* 创建一个service来监听客户端的连接请求\n* 创建aidl文件，声明将要供客户端使用的接口以及方法\n* 在service中实现接口方法。\n#### 客户端\n* 绑定服务端的service\n* 将服务端返回的Binder对象转化成AIDL接口的类型\n* 那么我们就能够在客户端中实现调用AIDL的方法了。（跨进程方法调用）\n","slug":"AIDL","published":1,"updated":"2018-07-01T08:33:28.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4yx0001lq0hs2hvu655","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Aidl-android-interface-definition-language\"><a href=\"#Aidl-android-interface-definition-language\" class=\"headerlink\" title=\"Aidl:android interface definition language\"></a>Aidl:android interface definition language</h2><p>aidl是安卓中一种跨进程通信的方式。</p>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><ul>\n<li>创建一个service来监听客户端的连接请求</li>\n<li>创建aidl文件，声明将要供客户端使用的接口以及方法</li>\n<li>在service中实现接口方法。<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4></li>\n<li>绑定服务端的service</li>\n<li>将服务端返回的Binder对象转化成AIDL接口的类型</li>\n<li>那么我们就能够在客户端中实现调用AIDL的方法了。（跨进程方法调用）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Aidl-android-interface-definition-language\"><a href=\"#Aidl-android-interface-definition-language\" class=\"headerlink\" title=\"Aidl:android interface definition language\"></a>Aidl:android interface definition language</h2><p>aidl是安卓中一种跨进程通信的方式。</p>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><ul>\n<li>创建一个service来监听客户端的连接请求</li>\n<li>创建aidl文件，声明将要供客户端使用的接口以及方法</li>\n<li>在service中实现接口方法。<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4></li>\n<li>绑定服务端的service</li>\n<li>将服务端返回的Binder对象转化成AIDL接口的类型</li>\n<li>那么我们就能够在客户端中实现调用AIDL的方法了。（跨进程方法调用）</li>\n</ul>\n"},{"title":"Activity","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## Activity\n### res目录\n* drawable 存放图片\n> * R.drawable.XXX\n> * @drawable/XXX\n\n* values 存放字符串\n> * 代码中：R.string.XXX\t\n> * xml中：@string/XXX\n\n\n* layout 存放布局文件\n* menu 存放菜单文件\n\n* 项目中任何添加的资源都会在R文件中生成一个相应的资源id。\n\n### 添加菜单\n1. res下新建menu文件夹，添加菜单文件（res的menu文件夹中）\n2. 重写onCreateOptionsMenu方法\n\n\t    @Override\n\t    public boolean onCreateOptionsMenu(Menu menu) {\n\t        this.getMenuInflater().inflate(R.menu.main, menu);\n\t        return true;\n\t    }\n3. 响应点击按钮事件\n\n\t    @Override\n\t    public boolean onOptionsItemSelected(MenuItem item) {\n\t        switch (item.getItemId()) {\n\t            case R.id.set_item:\n\t                Toast.makeText(this, \"设置\", Toast.LENGTH_SHORT).show();\n\t        }\n\t        return true;\n\t    }\n\n### Intent\n#### 隐式intent\n##### 待启动的activity\n* 在需要响应内容的Activity中添加action以及category字段，只有当这两个字段完全匹配上intent的相应的值时，才可以启动activity。\n* intent构造函数：action字符串传入，默认情况下会插入\n\n\t>\"android.intent.category.DEFAULT\"\n\n* intent-filter可以指定data标签，更精确的指定当前activity能够响应的数据\n\n\t\t<data android:scheme=\"http\"\n            android:mimeType=\"XXX\"></data>\n除此之外，还能够匹配host，port，path等，只有当这些值完全匹配，才会被启动。\n##### 隐式启动activity时\n* intent 可以指定多个category\n* \n\n\n                    Intent intent  = new Intent(Intent.ACTION_VIEW);\n                    intent.setData(Uri.parse(\"http://www.baidu.com\"));\n\n\n                    Intent intent = new Intent(Intent.ACTION_DIAL);\n                    intent.setData(Uri.parse(\"tel:10086\"));\n* intent setDateAndType（，）两个参数分别是uri以及文件类型.\n[http://blog.csdn.net/chaoyu168/article/details/50778016](http://blog.csdn.net/chaoyu168/article/details/50778016)\n##### activity之间传递数据\n* 传递给下一个界面\n\t> * 在intent当中putExtra就可以了,在下一个界面当中getIntent获得intent就可以读取里面的内容了。\n\t  \n\t> * 可以直接使用key-value的方式插入intent中，也可以通过bundle类来进行插入，bundle类类似一个map，能够简化操作。\n\t> * 实现了序列化接口的类对象也可以通过intent传递。\n* 对接时怎么样传递数据比较好呢？\n\t> 在被启动的页面中新增一个静态方法actionStart(),参数需要有context，然后参数列表是需要传递的数据，这样在前一个页面中直接调用这个方法就可以启动新的页面了。\n\n* startActivityForResult\n\t> * 启动时传入requestCode\n\t> * 重写onActivityResult方法，根据参数中的requestCode判断是哪个的回调。\n\t> * 必要时还需要重写被启动页面的返回键回调函数onBackPress()\n\n##### 生命周期\n![](http://7xkzud.com1.z0.glb.clouddn.com/16-9-23/53552719.jpg)\n\n##### Activity被回收了\n* onSaveInstanceState(Bundle)\n* onCreate(Bundle)\n\n##### 启动模式\n* standard模式\n* singleTop模式\n\t> * 栈顶如果是要启动的activity，则不新建，仅此而已。\n\n* singleTask模式\n\t> * 检查返回栈中是否存在类的实例，如果存在将其上的所有activity出栈。\n* singleInstance模式\n\t> * 存放在一个新的返回栈里面。\n\n","source":"_posts/Activity.md","raw":"title: Activity\ndate: 2016-09-26\ntag:\n- android\n- 第一行代码\n\n---\n<font style=\"font-family:微软雅黑\">\n## Activity\n### res目录\n* drawable 存放图片\n> * R.drawable.XXX\n> * @drawable/XXX\n\n* values 存放字符串\n> * 代码中：R.string.XXX\t\n> * xml中：@string/XXX\n\n\n* layout 存放布局文件\n* menu 存放菜单文件\n\n* 项目中任何添加的资源都会在R文件中生成一个相应的资源id。\n\n### 添加菜单\n1. res下新建menu文件夹，添加菜单文件（res的menu文件夹中）\n2. 重写onCreateOptionsMenu方法\n\n\t    @Override\n\t    public boolean onCreateOptionsMenu(Menu menu) {\n\t        this.getMenuInflater().inflate(R.menu.main, menu);\n\t        return true;\n\t    }\n3. 响应点击按钮事件\n\n\t    @Override\n\t    public boolean onOptionsItemSelected(MenuItem item) {\n\t        switch (item.getItemId()) {\n\t            case R.id.set_item:\n\t                Toast.makeText(this, \"设置\", Toast.LENGTH_SHORT).show();\n\t        }\n\t        return true;\n\t    }\n\n### Intent\n#### 隐式intent\n##### 待启动的activity\n* 在需要响应内容的Activity中添加action以及category字段，只有当这两个字段完全匹配上intent的相应的值时，才可以启动activity。\n* intent构造函数：action字符串传入，默认情况下会插入\n\n\t>\"android.intent.category.DEFAULT\"\n\n* intent-filter可以指定data标签，更精确的指定当前activity能够响应的数据\n\n\t\t<data android:scheme=\"http\"\n            android:mimeType=\"XXX\"></data>\n除此之外，还能够匹配host，port，path等，只有当这些值完全匹配，才会被启动。\n##### 隐式启动activity时\n* intent 可以指定多个category\n* \n\n\n                    Intent intent  = new Intent(Intent.ACTION_VIEW);\n                    intent.setData(Uri.parse(\"http://www.baidu.com\"));\n\n\n                    Intent intent = new Intent(Intent.ACTION_DIAL);\n                    intent.setData(Uri.parse(\"tel:10086\"));\n* intent setDateAndType（，）两个参数分别是uri以及文件类型.\n[http://blog.csdn.net/chaoyu168/article/details/50778016](http://blog.csdn.net/chaoyu168/article/details/50778016)\n##### activity之间传递数据\n* 传递给下一个界面\n\t> * 在intent当中putExtra就可以了,在下一个界面当中getIntent获得intent就可以读取里面的内容了。\n\t  \n\t> * 可以直接使用key-value的方式插入intent中，也可以通过bundle类来进行插入，bundle类类似一个map，能够简化操作。\n\t> * 实现了序列化接口的类对象也可以通过intent传递。\n* 对接时怎么样传递数据比较好呢？\n\t> 在被启动的页面中新增一个静态方法actionStart(),参数需要有context，然后参数列表是需要传递的数据，这样在前一个页面中直接调用这个方法就可以启动新的页面了。\n\n* startActivityForResult\n\t> * 启动时传入requestCode\n\t> * 重写onActivityResult方法，根据参数中的requestCode判断是哪个的回调。\n\t> * 必要时还需要重写被启动页面的返回键回调函数onBackPress()\n\n##### 生命周期\n![](http://7xkzud.com1.z0.glb.clouddn.com/16-9-23/53552719.jpg)\n\n##### Activity被回收了\n* onSaveInstanceState(Bundle)\n* onCreate(Bundle)\n\n##### 启动模式\n* standard模式\n* singleTop模式\n\t> * 栈顶如果是要启动的activity，则不新建，仅此而已。\n\n* singleTask模式\n\t> * 检查返回栈中是否存在类的实例，如果存在将其上的所有activity出栈。\n* singleInstance模式\n\t> * 存放在一个新的返回栈里面。\n\n","slug":"Activity","published":1,"updated":"2016-09-26T08:58:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4z00002lq0hgdrx1cfe","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><h3 id=\"res目录\"><a href=\"#res目录\" class=\"headerlink\" title=\"res目录\"></a>res目录</h3><ul>\n<li><p>drawable 存放图片</p>\n<blockquote>\n<ul>\n<li>R.drawable.XXX</li>\n<li>@drawable/XXX</li>\n</ul>\n</blockquote>\n</li>\n<li><p>values 存放字符串</p>\n<blockquote>\n<ul>\n<li>代码中：R.string.XXX    </li>\n<li>xml中：@string/XXX</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>layout 存放布局文件</li>\n<li><p>menu 存放菜单文件</p>\n</li>\n<li><p>项目中任何添加的资源都会在R文件中生成一个相应的资源id。</p>\n</li>\n</ul>\n<h3 id=\"添加菜单\"><a href=\"#添加菜单\" class=\"headerlink\" title=\"添加菜单\"></a>添加菜单</h3><ol>\n<li>res下新建menu文件夹，添加菜单文件（res的menu文件夹中）</li>\n<li><p>重写onCreateOptionsMenu方法</p>\n<pre><code>@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    this.getMenuInflater().inflate(R.menu.main, menu);\n    return true;\n}\n</code></pre></li>\n<li><p>响应点击按钮事件</p>\n<pre><code>@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.set_item:\n            Toast.makeText(this, &quot;设置&quot;, Toast.LENGTH_SHORT).show();\n    }\n    return true;\n}\n</code></pre></li>\n</ol>\n<h3 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h3><h4 id=\"隐式intent\"><a href=\"#隐式intent\" class=\"headerlink\" title=\"隐式intent\"></a>隐式intent</h4><h5 id=\"待启动的activity\"><a href=\"#待启动的activity\" class=\"headerlink\" title=\"待启动的activity\"></a>待启动的activity</h5><ul>\n<li>在需要响应内容的Activity中添加action以及category字段，只有当这两个字段完全匹配上intent的相应的值时，才可以启动activity。</li>\n<li><p>intent构造函数：action字符串传入，默认情况下会插入</p>\n<blockquote>\n<p>“android.intent.category.DEFAULT”</p>\n</blockquote>\n</li>\n<li><p>intent-filter可以指定data标签，更精确的指定当前activity能够响应的数据</p>\n<pre><code>&lt;data android:scheme=&quot;http&quot;\n    android:mimeType=&quot;XXX&quot;&gt;&lt;/data&gt;\n</code></pre><p>除此之外，还能够匹配host，port，path等，只有当这些值完全匹配，才会被启动。</p>\n<h5 id=\"隐式启动activity时\"><a href=\"#隐式启动activity时\" class=\"headerlink\" title=\"隐式启动activity时\"></a>隐式启动activity时</h5></li>\n<li>intent 可以指定多个category</li>\n<li></li>\n</ul>\n<pre><code>Intent intent  = new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));\n\n\nIntent intent = new Intent(Intent.ACTION_DIAL);\nintent.setData(Uri.parse(&quot;tel:10086&quot;));\n</code></pre><ul>\n<li>intent setDateAndType（，）两个参数分别是uri以及文件类型.<br><a href=\"http://blog.csdn.net/chaoyu168/article/details/50778016\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chaoyu168/article/details/50778016</a><h5 id=\"activity之间传递数据\"><a href=\"#activity之间传递数据\" class=\"headerlink\" title=\"activity之间传递数据\"></a>activity之间传递数据</h5></li>\n<li><p>传递给下一个界面</p>\n<blockquote>\n<ul>\n<li>在intent当中putExtra就可以了,在下一个界面当中getIntent获得intent就可以读取里面的内容了。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可以直接使用key-value的方式插入intent中，也可以通过bundle类来进行插入，bundle类类似一个map，能够简化操作。</li>\n<li>实现了序列化接口的类对象也可以通过intent传递。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>对接时怎么样传递数据比较好呢？</p>\n<blockquote>\n<p>在被启动的页面中新增一个静态方法actionStart(),参数需要有context，然后参数列表是需要传递的数据，这样在前一个页面中直接调用这个方法就可以启动新的页面了。</p>\n</blockquote>\n</li>\n<li><p>startActivityForResult</p>\n<blockquote>\n<ul>\n<li>启动时传入requestCode</li>\n<li>重写onActivityResult方法，根据参数中的requestCode判断是哪个的回调。</li>\n<li>必要时还需要重写被启动页面的返回键回调函数onBackPress()</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><p><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-9-23/53552719.jpg\" alt=\"\"></p>\n<h5 id=\"Activity被回收了\"><a href=\"#Activity被回收了\" class=\"headerlink\" title=\"Activity被回收了\"></a>Activity被回收了</h5><ul>\n<li>onSaveInstanceState(Bundle)</li>\n<li>onCreate(Bundle)</li>\n</ul>\n<h5 id=\"启动模式\"><a href=\"#启动模式\" class=\"headerlink\" title=\"启动模式\"></a>启动模式</h5><ul>\n<li>standard模式</li>\n<li><p>singleTop模式</p>\n<blockquote>\n<ul>\n<li>栈顶如果是要启动的activity，则不新建，仅此而已。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>singleTask模式</p>\n<blockquote>\n<ul>\n<li>检查返回栈中是否存在类的实例，如果存在将其上的所有activity出栈。</li>\n</ul>\n</blockquote>\n</li>\n<li>singleInstance模式<blockquote>\n<ul>\n<li>存放在一个新的返回栈里面。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><h3 id=\"res目录\"><a href=\"#res目录\" class=\"headerlink\" title=\"res目录\"></a>res目录</h3><ul>\n<li><p>drawable 存放图片</p>\n<blockquote>\n<ul>\n<li>R.drawable.XXX</li>\n<li>@drawable/XXX</li>\n</ul>\n</blockquote>\n</li>\n<li><p>values 存放字符串</p>\n<blockquote>\n<ul>\n<li>代码中：R.string.XXX    </li>\n<li>xml中：@string/XXX</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>layout 存放布局文件</li>\n<li><p>menu 存放菜单文件</p>\n</li>\n<li><p>项目中任何添加的资源都会在R文件中生成一个相应的资源id。</p>\n</li>\n</ul>\n<h3 id=\"添加菜单\"><a href=\"#添加菜单\" class=\"headerlink\" title=\"添加菜单\"></a>添加菜单</h3><ol>\n<li>res下新建menu文件夹，添加菜单文件（res的menu文件夹中）</li>\n<li><p>重写onCreateOptionsMenu方法</p>\n<pre><code>@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    this.getMenuInflater().inflate(R.menu.main, menu);\n    return true;\n}\n</code></pre></li>\n<li><p>响应点击按钮事件</p>\n<pre><code>@Override\npublic boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.set_item:\n            Toast.makeText(this, &quot;设置&quot;, Toast.LENGTH_SHORT).show();\n    }\n    return true;\n}\n</code></pre></li>\n</ol>\n<h3 id=\"Intent\"><a href=\"#Intent\" class=\"headerlink\" title=\"Intent\"></a>Intent</h3><h4 id=\"隐式intent\"><a href=\"#隐式intent\" class=\"headerlink\" title=\"隐式intent\"></a>隐式intent</h4><h5 id=\"待启动的activity\"><a href=\"#待启动的activity\" class=\"headerlink\" title=\"待启动的activity\"></a>待启动的activity</h5><ul>\n<li>在需要响应内容的Activity中添加action以及category字段，只有当这两个字段完全匹配上intent的相应的值时，才可以启动activity。</li>\n<li><p>intent构造函数：action字符串传入，默认情况下会插入</p>\n<blockquote>\n<p>“android.intent.category.DEFAULT”</p>\n</blockquote>\n</li>\n<li><p>intent-filter可以指定data标签，更精确的指定当前activity能够响应的数据</p>\n<pre><code>&lt;data android:scheme=&quot;http&quot;\n    android:mimeType=&quot;XXX&quot;&gt;&lt;/data&gt;\n</code></pre><p>除此之外，还能够匹配host，port，path等，只有当这些值完全匹配，才会被启动。</p>\n<h5 id=\"隐式启动activity时\"><a href=\"#隐式启动activity时\" class=\"headerlink\" title=\"隐式启动activity时\"></a>隐式启动activity时</h5></li>\n<li>intent 可以指定多个category</li>\n<li></li>\n</ul>\n<pre><code>Intent intent  = new Intent(Intent.ACTION_VIEW);\nintent.setData(Uri.parse(&quot;http://www.baidu.com&quot;));\n\n\nIntent intent = new Intent(Intent.ACTION_DIAL);\nintent.setData(Uri.parse(&quot;tel:10086&quot;));\n</code></pre><ul>\n<li>intent setDateAndType（，）两个参数分别是uri以及文件类型.<br><a href=\"http://blog.csdn.net/chaoyu168/article/details/50778016\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/chaoyu168/article/details/50778016</a><h5 id=\"activity之间传递数据\"><a href=\"#activity之间传递数据\" class=\"headerlink\" title=\"activity之间传递数据\"></a>activity之间传递数据</h5></li>\n<li><p>传递给下一个界面</p>\n<blockquote>\n<ul>\n<li>在intent当中putExtra就可以了,在下一个界面当中getIntent获得intent就可以读取里面的内容了。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>可以直接使用key-value的方式插入intent中，也可以通过bundle类来进行插入，bundle类类似一个map，能够简化操作。</li>\n<li>实现了序列化接口的类对象也可以通过intent传递。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>对接时怎么样传递数据比较好呢？</p>\n<blockquote>\n<p>在被启动的页面中新增一个静态方法actionStart(),参数需要有context，然后参数列表是需要传递的数据，这样在前一个页面中直接调用这个方法就可以启动新的页面了。</p>\n</blockquote>\n</li>\n<li><p>startActivityForResult</p>\n<blockquote>\n<ul>\n<li>启动时传入requestCode</li>\n<li>重写onActivityResult方法，根据参数中的requestCode判断是哪个的回调。</li>\n<li>必要时还需要重写被启动页面的返回键回调函数onBackPress()</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h5><p><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-9-23/53552719.jpg\" alt=\"\"></p>\n<h5 id=\"Activity被回收了\"><a href=\"#Activity被回收了\" class=\"headerlink\" title=\"Activity被回收了\"></a>Activity被回收了</h5><ul>\n<li>onSaveInstanceState(Bundle)</li>\n<li>onCreate(Bundle)</li>\n</ul>\n<h5 id=\"启动模式\"><a href=\"#启动模式\" class=\"headerlink\" title=\"启动模式\"></a>启动模式</h5><ul>\n<li>standard模式</li>\n<li><p>singleTop模式</p>\n<blockquote>\n<ul>\n<li>栈顶如果是要启动的activity，则不新建，仅此而已。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>singleTask模式</p>\n<blockquote>\n<ul>\n<li>检查返回栈中是否存在类的实例，如果存在将其上的所有activity出栈。</li>\n</ul>\n</blockquote>\n</li>\n<li>singleInstance模式<blockquote>\n<ul>\n<li>存放在一个新的返回栈里面。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Android笔试题目","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family: 微软雅黑;\">\ntitle: Android基础笔试题\ntags:\n- android\n- 笔试\n# activity的启动过程\n> onCreate()->onStart()->onResume()->运行->onPause()->onStop()->onDestroy.\n\n* 注意，当启动新的activity或切换到桌面时，回调onPause和onStop，切换回来的时候，回调onRestart->onStart->onResume。\n* back回退时，回调onPause，onStop，onDestroy。\n* 如果被系统回收的话，则与初次启动回调函数一样，但是在onCreate中会有个状态保存的变量供恢复数据\n* 旧Activity的onPause先调用，然后新Activity才启动。\n* 意外情况activity被销毁的时候，会调用onSaveInstanceState保存状态，再将Bundle对象传递给onRestoreInstanceState和onCreate方法。\n* 资源内存不足导致activity被杀死\n* 优先级：前台>可见但非前台（弹出对话框的activity）>后台（已经被暂停的）\n\n# activity的启动模式有\n* 标准模式\n* singleTop 栈顶复用模式，如果在栈顶，则不重新创建，同时调用onNewIntent方法\n* singleTask  栈内复用,在一个新的task中产生这个实例，以后每次调用都会使用这个。\n* singleInstance 单实例模式，与singleTask模式基本一样，区别在于在这个模式下的activity实例所处的task中只有这个实例而不会有其他的实例。\n\n# 数据存储方式\n* sharedpreferrence：xml格式，简单的键值对，有缓存，注意多线程访问时候可能出现的问题\n* 普通文件存储\n* SQLite数据库：轻量级的数据库，使用openHelper，cursor，SQLiteDataBase。\n* ContentProvider。cursor，provider。\n* 网络。httpURLconnection。\n\n\n\n","source":"_posts/Android笔试题目.md","raw":"title: Android笔试题目\ndate: 2016-09-26\ntags:\n- android\n \n---\n<font style=\"font-family: 微软雅黑;\">\ntitle: Android基础笔试题\ntags:\n- android\n- 笔试\n# activity的启动过程\n> onCreate()->onStart()->onResume()->运行->onPause()->onStop()->onDestroy.\n\n* 注意，当启动新的activity或切换到桌面时，回调onPause和onStop，切换回来的时候，回调onRestart->onStart->onResume。\n* back回退时，回调onPause，onStop，onDestroy。\n* 如果被系统回收的话，则与初次启动回调函数一样，但是在onCreate中会有个状态保存的变量供恢复数据\n* 旧Activity的onPause先调用，然后新Activity才启动。\n* 意外情况activity被销毁的时候，会调用onSaveInstanceState保存状态，再将Bundle对象传递给onRestoreInstanceState和onCreate方法。\n* 资源内存不足导致activity被杀死\n* 优先级：前台>可见但非前台（弹出对话框的activity）>后台（已经被暂停的）\n\n# activity的启动模式有\n* 标准模式\n* singleTop 栈顶复用模式，如果在栈顶，则不重新创建，同时调用onNewIntent方法\n* singleTask  栈内复用,在一个新的task中产生这个实例，以后每次调用都会使用这个。\n* singleInstance 单实例模式，与singleTask模式基本一样，区别在于在这个模式下的activity实例所处的task中只有这个实例而不会有其他的实例。\n\n# 数据存储方式\n* sharedpreferrence：xml格式，简单的键值对，有缓存，注意多线程访问时候可能出现的问题\n* 普通文件存储\n* SQLite数据库：轻量级的数据库，使用openHelper，cursor，SQLiteDataBase。\n* ContentProvider。cursor，provider。\n* 网络。httpURLconnection。\n\n\n\n","slug":"Android笔试题目","published":1,"updated":"2018-07-01T08:33:32.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4z30004lq0htac42fl6","content":"<p><font style=\"font-family: 微软雅黑;\"><br>title: Android基础笔试题<br>tags:</font></p>\n<ul>\n<li>android</li>\n<li>笔试<h1 id=\"activity的启动过程\"><a href=\"#activity的启动过程\" class=\"headerlink\" title=\"activity的启动过程\"></a>activity的启动过程</h1><blockquote>\n<p>onCreate()-&gt;onStart()-&gt;onResume()-&gt;运行-&gt;onPause()-&gt;onStop()-&gt;onDestroy.</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>注意，当启动新的activity或切换到桌面时，回调onPause和onStop，切换回来的时候，回调onRestart-&gt;onStart-&gt;onResume。</li>\n<li>back回退时，回调onPause，onStop，onDestroy。</li>\n<li>如果被系统回收的话，则与初次启动回调函数一样，但是在onCreate中会有个状态保存的变量供恢复数据</li>\n<li>旧Activity的onPause先调用，然后新Activity才启动。</li>\n<li>意外情况activity被销毁的时候，会调用onSaveInstanceState保存状态，再将Bundle对象传递给onRestoreInstanceState和onCreate方法。</li>\n<li>资源内存不足导致activity被杀死</li>\n<li>优先级：前台&gt;可见但非前台（弹出对话框的activity）&gt;后台（已经被暂停的）</li>\n</ul>\n<h1 id=\"activity的启动模式有\"><a href=\"#activity的启动模式有\" class=\"headerlink\" title=\"activity的启动模式有\"></a>activity的启动模式有</h1><ul>\n<li>标准模式</li>\n<li>singleTop 栈顶复用模式，如果在栈顶，则不重新创建，同时调用onNewIntent方法</li>\n<li>singleTask  栈内复用,在一个新的task中产生这个实例，以后每次调用都会使用这个。</li>\n<li>singleInstance 单实例模式，与singleTask模式基本一样，区别在于在这个模式下的activity实例所处的task中只有这个实例而不会有其他的实例。</li>\n</ul>\n<h1 id=\"数据存储方式\"><a href=\"#数据存储方式\" class=\"headerlink\" title=\"数据存储方式\"></a>数据存储方式</h1><ul>\n<li>sharedpreferrence：xml格式，简单的键值对，有缓存，注意多线程访问时候可能出现的问题</li>\n<li>普通文件存储</li>\n<li>SQLite数据库：轻量级的数据库，使用openHelper，cursor，SQLiteDataBase。</li>\n<li>ContentProvider。cursor，provider。</li>\n<li>网络。httpURLconnection。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family: 微软雅黑;\"><br>title: Android基础笔试题<br>tags:</font></p>\n<ul>\n<li>android</li>\n<li>笔试<h1 id=\"activity的启动过程\"><a href=\"#activity的启动过程\" class=\"headerlink\" title=\"activity的启动过程\"></a>activity的启动过程</h1><blockquote>\n<p>onCreate()-&gt;onStart()-&gt;onResume()-&gt;运行-&gt;onPause()-&gt;onStop()-&gt;onDestroy.</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>注意，当启动新的activity或切换到桌面时，回调onPause和onStop，切换回来的时候，回调onRestart-&gt;onStart-&gt;onResume。</li>\n<li>back回退时，回调onPause，onStop，onDestroy。</li>\n<li>如果被系统回收的话，则与初次启动回调函数一样，但是在onCreate中会有个状态保存的变量供恢复数据</li>\n<li>旧Activity的onPause先调用，然后新Activity才启动。</li>\n<li>意外情况activity被销毁的时候，会调用onSaveInstanceState保存状态，再将Bundle对象传递给onRestoreInstanceState和onCreate方法。</li>\n<li>资源内存不足导致activity被杀死</li>\n<li>优先级：前台&gt;可见但非前台（弹出对话框的activity）&gt;后台（已经被暂停的）</li>\n</ul>\n<h1 id=\"activity的启动模式有\"><a href=\"#activity的启动模式有\" class=\"headerlink\" title=\"activity的启动模式有\"></a>activity的启动模式有</h1><ul>\n<li>标准模式</li>\n<li>singleTop 栈顶复用模式，如果在栈顶，则不重新创建，同时调用onNewIntent方法</li>\n<li>singleTask  栈内复用,在一个新的task中产生这个实例，以后每次调用都会使用这个。</li>\n<li>singleInstance 单实例模式，与singleTask模式基本一样，区别在于在这个模式下的activity实例所处的task中只有这个实例而不会有其他的实例。</li>\n</ul>\n<h1 id=\"数据存储方式\"><a href=\"#数据存储方式\" class=\"headerlink\" title=\"数据存储方式\"></a>数据存储方式</h1><ul>\n<li>sharedpreferrence：xml格式，简单的键值对，有缓存，注意多线程访问时候可能出现的问题</li>\n<li>普通文件存储</li>\n<li>SQLite数据库：轻量级的数据库，使用openHelper，cursor，SQLiteDataBase。</li>\n<li>ContentProvider。cursor，provider。</li>\n<li>网络。httpURLconnection。</li>\n</ul>\n"},{"title":"CSRF浅析","date":"2018-01-24T03:01:37.000Z","_content":"\n# CSRF浅析\n## 什么是CSRF\nCross-site request forgery,跨站请求伪造.\n## 简单的攻击样例\n1. 小明访问并且登录了网站A\n2. 小明访问坏人的网站B,网站B上存在一些网站A的请求(GET或者POST)\n\t\t\n\t\t一个简单的get请求可以利用img的src属性:\n\t\t<img src=\"http://example.com/get?xxx=xxx\">\n3. 访问时触发了请求,此时由于请求中携带着相关的cookie信息,所以网站A是会通过这些非法的请求的,也就是跨站(在黑客网站B)请求伪造.\n\n## 预防\n### referer验证\n这是一种不安全的校验方法\n#### 校验原理\n对于网络请求,在header里面存在着referer属性,这个属性标识出请求的来源网站,所以我们可以通过验证referer来预防csrf攻击\n#### 存在问题\n1. 对于某些浏览器来说,这个属性可能为空\n2. referer可以轻易地伪造\n3. 从搜索引擎跳转时,referer是搜索引擎,所以可能需要维护一个白名单\n\n### 双提交cookie\n较为安全\n#### 实现\n对于每一个网络请求,在提交请求时,在js中将cookie中的某些值(可以是单独生成的token或者用户标志灯)添加到header上提交,在后台去校验是否存在token以及是否与cookie的值相匹配\n#### 原理\n当你在访问坏人的网站B时,同时提交的仅仅只有cookie,而你在正常访问时,提交时会在header中添加csrftoken.\n#### 问题\n其实也不能算是问题吧,如果你的网络请求是统一到一个方法里面执行的,例如说ajax或者dwr,那么就可以很方便地修改,但是如果不是的话,那么修改的工作量可能就有点大了.\n\n\n## 参考\n[https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0](https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0 \"跨站请求伪造-维基百科\")\n[https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80](https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80 \"HTTP来源地址-维基百科\")\n[https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html](https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html \"浅谈CSRF攻击方式\")\n","source":"_posts/CSRF浅析.md","raw":"---\ntitle: CSRF浅析\ndate: 2018-01-24 11:01:37\ntags:\n- web安全\n- CSRF\n---\n\n# CSRF浅析\n## 什么是CSRF\nCross-site request forgery,跨站请求伪造.\n## 简单的攻击样例\n1. 小明访问并且登录了网站A\n2. 小明访问坏人的网站B,网站B上存在一些网站A的请求(GET或者POST)\n\t\t\n\t\t一个简单的get请求可以利用img的src属性:\n\t\t<img src=\"http://example.com/get?xxx=xxx\">\n3. 访问时触发了请求,此时由于请求中携带着相关的cookie信息,所以网站A是会通过这些非法的请求的,也就是跨站(在黑客网站B)请求伪造.\n\n## 预防\n### referer验证\n这是一种不安全的校验方法\n#### 校验原理\n对于网络请求,在header里面存在着referer属性,这个属性标识出请求的来源网站,所以我们可以通过验证referer来预防csrf攻击\n#### 存在问题\n1. 对于某些浏览器来说,这个属性可能为空\n2. referer可以轻易地伪造\n3. 从搜索引擎跳转时,referer是搜索引擎,所以可能需要维护一个白名单\n\n### 双提交cookie\n较为安全\n#### 实现\n对于每一个网络请求,在提交请求时,在js中将cookie中的某些值(可以是单独生成的token或者用户标志灯)添加到header上提交,在后台去校验是否存在token以及是否与cookie的值相匹配\n#### 原理\n当你在访问坏人的网站B时,同时提交的仅仅只有cookie,而你在正常访问时,提交时会在header中添加csrftoken.\n#### 问题\n其实也不能算是问题吧,如果你的网络请求是统一到一个方法里面执行的,例如说ajax或者dwr,那么就可以很方便地修改,但是如果不是的话,那么修改的工作量可能就有点大了.\n\n\n## 参考\n[https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0](https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0 \"跨站请求伪造-维基百科\")\n[https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80](https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80 \"HTTP来源地址-维基百科\")\n[https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html](https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html \"浅谈CSRF攻击方式\")\n","slug":"CSRF浅析","published":1,"updated":"2018-01-24T03:22:32.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4z50005lq0hex0dqo6w","content":"<h1 id=\"CSRF浅析\"><a href=\"#CSRF浅析\" class=\"headerlink\" title=\"CSRF浅析\"></a>CSRF浅析</h1><h2 id=\"什么是CSRF\"><a href=\"#什么是CSRF\" class=\"headerlink\" title=\"什么是CSRF\"></a>什么是CSRF</h2><p>Cross-site request forgery,跨站请求伪造.</p>\n<h2 id=\"简单的攻击样例\"><a href=\"#简单的攻击样例\" class=\"headerlink\" title=\"简单的攻击样例\"></a>简单的攻击样例</h2><ol>\n<li>小明访问并且登录了网站A</li>\n<li><p>小明访问坏人的网站B,网站B上存在一些网站A的请求(GET或者POST)</p>\n<pre><code>一个简单的get请求可以利用img的src属性:\n&lt;img src=&quot;http://example.com/get?xxx=xxx&quot;&gt;\n</code></pre></li>\n<li>访问时触发了请求,此时由于请求中携带着相关的cookie信息,所以网站A是会通过这些非法的请求的,也就是跨站(在黑客网站B)请求伪造.</li>\n</ol>\n<h2 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h2><h3 id=\"referer验证\"><a href=\"#referer验证\" class=\"headerlink\" title=\"referer验证\"></a>referer验证</h3><p>这是一种不安全的校验方法</p>\n<h4 id=\"校验原理\"><a href=\"#校验原理\" class=\"headerlink\" title=\"校验原理\"></a>校验原理</h4><p>对于网络请求,在header里面存在着referer属性,这个属性标识出请求的来源网站,所以我们可以通过验证referer来预防csrf攻击</p>\n<h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ol>\n<li>对于某些浏览器来说,这个属性可能为空</li>\n<li>referer可以轻易地伪造</li>\n<li>从搜索引擎跳转时,referer是搜索引擎,所以可能需要维护一个白名单</li>\n</ol>\n<h3 id=\"双提交cookie\"><a href=\"#双提交cookie\" class=\"headerlink\" title=\"双提交cookie\"></a>双提交cookie</h3><p>较为安全</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>对于每一个网络请求,在提交请求时,在js中将cookie中的某些值(可以是单独生成的token或者用户标志灯)添加到header上提交,在后台去校验是否存在token以及是否与cookie的值相匹配</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>当你在访问坏人的网站B时,同时提交的仅仅只有cookie,而你在正常访问时,提交时会在header中添加csrftoken.</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>其实也不能算是问题吧,如果你的网络请求是统一到一个方法里面执行的,例如说ajax或者dwr,那么就可以很方便地修改,但是如果不是的话,那么修改的工作量可能就有点大了.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\" title=\"跨站请求伪造-维基百科\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0</a><br><a href=\"https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80\" title=\"HTTP来源地址-维基百科\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80</a><br><a href=\"https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\" title=\"浅谈CSRF攻击方式\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSRF浅析\"><a href=\"#CSRF浅析\" class=\"headerlink\" title=\"CSRF浅析\"></a>CSRF浅析</h1><h2 id=\"什么是CSRF\"><a href=\"#什么是CSRF\" class=\"headerlink\" title=\"什么是CSRF\"></a>什么是CSRF</h2><p>Cross-site request forgery,跨站请求伪造.</p>\n<h2 id=\"简单的攻击样例\"><a href=\"#简单的攻击样例\" class=\"headerlink\" title=\"简单的攻击样例\"></a>简单的攻击样例</h2><ol>\n<li>小明访问并且登录了网站A</li>\n<li><p>小明访问坏人的网站B,网站B上存在一些网站A的请求(GET或者POST)</p>\n<pre><code>一个简单的get请求可以利用img的src属性:\n&lt;img src=&quot;http://example.com/get?xxx=xxx&quot;&gt;\n</code></pre></li>\n<li>访问时触发了请求,此时由于请求中携带着相关的cookie信息,所以网站A是会通过这些非法的请求的,也就是跨站(在黑客网站B)请求伪造.</li>\n</ol>\n<h2 id=\"预防\"><a href=\"#预防\" class=\"headerlink\" title=\"预防\"></a>预防</h2><h3 id=\"referer验证\"><a href=\"#referer验证\" class=\"headerlink\" title=\"referer验证\"></a>referer验证</h3><p>这是一种不安全的校验方法</p>\n<h4 id=\"校验原理\"><a href=\"#校验原理\" class=\"headerlink\" title=\"校验原理\"></a>校验原理</h4><p>对于网络请求,在header里面存在着referer属性,这个属性标识出请求的来源网站,所以我们可以通过验证referer来预防csrf攻击</p>\n<h4 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h4><ol>\n<li>对于某些浏览器来说,这个属性可能为空</li>\n<li>referer可以轻易地伪造</li>\n<li>从搜索引擎跳转时,referer是搜索引擎,所以可能需要维护一个白名单</li>\n</ol>\n<h3 id=\"双提交cookie\"><a href=\"#双提交cookie\" class=\"headerlink\" title=\"双提交cookie\"></a>双提交cookie</h3><p>较为安全</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>对于每一个网络请求,在提交请求时,在js中将cookie中的某些值(可以是单独生成的token或者用户标志灯)添加到header上提交,在后台去校验是否存在token以及是否与cookie的值相匹配</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>当你在访问坏人的网站B时,同时提交的仅仅只有cookie,而你在正常访问时,提交时会在header中添加csrftoken.</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>其实也不能算是问题吧,如果你的网络请求是统一到一个方法里面执行的,例如说ajax或者dwr,那么就可以很方便地修改,但是如果不是的话,那么修改的工作量可能就有点大了.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0\" title=\"跨站请求伪造-维基百科\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0</a><br><a href=\"https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80\" title=\"HTTP来源地址-维基百科\" target=\"_blank\" rel=\"noopener\">https://zh.wikipedia.org/wiki/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80</a><br><a href=\"https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html\" title=\"浅谈CSRF攻击方式\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a></p>\n"},{"title":"异步消息处理","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## Handler\n### Handler的使用\n1. 继承Handler类，Override它的handleMessage方法（处理消息）\n\n\t\tHandler handler = new Handler() {\n\t        @Override\n\t        public void handleMessage(Message msg) {\n\t            super.handleMessage(msg);\n\t            textView.setText(\"after handling\" + msg.getData().getString(\"key\"));\n\t        }\n\t    };\n\t* tips:Message可能需要用到的两个成员分别是\n\t\t* msg.what\n\t\t* msg.setData(),msg.getData()\n\n2. 在新开的线程中使用handler的sendMessage方法发送消息，以达到修改UI元素的效果。\n\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        Message msg = new Message();\n                        Bundle bundle = new Bundle();\n                        bundle.putString(\"key\", textView.getText().toString());\n                        msg.setData(bundle);\n                        handler.sendMessage(msg);\n                    }\n                }).start();\n3. 一些思考\n\n\n\t\tMessageQueue：消息队列\n\t\tLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n\t\tHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n\t* 所以，当我们在子线程中用handler发送消息时，插入的MessageQueue是主线程的MessageQueue，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n\n## AsyncTask\n1. 继承AsyncTask类\n\n\t\t//参数，运行时返回值类型，结果类型\n\t    class DownloadTask extends AsyncTask<String, Integer, Boolean> {\n        int count = 0;\n\t\t//任务启动前执行的函数\n        @Override\n        protected void onPreExecute() {\n            progressDialog.show();\n        }\n\t\t//后台执行的函数，可以进行耗时操作\n        @Override\n        protected Boolean doInBackground(String... params) {\n            while (true) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                count++;\n                if (count >= 10) {\n                    break;\n                }\n\t\t\t\t//这个方法会调用更新进度显示的函数。\n                publishProgress(count);\n            }\n            return true;\n        }\n\t\t//更新进度显示\n        @Override\n        protected void onProgressUpdate(Integer... values) {\n            progressDialog.setMessage(\"downloaded \" + values[0]*10 + \"%\");\n        }\n\t\t//后台执行完成之后调用。\n        @Override\n        protected void onPostExecute(Boolean aBoolean) {\n            progressDialog.dismiss();\n            if(aBoolean) {\n                Toast.makeText(MessageHandleActivity.this, \"succeed\", Toast.LENGTH_SHORT).show();\n            } else {\n                Toast.makeText(MessageHandleActivity.this, \"failed\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }","source":"_posts/Handler_async_task.md","raw":"title: 异步消息处理\ndate: 2016-09-26\ntags:\n- android\n- 第一行代码\n\n---\n<font style=\"font-family:微软雅黑\">\n## Handler\n### Handler的使用\n1. 继承Handler类，Override它的handleMessage方法（处理消息）\n\n\t\tHandler handler = new Handler() {\n\t        @Override\n\t        public void handleMessage(Message msg) {\n\t            super.handleMessage(msg);\n\t            textView.setText(\"after handling\" + msg.getData().getString(\"key\"));\n\t        }\n\t    };\n\t* tips:Message可能需要用到的两个成员分别是\n\t\t* msg.what\n\t\t* msg.setData(),msg.getData()\n\n2. 在新开的线程中使用handler的sendMessage方法发送消息，以达到修改UI元素的效果。\n\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        Message msg = new Message();\n                        Bundle bundle = new Bundle();\n                        bundle.putString(\"key\", textView.getText().toString());\n                        msg.setData(bundle);\n                        handler.sendMessage(msg);\n                    }\n                }).start();\n3. 一些思考\n\n\n\t\tMessageQueue：消息队列\n\t\tLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n\t\tHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n\t* 所以，当我们在子线程中用handler发送消息时，插入的MessageQueue是主线程的MessageQueue，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n\n## AsyncTask\n1. 继承AsyncTask类\n\n\t\t//参数，运行时返回值类型，结果类型\n\t    class DownloadTask extends AsyncTask<String, Integer, Boolean> {\n        int count = 0;\n\t\t//任务启动前执行的函数\n        @Override\n        protected void onPreExecute() {\n            progressDialog.show();\n        }\n\t\t//后台执行的函数，可以进行耗时操作\n        @Override\n        protected Boolean doInBackground(String... params) {\n            while (true) {\n                try {\n                    TimeUnit.SECONDS.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                count++;\n                if (count >= 10) {\n                    break;\n                }\n\t\t\t\t//这个方法会调用更新进度显示的函数。\n                publishProgress(count);\n            }\n            return true;\n        }\n\t\t//更新进度显示\n        @Override\n        protected void onProgressUpdate(Integer... values) {\n            progressDialog.setMessage(\"downloaded \" + values[0]*10 + \"%\");\n        }\n\t\t//后台执行完成之后调用。\n        @Override\n        protected void onPostExecute(Boolean aBoolean) {\n            progressDialog.dismiss();\n            if(aBoolean) {\n                Toast.makeText(MessageHandleActivity.this, \"succeed\", Toast.LENGTH_SHORT).show();\n            } else {\n                Toast.makeText(MessageHandleActivity.this, \"failed\", Toast.LENGTH_SHORT).show();\n            }\n        }\n    }","slug":"Handler_async_task","published":1,"updated":"2016-09-26T08:58:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4z60006lq0hv48ctk4z","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h2><h3 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h3><ol>\n<li><p>继承Handler类，Override它的handleMessage方法（处理消息）</p>\n<pre><code>Handler handler = new Handler() {\n    @Override\n    public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n        textView.setText(&quot;after handling&quot; + msg.getData().getString(&quot;key&quot;));\n    }\n};\n</code></pre><ul>\n<li>tips:Message可能需要用到的两个成员分别是<ul>\n<li>msg.what</li>\n<li>msg.setData(),msg.getData()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在新开的线程中使用handler的sendMessage方法发送消息，以达到修改UI元素的效果。</p>\n<pre><code>new Thread(new Runnable() {\n    @Override\n    public void run() {\n        Message msg = new Message();\n        Bundle bundle = new Bundle();\n        bundle.putString(&quot;key&quot;, textView.getText().toString());\n        msg.setData(bundle);\n        handler.sendMessage(msg);\n    }\n}).start();\n</code></pre></li>\n<li>一些思考</li>\n</ol>\n<pre><code>    MessageQueue：消息队列\n    Looper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n    Handler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n* 所以，当我们在子线程中用handler发送消息时，插入的MessageQueue是主线程的MessageQueue，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n</code></pre><h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><ol>\n<li><p>继承AsyncTask类</p>\n<pre><code>//参数，运行时返回值类型，结果类型\nclass DownloadTask extends AsyncTask&lt;String, Integer, Boolean&gt; {\nint count = 0;\n//任务启动前执行的函数\n@Override\nprotected void onPreExecute() {\n    progressDialog.show();\n}\n//后台执行的函数，可以进行耗时操作\n@Override\nprotected Boolean doInBackground(String... params) {\n    while (true) {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        count++;\n        if (count &gt;= 10) {\n            break;\n        }\n        //这个方法会调用更新进度显示的函数。\n        publishProgress(count);\n    }\n    return true;\n}\n//更新进度显示\n@Override\nprotected void onProgressUpdate(Integer... values) {\n    progressDialog.setMessage(&quot;downloaded &quot; + values[0]*10 + &quot;%&quot;);\n}\n//后台执行完成之后调用。\n@Override\nprotected void onPostExecute(Boolean aBoolean) {\n    progressDialog.dismiss();\n    if(aBoolean) {\n        Toast.makeText(MessageHandleActivity.this, &quot;succeed&quot;, Toast.LENGTH_SHORT).show();\n    } else {\n        Toast.makeText(MessageHandleActivity.this, &quot;failed&quot;, Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre><p> }</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Handler\"><a href=\"#Handler\" class=\"headerlink\" title=\"Handler\"></a>Handler</h2><h3 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h3><ol>\n<li><p>继承Handler类，Override它的handleMessage方法（处理消息）</p>\n<pre><code>Handler handler = new Handler() {\n    @Override\n    public void handleMessage(Message msg) {\n        super.handleMessage(msg);\n        textView.setText(&quot;after handling&quot; + msg.getData().getString(&quot;key&quot;));\n    }\n};\n</code></pre><ul>\n<li>tips:Message可能需要用到的两个成员分别是<ul>\n<li>msg.what</li>\n<li>msg.setData(),msg.getData()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在新开的线程中使用handler的sendMessage方法发送消息，以达到修改UI元素的效果。</p>\n<pre><code>new Thread(new Runnable() {\n    @Override\n    public void run() {\n        Message msg = new Message();\n        Bundle bundle = new Bundle();\n        bundle.putString(&quot;key&quot;, textView.getText().toString());\n        msg.setData(bundle);\n        handler.sendMessage(msg);\n    }\n}).start();\n</code></pre></li>\n<li>一些思考</li>\n</ol>\n<pre><code>    MessageQueue：消息队列\n    Looper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n    Handler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n* 所以，当我们在子线程中用handler发送消息时，插入的MessageQueue是主线程的MessageQueue，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n</code></pre><h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><ol>\n<li><p>继承AsyncTask类</p>\n<pre><code>//参数，运行时返回值类型，结果类型\nclass DownloadTask extends AsyncTask&lt;String, Integer, Boolean&gt; {\nint count = 0;\n//任务启动前执行的函数\n@Override\nprotected void onPreExecute() {\n    progressDialog.show();\n}\n//后台执行的函数，可以进行耗时操作\n@Override\nprotected Boolean doInBackground(String... params) {\n    while (true) {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        count++;\n        if (count &gt;= 10) {\n            break;\n        }\n        //这个方法会调用更新进度显示的函数。\n        publishProgress(count);\n    }\n    return true;\n}\n//更新进度显示\n@Override\nprotected void onProgressUpdate(Integer... values) {\n    progressDialog.setMessage(&quot;downloaded &quot; + values[0]*10 + &quot;%&quot;);\n}\n//后台执行完成之后调用。\n@Override\nprotected void onPostExecute(Boolean aBoolean) {\n    progressDialog.dismiss();\n    if(aBoolean) {\n        Toast.makeText(MessageHandleActivity.this, &quot;succeed&quot;, Toast.LENGTH_SHORT).show();\n    } else {\n        Toast.makeText(MessageHandleActivity.this, &quot;failed&quot;, Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre><p> }</p>\n</li>\n</ol>\n"},{"title":"IntentService简介及简单使用","date":"2016-10-07T05:58:04.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## 使用\n1. 创建类继承IntentService  \n\n\t\tpublic class CustomIntentService extends IntentService {\n\t\t    /**\n\t\t     * Creates an IntentService.  Invoked by your subclass's constructor.\n\t\t     *\n\t\t     */\n\t\t    public CustomIntentService() {\n\t\t        super(\"custom intent service\");\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    protected void onHandleIntent(Intent intent) {\n\t\t\t\tLogUti.d(\"on handle intent\");\n\t\t        LogUti.d(intent.getStringExtra(\"key\"));\n\t\t        SystemClock.sleep(6000);\n\t\t        LogUti.d(\"after 6000ms\");\n\t\t    }\n\t\t}\n2. 在manifest中定义service\n\n\t\t<service android:name=\"custome_service.CustomIntentService\"></service>\n\n3. 在activity中启动IntentService\n\t\t\n\t\tfindViewById(R.id.btn_start_intent_service).setOnClickListener(new View.OnClickListener() {\n\t\t            @Override\n\t\t            public void onClick(View v) {\n\t\t                Intent intent = new Intent(IntentServiceActivity.this, CustomIntentService.class);\n\t\t                intent.putExtra(\"key\", \"value\");\n\t\t                startService(intent);\n\t\t            }\n_启动服务之后调用的是onHandleIntent方法_  \n_注意onHandleIntent方法不运行在UI线程所以没有办法进行界面的操作：例如toast显示_  \n_结果如下图_  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-7/78666379.jpg)\n\n4. IntentService与Activity进行交互  \n_通过本地广播的方式进行_\n\n * 在IntentService中\n \n\t         Intent localIntent = new Intent(CustomConstans.BROADCAST_ACTION);\n\t        localIntent.putExtra(CustomConstans.BROADCAST_KEY, \"from intent service\");\n\t\t     LocalBroadcastManager.getInstance(this).sendBroadcast(localIntent);\n * 在Activity中\n\t * 新建类继承broadcastreceiver\n\t\t \n\t\t\t    private class ResponseReceive extends BroadcastReceiver{\n\t\t\t\n\t\t\t        @Override\n\t\t\t        public void onReceive(Context context, Intent intent) {\n\t\t\t            Toast.makeText(context, intent.getStringExtra(CustomConstans.BROADCAST_KEY)\n\t\t\t            , Toast.LENGTH_SHORT).show();\n\t\t\t        }\n\t\t\t    }\n\t\t* 注册广播\n\t\t\n\t\t        IntentFilter intentFilter = new IntentFilter(CustomConstans.BROADCAST_ACTION);\n\t\t        ResponseReceive responseReceive = new ResponseReceive();\n\t\t        LocalBroadcastManager.getInstance(this).registerReceiver(responseReceive, intentFilter);\n## tips\n* onHandleIntent方法运行在后台线程，无法进行界面操作。\n* 通过本地广播的方式来跟activity进行交互。\n* Work requests run sequentially. If an operation is running in an IntentService, and you send it another request, the request waits until the first operation is finished.顺序执行","source":"_posts/IntentService简介及简单使用.md","raw":"---\ntitle: IntentService简介及简单使用\ndate: 2016-10-07 13:58:04\ntags:\n- android\n\n---\n<font style=\"font-family:微软雅黑\">\n## 使用\n1. 创建类继承IntentService  \n\n\t\tpublic class CustomIntentService extends IntentService {\n\t\t    /**\n\t\t     * Creates an IntentService.  Invoked by your subclass's constructor.\n\t\t     *\n\t\t     */\n\t\t    public CustomIntentService() {\n\t\t        super(\"custom intent service\");\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    protected void onHandleIntent(Intent intent) {\n\t\t\t\tLogUti.d(\"on handle intent\");\n\t\t        LogUti.d(intent.getStringExtra(\"key\"));\n\t\t        SystemClock.sleep(6000);\n\t\t        LogUti.d(\"after 6000ms\");\n\t\t    }\n\t\t}\n2. 在manifest中定义service\n\n\t\t<service android:name=\"custome_service.CustomIntentService\"></service>\n\n3. 在activity中启动IntentService\n\t\t\n\t\tfindViewById(R.id.btn_start_intent_service).setOnClickListener(new View.OnClickListener() {\n\t\t            @Override\n\t\t            public void onClick(View v) {\n\t\t                Intent intent = new Intent(IntentServiceActivity.this, CustomIntentService.class);\n\t\t                intent.putExtra(\"key\", \"value\");\n\t\t                startService(intent);\n\t\t            }\n_启动服务之后调用的是onHandleIntent方法_  \n_注意onHandleIntent方法不运行在UI线程所以没有办法进行界面的操作：例如toast显示_  \n_结果如下图_  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-7/78666379.jpg)\n\n4. IntentService与Activity进行交互  \n_通过本地广播的方式进行_\n\n * 在IntentService中\n \n\t         Intent localIntent = new Intent(CustomConstans.BROADCAST_ACTION);\n\t        localIntent.putExtra(CustomConstans.BROADCAST_KEY, \"from intent service\");\n\t\t     LocalBroadcastManager.getInstance(this).sendBroadcast(localIntent);\n * 在Activity中\n\t * 新建类继承broadcastreceiver\n\t\t \n\t\t\t    private class ResponseReceive extends BroadcastReceiver{\n\t\t\t\n\t\t\t        @Override\n\t\t\t        public void onReceive(Context context, Intent intent) {\n\t\t\t            Toast.makeText(context, intent.getStringExtra(CustomConstans.BROADCAST_KEY)\n\t\t\t            , Toast.LENGTH_SHORT).show();\n\t\t\t        }\n\t\t\t    }\n\t\t* 注册广播\n\t\t\n\t\t        IntentFilter intentFilter = new IntentFilter(CustomConstans.BROADCAST_ACTION);\n\t\t        ResponseReceive responseReceive = new ResponseReceive();\n\t\t        LocalBroadcastManager.getInstance(this).registerReceiver(responseReceive, intentFilter);\n## tips\n* onHandleIntent方法运行在后台线程，无法进行界面操作。\n* 通过本地广播的方式来跟activity进行交互。\n* Work requests run sequentially. If an operation is running in an IntentService, and you send it another request, the request waits until the first operation is finished.顺序执行","slug":"IntentService简介及简单使用","published":1,"updated":"2016-10-07T08:32:31.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4z90009lq0h098tmnov","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>创建类继承IntentService  </p>\n<pre><code>public class CustomIntentService extends IntentService {\n    /**\n     * Creates an IntentService.  Invoked by your subclass&apos;s constructor.\n     *\n     */\n    public CustomIntentService() {\n        super(&quot;custom intent service&quot;);\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        LogUti.d(&quot;on handle intent&quot;);\n        LogUti.d(intent.getStringExtra(&quot;key&quot;));\n        SystemClock.sleep(6000);\n        LogUti.d(&quot;after 6000ms&quot;);\n    }\n}\n</code></pre></li>\n<li><p>在manifest中定义service</p>\n<pre><code>&lt;service android:name=&quot;custome_service.CustomIntentService&quot;&gt;&lt;/service&gt;\n</code></pre></li>\n<li><p>在activity中启动IntentService</p>\n<pre><code>findViewById(R.id.btn_start_intent_service).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(IntentServiceActivity.this, CustomIntentService.class);\n                intent.putExtra(&quot;key&quot;, &quot;value&quot;);\n                startService(intent);\n            }\n</code></pre><p><em>启动服务之后调用的是onHandleIntent方法</em><br><em>注意onHandleIntent方法不运行在UI线程所以没有办法进行界面的操作：例如toast显示</em><br><em>结果如下图</em><br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-7/78666379.jpg\" alt=\"\"></p>\n</li>\n<li><p>IntentService与Activity进行交互<br><em>通过本地广播的方式进行</em></p>\n<ul>\n<li><p>在IntentService中</p>\n<pre><code> Intent localIntent = new Intent(CustomConstans.BROADCAST_ACTION);\nlocalIntent.putExtra(CustomConstans.BROADCAST_KEY, &quot;from intent service&quot;);\n LocalBroadcastManager.getInstance(this).sendBroadcast(localIntent);\n</code></pre></li>\n<li><p>在Activity中</p>\n<ul>\n<li><p>新建类继承broadcastreceiver</p>\n<pre><code>private class ResponseReceive extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, intent.getStringExtra(CustomConstans.BROADCAST_KEY)\n        , Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre><ul>\n<li><p>注册广播</p>\n<pre><code>IntentFilter intentFilter = new IntentFilter(CustomConstans.BROADCAST_ACTION);\nResponseReceive responseReceive = new ResponseReceive();\nLocalBroadcastManager.getInstance(this).registerReceiver(responseReceive, intentFilter);\n</code></pre><h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>onHandleIntent方法运行在后台线程，无法进行界面操作。</li>\n<li>通过本地广播的方式来跟activity进行交互。</li>\n<li>Work requests run sequentially. If an operation is running in an IntentService, and you send it another request, the request waits until the first operation is finished.顺序执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>创建类继承IntentService  </p>\n<pre><code>public class CustomIntentService extends IntentService {\n    /**\n     * Creates an IntentService.  Invoked by your subclass&apos;s constructor.\n     *\n     */\n    public CustomIntentService() {\n        super(&quot;custom intent service&quot;);\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        LogUti.d(&quot;on handle intent&quot;);\n        LogUti.d(intent.getStringExtra(&quot;key&quot;));\n        SystemClock.sleep(6000);\n        LogUti.d(&quot;after 6000ms&quot;);\n    }\n}\n</code></pre></li>\n<li><p>在manifest中定义service</p>\n<pre><code>&lt;service android:name=&quot;custome_service.CustomIntentService&quot;&gt;&lt;/service&gt;\n</code></pre></li>\n<li><p>在activity中启动IntentService</p>\n<pre><code>findViewById(R.id.btn_start_intent_service).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(IntentServiceActivity.this, CustomIntentService.class);\n                intent.putExtra(&quot;key&quot;, &quot;value&quot;);\n                startService(intent);\n            }\n</code></pre><p><em>启动服务之后调用的是onHandleIntent方法</em><br><em>注意onHandleIntent方法不运行在UI线程所以没有办法进行界面的操作：例如toast显示</em><br><em>结果如下图</em><br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-7/78666379.jpg\" alt=\"\"></p>\n</li>\n<li><p>IntentService与Activity进行交互<br><em>通过本地广播的方式进行</em></p>\n<ul>\n<li><p>在IntentService中</p>\n<pre><code> Intent localIntent = new Intent(CustomConstans.BROADCAST_ACTION);\nlocalIntent.putExtra(CustomConstans.BROADCAST_KEY, &quot;from intent service&quot;);\n LocalBroadcastManager.getInstance(this).sendBroadcast(localIntent);\n</code></pre></li>\n<li><p>在Activity中</p>\n<ul>\n<li><p>新建类继承broadcastreceiver</p>\n<pre><code>private class ResponseReceive extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, intent.getStringExtra(CustomConstans.BROADCAST_KEY)\n        , Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre><ul>\n<li><p>注册广播</p>\n<pre><code>IntentFilter intentFilter = new IntentFilter(CustomConstans.BROADCAST_ACTION);\nResponseReceive responseReceive = new ResponseReceive();\nLocalBroadcastManager.getInstance(this).registerReceiver(responseReceive, intentFilter);\n</code></pre><h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>onHandleIntent方法运行在后台线程，无法进行界面操作。</li>\n<li>通过本地广播的方式来跟activity进行交互。</li>\n<li>Work requests run sequentially. If an operation is running in an IntentService, and you send it another request, the request waits until the first operation is finished.顺序执行</li>\n</ul>\n"},{"title":"JAVA NIO","date":"2017-08-23T12:31:21.000Z","_content":"\n* 参考资料:https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html\n\n\n# 主要概念:\n* 通道(channel)\n* 缓冲区(buffer)\n\n# 主要思想:\n* 在原来的IO的思想上封装,提高IO效率\n\n# 方法:\n* 通过缓冲区实现基于块的读写\n\n# 具体:\n>先获得文件的输入输出流-->从文件的输入输出流获得通道(channel)\n-->分配缓冲区(buffer)-->从缓冲区中读取内容/将内容写入缓冲\n\n\n# 缓冲区内部细节:\n缓冲区的底层实现可以看成是一个**字节数组**,\n### 三个变量\n* position:当前索引,也可以理解为指针所指的元素,初始值为0,指向第一个元素\n* limit:初始值为capacity,通过与position以clear函数和flip函数结合来确定写入写出的元素.\n* capacity:总容量,可以理解为数组长度,limit<=capacity\n\n---\n* flip函数\n1.将limit设置为position的值\n2.将position设置为0\n将buffer写入到输出通道时,调用此函数,注意在写入到输出通道时(foutchanel.write(buffer)),\nposition会步进,而limit不变,所以想要循环读取时,需要调用clear函数重置缓冲区的状态.\n\n\n* clear函数\n1.将limit设置为capacity的值\n2.将position设置为0\n\n* 文件输入输出流会记住输入输出的位置,每个字节仅能被读取一次.\n","source":"_posts/JAVA-NIO.md","raw":"---\ntitle: JAVA NIO\ndate: 2017-08-23 20:31:21\ntags:\n- java\n\n---\n\n* 参考资料:https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html\n\n\n# 主要概念:\n* 通道(channel)\n* 缓冲区(buffer)\n\n# 主要思想:\n* 在原来的IO的思想上封装,提高IO效率\n\n# 方法:\n* 通过缓冲区实现基于块的读写\n\n# 具体:\n>先获得文件的输入输出流-->从文件的输入输出流获得通道(channel)\n-->分配缓冲区(buffer)-->从缓冲区中读取内容/将内容写入缓冲\n\n\n# 缓冲区内部细节:\n缓冲区的底层实现可以看成是一个**字节数组**,\n### 三个变量\n* position:当前索引,也可以理解为指针所指的元素,初始值为0,指向第一个元素\n* limit:初始值为capacity,通过与position以clear函数和flip函数结合来确定写入写出的元素.\n* capacity:总容量,可以理解为数组长度,limit<=capacity\n\n---\n* flip函数\n1.将limit设置为position的值\n2.将position设置为0\n将buffer写入到输出通道时,调用此函数,注意在写入到输出通道时(foutchanel.write(buffer)),\nposition会步进,而limit不变,所以想要循环读取时,需要调用clear函数重置缓冲区的状态.\n\n\n* clear函数\n1.将limit设置为capacity的值\n2.将position设置为0\n\n* 文件输入输出流会记住输入输出的位置,每个字节仅能被读取一次.\n","slug":"JAVA-NIO","published":1,"updated":"2017-08-23T12:34:28.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zb000alq0h3qzo5z8v","content":"<ul>\n<li>参考资料:<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html</a></li>\n</ul>\n<h1 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念:\"></a>主要概念:</h1><ul>\n<li>通道(channel)</li>\n<li>缓冲区(buffer)</li>\n</ul>\n<h1 id=\"主要思想\"><a href=\"#主要思想\" class=\"headerlink\" title=\"主要思想:\"></a>主要思想:</h1><ul>\n<li>在原来的IO的思想上封装,提高IO效率</li>\n</ul>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法:\"></a>方法:</h1><ul>\n<li>通过缓冲区实现基于块的读写</li>\n</ul>\n<h1 id=\"具体\"><a href=\"#具体\" class=\"headerlink\" title=\"具体:\"></a>具体:</h1><blockquote>\n<p>先获得文件的输入输出流–&gt;从文件的输入输出流获得通道(channel)<br>–&gt;分配缓冲区(buffer)–&gt;从缓冲区中读取内容/将内容写入缓冲</p>\n</blockquote>\n<h1 id=\"缓冲区内部细节\"><a href=\"#缓冲区内部细节\" class=\"headerlink\" title=\"缓冲区内部细节:\"></a>缓冲区内部细节:</h1><p>缓冲区的底层实现可以看成是一个<strong>字节数组</strong>,</p>\n<h3 id=\"三个变量\"><a href=\"#三个变量\" class=\"headerlink\" title=\"三个变量\"></a>三个变量</h3><ul>\n<li>position:当前索引,也可以理解为指针所指的元素,初始值为0,指向第一个元素</li>\n<li>limit:初始值为capacity,通过与position以clear函数和flip函数结合来确定写入写出的元素.</li>\n<li>capacity:总容量,可以理解为数组长度,limit&lt;=capacity</li>\n</ul>\n<hr>\n<ul>\n<li>flip函数<br>1.将limit设置为position的值<br>2.将position设置为0<br>将buffer写入到输出通道时,调用此函数,注意在写入到输出通道时(foutchanel.write(buffer)),<br>position会步进,而limit不变,所以想要循环读取时,需要调用clear函数重置缓冲区的状态.</li>\n</ul>\n<ul>\n<li><p>clear函数<br>1.将limit设置为capacity的值<br>2.将position设置为0</p>\n</li>\n<li><p>文件输入输出流会记住输入输出的位置,每个字节仅能被读取一次.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>参考资料:<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/education/java/j-nio/j-nio.html</a></li>\n</ul>\n<h1 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念:\"></a>主要概念:</h1><ul>\n<li>通道(channel)</li>\n<li>缓冲区(buffer)</li>\n</ul>\n<h1 id=\"主要思想\"><a href=\"#主要思想\" class=\"headerlink\" title=\"主要思想:\"></a>主要思想:</h1><ul>\n<li>在原来的IO的思想上封装,提高IO效率</li>\n</ul>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法:\"></a>方法:</h1><ul>\n<li>通过缓冲区实现基于块的读写</li>\n</ul>\n<h1 id=\"具体\"><a href=\"#具体\" class=\"headerlink\" title=\"具体:\"></a>具体:</h1><blockquote>\n<p>先获得文件的输入输出流–&gt;从文件的输入输出流获得通道(channel)<br>–&gt;分配缓冲区(buffer)–&gt;从缓冲区中读取内容/将内容写入缓冲</p>\n</blockquote>\n<h1 id=\"缓冲区内部细节\"><a href=\"#缓冲区内部细节\" class=\"headerlink\" title=\"缓冲区内部细节:\"></a>缓冲区内部细节:</h1><p>缓冲区的底层实现可以看成是一个<strong>字节数组</strong>,</p>\n<h3 id=\"三个变量\"><a href=\"#三个变量\" class=\"headerlink\" title=\"三个变量\"></a>三个变量</h3><ul>\n<li>position:当前索引,也可以理解为指针所指的元素,初始值为0,指向第一个元素</li>\n<li>limit:初始值为capacity,通过与position以clear函数和flip函数结合来确定写入写出的元素.</li>\n<li>capacity:总容量,可以理解为数组长度,limit&lt;=capacity</li>\n</ul>\n<hr>\n<ul>\n<li>flip函数<br>1.将limit设置为position的值<br>2.将position设置为0<br>将buffer写入到输出通道时,调用此函数,注意在写入到输出通道时(foutchanel.write(buffer)),<br>position会步进,而limit不变,所以想要循环读取时,需要调用clear函数重置缓冲区的状态.</li>\n</ul>\n<ul>\n<li><p>clear函数<br>1.将limit设置为capacity的值<br>2.将position设置为0</p>\n</li>\n<li><p>文件输入输出流会记住输入输出的位置,每个字节仅能被读取一次.</p>\n</li>\n</ul>\n"},{"title":"JAVA中的引用","date":"2016-10-07T12:09:10.000Z","_content":"<font style=\"font-family:微软雅黑\">\n### 强引用\n* 最普遍的情况\n* 宁愿抛出OOM也不会将其回收\n* 可以通过将引用设置为null来弱化引用，便于gc回收对象\n### 软引用 SoftReference\n* 内存空间足够时不会回收，如果内存空间不足了，就会将其回收。\n\n\t\tString str=new String(\"abc\");                                     // 强引用  \n\t\tSoftReference<String> softRef=new SoftReference<String>(str);  \n\n### 弱引用WeakReference\n* 比软引用更加弱，当垃圾收集器回收时就会被回收。\n### 虚引用\n","source":"_posts/JAVA中的引用.md","raw":"---\ntitle: JAVA中的引用\ndate: 2016-10-07 20:09:10\ntags:\n- java\n\n---\n<font style=\"font-family:微软雅黑\">\n### 强引用\n* 最普遍的情况\n* 宁愿抛出OOM也不会将其回收\n* 可以通过将引用设置为null来弱化引用，便于gc回收对象\n### 软引用 SoftReference\n* 内存空间足够时不会回收，如果内存空间不足了，就会将其回收。\n\n\t\tString str=new String(\"abc\");                                     // 强引用  \n\t\tSoftReference<String> softRef=new SoftReference<String>(str);  \n\n### 弱引用WeakReference\n* 比软引用更加弱，当垃圾收集器回收时就会被回收。\n### 虚引用\n","slug":"JAVA中的引用","published":1,"updated":"2016-10-07T12:26:30.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zc000dlq0h3ac8tqxu","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h3><ul>\n<li>最普遍的情况</li>\n<li>宁愿抛出OOM也不会将其回收</li>\n<li>可以通过将引用设置为null来弱化引用，便于gc回收对象<h3 id=\"软引用-SoftReference\"><a href=\"#软引用-SoftReference\" class=\"headerlink\" title=\"软引用 SoftReference\"></a>软引用 SoftReference</h3></li>\n<li><p>内存空间足够时不会回收，如果内存空间不足了，就会将其回收。</p>\n<pre><code>String str=new String(&quot;abc&quot;);                                     // 强引用  \nSoftReference&lt;String&gt; softRef=new SoftReference&lt;String&gt;(str);  \n</code></pre></li>\n</ul>\n<h3 id=\"弱引用WeakReference\"><a href=\"#弱引用WeakReference\" class=\"headerlink\" title=\"弱引用WeakReference\"></a>弱引用WeakReference</h3><ul>\n<li>比软引用更加弱，当垃圾收集器回收时就会被回收。<h3 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h3><ul>\n<li>最普遍的情况</li>\n<li>宁愿抛出OOM也不会将其回收</li>\n<li>可以通过将引用设置为null来弱化引用，便于gc回收对象<h3 id=\"软引用-SoftReference\"><a href=\"#软引用-SoftReference\" class=\"headerlink\" title=\"软引用 SoftReference\"></a>软引用 SoftReference</h3></li>\n<li><p>内存空间足够时不会回收，如果内存空间不足了，就会将其回收。</p>\n<pre><code>String str=new String(&quot;abc&quot;);                                     // 强引用  \nSoftReference&lt;String&gt; softRef=new SoftReference&lt;String&gt;(str);  \n</code></pre></li>\n</ul>\n<h3 id=\"弱引用WeakReference\"><a href=\"#弱引用WeakReference\" class=\"headerlink\" title=\"弱引用WeakReference\"></a>弱引用WeakReference</h3><ul>\n<li>比软引用更加弱，当垃圾收集器回收时就会被回收。<h3 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h3></li>\n</ul>\n"},{"title":"JavaScript中的面向对象程序设计","date":"2017-08-28T14:39:49.000Z","_content":"\n# JavaScript中的面向对象程序设计\n## 1.最简单的模式\n### 1.1 新建实例添加属性和方法\n\t\tvar person = new Object();\n\t\tperson.name = \"name\";\n\t\tperson.sayHi = function() {\n\t\t    console.log(\"hi\");\n\t\t}\n\t\t\n\t\tconsole.log(person.name);\n\t\tperson.sayHi();\n<!--more-->\n### 1.2 对象字面量\n* 与上面的方法其实是相同的,仅仅是书写上简化了一些而已.\n\n\t\tvar person = {\n\t\t    name : \"name\",\n\t\t    sayHi : function() {\n\t\t        console.log(\"hi\");\n\t\t    }\n\t\t}\n\n---\n如果你要构造多个对象的话,那么以上的模式的问题就显而易见了:产生大量的重复代码,而函数就是解决重复代码的利器.\n## 2.工厂模式\n\tfunction createPerson() {\n\t    var o = {\n\t        name : \"name\",\n\t        sayHi : function() {\n\t            console.log(\"hi\");\n\t        }\n\t    }\n\t    return o;\n\t}\n## 3. 构造函数模式\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tperson = new Person(\"name\");\n**使用构造函数模式新建对象时,经历了以下的四个步骤:**  \n1. 创建一个新对象  \n2. 将构造函数的作用域赋给新对象(this关键字指向创建的新对象)  \n3. 执行构造函数中的代码  \n4. 返回新对象  \n\n---\n* 关于this 的具体含义,可以参考[阮一峰的网络日志-Javascript的this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n---\n现在我们解决了构造多个对象时的重复代码问题,但是其实还有另外一个问题:  \n**每一个方法都需要在每个实例上重新创建一遍**,而原型模式可以解决这个问题.\n## 4. 原型模式\n### 4.1 原型\n* 每个函数都有prototype(原型)属性,这个属性指向一个原型对象,而这个对象为所有实例共享(包括对象里面的属性以及方法).\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-28/39105696.jpg)\n* 值得注意的是,在实例中的变量会屏蔽掉原型模式中的同名变量.\n### 4.2 使用\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tPerson.prototype.sayName = function() {\n    \tconsole.log(this.name)\n\t};\n\n或者我们也可以通过对象字面量的方式来实现:\n\n\tPerson.prototype = {\n\t    constructor: Person,\n\t    a: \"a\"\n\t}\n### 4.3 问题\n随着共享随之而来的问题是:对共享变量的修改可能会影响到你的预期输出结果,所以使用时还请慎重.\n## 5. 混合使用原型模式和构造函数模式\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tPerson.prototype = {\n\t    constructor: Person,\n\t    a: \"a\"\n\t}\n\n---\n---\n## 继承\n\tfunction SuperType() {\n\t    this.property = true;\n\t}\n\t\n\tSuperType.prototype.getSuperValue = function() {\n\t    return this.property;\n\t}\n\t\n\tfunction SubType() {\n\t    this.subproperty = false;\n\t}\n\t\n\tSubType.prototype  = new SuperType();\n\t\n\tSubType.prototype.getSubValue = function() {\n\t    return this.subproperty;\n\t}\n\t\n\tvar instance = new SubType();\n\talert(instance.getSuperValue());\n\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-30/19766157.jpg)\n\n","source":"_posts/JavaScript中的面向对象程序设计.md","raw":"---\ntitle: JavaScript中的面向对象程序设计\ndate: 2017-08-28 22:39:49\ntags:\n- JavaScript\n- 面向对象\n\n---\n\n# JavaScript中的面向对象程序设计\n## 1.最简单的模式\n### 1.1 新建实例添加属性和方法\n\t\tvar person = new Object();\n\t\tperson.name = \"name\";\n\t\tperson.sayHi = function() {\n\t\t    console.log(\"hi\");\n\t\t}\n\t\t\n\t\tconsole.log(person.name);\n\t\tperson.sayHi();\n<!--more-->\n### 1.2 对象字面量\n* 与上面的方法其实是相同的,仅仅是书写上简化了一些而已.\n\n\t\tvar person = {\n\t\t    name : \"name\",\n\t\t    sayHi : function() {\n\t\t        console.log(\"hi\");\n\t\t    }\n\t\t}\n\n---\n如果你要构造多个对象的话,那么以上的模式的问题就显而易见了:产生大量的重复代码,而函数就是解决重复代码的利器.\n## 2.工厂模式\n\tfunction createPerson() {\n\t    var o = {\n\t        name : \"name\",\n\t        sayHi : function() {\n\t            console.log(\"hi\");\n\t        }\n\t    }\n\t    return o;\n\t}\n## 3. 构造函数模式\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tperson = new Person(\"name\");\n**使用构造函数模式新建对象时,经历了以下的四个步骤:**  \n1. 创建一个新对象  \n2. 将构造函数的作用域赋给新对象(this关键字指向创建的新对象)  \n3. 执行构造函数中的代码  \n4. 返回新对象  \n\n---\n* 关于this 的具体含义,可以参考[阮一峰的网络日志-Javascript的this用法](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n\n---\n现在我们解决了构造多个对象时的重复代码问题,但是其实还有另外一个问题:  \n**每一个方法都需要在每个实例上重新创建一遍**,而原型模式可以解决这个问题.\n## 4. 原型模式\n### 4.1 原型\n* 每个函数都有prototype(原型)属性,这个属性指向一个原型对象,而这个对象为所有实例共享(包括对象里面的属性以及方法).\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-28/39105696.jpg)\n* 值得注意的是,在实例中的变量会屏蔽掉原型模式中的同名变量.\n### 4.2 使用\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tPerson.prototype.sayName = function() {\n    \tconsole.log(this.name)\n\t};\n\n或者我们也可以通过对象字面量的方式来实现:\n\n\tPerson.prototype = {\n\t    constructor: Person,\n\t    a: \"a\"\n\t}\n### 4.3 问题\n随着共享随之而来的问题是:对共享变量的修改可能会影响到你的预期输出结果,所以使用时还请慎重.\n## 5. 混合使用原型模式和构造函数模式\n\tfunction Person(name) {\n\t    this.name = name;\n\t    this.sayHi = function() {\n\t        console.log(\"hi\");\n\t    }\n\t}\n\tPerson.prototype = {\n\t    constructor: Person,\n\t    a: \"a\"\n\t}\n\n---\n---\n## 继承\n\tfunction SuperType() {\n\t    this.property = true;\n\t}\n\t\n\tSuperType.prototype.getSuperValue = function() {\n\t    return this.property;\n\t}\n\t\n\tfunction SubType() {\n\t    this.subproperty = false;\n\t}\n\t\n\tSubType.prototype  = new SuperType();\n\t\n\tSubType.prototype.getSubValue = function() {\n\t    return this.subproperty;\n\t}\n\t\n\tvar instance = new SubType();\n\talert(instance.getSuperValue());\n\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-30/19766157.jpg)\n\n","slug":"JavaScript中的面向对象程序设计","published":1,"updated":"2017-11-14T14:14:00.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4ze000elq0hry76g6xy","content":"<h1 id=\"JavaScript中的面向对象程序设计\"><a href=\"#JavaScript中的面向对象程序设计\" class=\"headerlink\" title=\"JavaScript中的面向对象程序设计\"></a>JavaScript中的面向对象程序设计</h1><h2 id=\"1-最简单的模式\"><a href=\"#1-最简单的模式\" class=\"headerlink\" title=\"1.最简单的模式\"></a>1.最简单的模式</h2><h3 id=\"1-1-新建实例添加属性和方法\"><a href=\"#1-1-新建实例添加属性和方法\" class=\"headerlink\" title=\"1.1 新建实例添加属性和方法\"></a>1.1 新建实例添加属性和方法</h3><pre><code>var person = new Object();\nperson.name = &quot;name&quot;;\nperson.sayHi = function() {\n    console.log(&quot;hi&quot;);\n}\n\nconsole.log(person.name);\nperson.sayHi();\n</code></pre><a id=\"more\"></a>\n<h3 id=\"1-2-对象字面量\"><a href=\"#1-2-对象字面量\" class=\"headerlink\" title=\"1.2 对象字面量\"></a>1.2 对象字面量</h3><ul>\n<li><p>与上面的方法其实是相同的,仅仅是书写上简化了一些而已.</p>\n<pre><code>var person = {\n    name : &quot;name&quot;,\n    sayHi : function() {\n        console.log(&quot;hi&quot;);\n    }\n}\n</code></pre></li>\n</ul>\n<hr>\n<p>如果你要构造多个对象的话,那么以上的模式的问题就显而易见了:产生大量的重复代码,而函数就是解决重复代码的利器.</p>\n<h2 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2.工厂模式\"></a>2.工厂模式</h2><pre><code>function createPerson() {\n    var o = {\n        name : &quot;name&quot;,\n        sayHi : function() {\n            console.log(&quot;hi&quot;);\n        }\n    }\n    return o;\n}\n</code></pre><h2 id=\"3-构造函数模式\"><a href=\"#3-构造函数模式\" class=\"headerlink\" title=\"3. 构造函数模式\"></a>3. 构造函数模式</h2><pre><code>function Person(name) {\n    this.name = name;\n    this.sayHi = function() {\n        console.log(&quot;hi&quot;);\n    }\n}\nperson = new Person(&quot;name&quot;);\n</code></pre><p><strong>使用构造函数模式新建对象时,经历了以下的四个步骤:</strong>  </p>\n<ol>\n<li>创建一个新对象  </li>\n<li>将构造函数的作用域赋给新对象(this关键字指向创建的新对象)  </li>\n<li>执行构造函数中的代码  </li>\n<li>返回新对象  </li>\n</ol>\n<hr>\n<ul>\n<li>关于this 的具体含义,可以参考<a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">阮一峰的网络日志-Javascript的this用法</a></li>\n</ul>\n<hr>\n<p>现在我们解决了构造多个对象时的重复代码问题,但是其实还有另外一个问题:<br><strong>每一个方法都需要在每个实例上重新创建一遍</strong>,而原型模式可以解决这个问题.</p>\n<h2 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h2><h3 id=\"4-1-原型\"><a href=\"#4-1-原型\" class=\"headerlink\" title=\"4.1 原型\"></a>4.1 原型</h3><ul>\n<li>每个函数都有prototype(原型)属性,这个属性指向一个原型对象,而这个对象为所有实例共享(包括对象里面的属性以及方法).</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-28/39105696.jpg\" alt=\"\"></li>\n<li>值得注意的是,在实例中的变量会屏蔽掉原型模式中的同名变量.<h3 id=\"4-2-使用\"><a href=\"#4-2-使用\" class=\"headerlink\" title=\"4.2 使用\"></a>4.2 使用</h3>  function Person(name) {<pre><code>this.name = name;\nthis.sayHi = function() {\n    console.log(&quot;hi&quot;);\n}\n</code></pre>  }<br>  Person.prototype.sayName = function() {<pre><code>console.log(this.name)\n</code></pre>  };</li>\n</ul>\n<p>或者我们也可以通过对象字面量的方式来实现:</p>\n<pre><code>Person.prototype = {\n    constructor: Person,\n    a: &quot;a&quot;\n}\n</code></pre><h3 id=\"4-3-问题\"><a href=\"#4-3-问题\" class=\"headerlink\" title=\"4.3 问题\"></a>4.3 问题</h3><p>随着共享随之而来的问题是:对共享变量的修改可能会影响到你的预期输出结果,所以使用时还请慎重.</p>\n<h2 id=\"5-混合使用原型模式和构造函数模式\"><a href=\"#5-混合使用原型模式和构造函数模式\" class=\"headerlink\" title=\"5. 混合使用原型模式和构造函数模式\"></a>5. 混合使用原型模式和构造函数模式</h2><pre><code>function Person(name) {\n    this.name = name;\n    this.sayHi = function() {\n        console.log(&quot;hi&quot;);\n    }\n}\nPerson.prototype = {\n    constructor: Person,\n    a: &quot;a&quot;\n}\n</code></pre><hr>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><pre><code>function SuperType() {\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n    return this.property;\n}\n\nfunction SubType() {\n    this.subproperty = false;\n}\n\nSubType.prototype  = new SuperType();\n\nSubType.prototype.getSubValue = function() {\n    return this.subproperty;\n}\n\nvar instance = new SubType();\nalert(instance.getSuperValue());\n</code></pre><p><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-30/19766157.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript中的面向对象程序设计\"><a href=\"#JavaScript中的面向对象程序设计\" class=\"headerlink\" title=\"JavaScript中的面向对象程序设计\"></a>JavaScript中的面向对象程序设计</h1><h2 id=\"1-最简单的模式\"><a href=\"#1-最简单的模式\" class=\"headerlink\" title=\"1.最简单的模式\"></a>1.最简单的模式</h2><h3 id=\"1-1-新建实例添加属性和方法\"><a href=\"#1-1-新建实例添加属性和方法\" class=\"headerlink\" title=\"1.1 新建实例添加属性和方法\"></a>1.1 新建实例添加属性和方法</h3><pre><code>var person = new Object();\nperson.name = &quot;name&quot;;\nperson.sayHi = function() {\n    console.log(&quot;hi&quot;);\n}\n\nconsole.log(person.name);\nperson.sayHi();\n</code></pre>","more":"<h3 id=\"1-2-对象字面量\"><a href=\"#1-2-对象字面量\" class=\"headerlink\" title=\"1.2 对象字面量\"></a>1.2 对象字面量</h3><ul>\n<li><p>与上面的方法其实是相同的,仅仅是书写上简化了一些而已.</p>\n<pre><code>var person = {\n    name : &quot;name&quot;,\n    sayHi : function() {\n        console.log(&quot;hi&quot;);\n    }\n}\n</code></pre></li>\n</ul>\n<hr>\n<p>如果你要构造多个对象的话,那么以上的模式的问题就显而易见了:产生大量的重复代码,而函数就是解决重复代码的利器.</p>\n<h2 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2.工厂模式\"></a>2.工厂模式</h2><pre><code>function createPerson() {\n    var o = {\n        name : &quot;name&quot;,\n        sayHi : function() {\n            console.log(&quot;hi&quot;);\n        }\n    }\n    return o;\n}\n</code></pre><h2 id=\"3-构造函数模式\"><a href=\"#3-构造函数模式\" class=\"headerlink\" title=\"3. 构造函数模式\"></a>3. 构造函数模式</h2><pre><code>function Person(name) {\n    this.name = name;\n    this.sayHi = function() {\n        console.log(&quot;hi&quot;);\n    }\n}\nperson = new Person(&quot;name&quot;);\n</code></pre><p><strong>使用构造函数模式新建对象时,经历了以下的四个步骤:</strong>  </p>\n<ol>\n<li>创建一个新对象  </li>\n<li>将构造函数的作用域赋给新对象(this关键字指向创建的新对象)  </li>\n<li>执行构造函数中的代码  </li>\n<li>返回新对象  </li>\n</ol>\n<hr>\n<ul>\n<li>关于this 的具体含义,可以参考<a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"noopener\">阮一峰的网络日志-Javascript的this用法</a></li>\n</ul>\n<hr>\n<p>现在我们解决了构造多个对象时的重复代码问题,但是其实还有另外一个问题:<br><strong>每一个方法都需要在每个实例上重新创建一遍</strong>,而原型模式可以解决这个问题.</p>\n<h2 id=\"4-原型模式\"><a href=\"#4-原型模式\" class=\"headerlink\" title=\"4. 原型模式\"></a>4. 原型模式</h2><h3 id=\"4-1-原型\"><a href=\"#4-1-原型\" class=\"headerlink\" title=\"4.1 原型\"></a>4.1 原型</h3><ul>\n<li>每个函数都有prototype(原型)属性,这个属性指向一个原型对象,而这个对象为所有实例共享(包括对象里面的属性以及方法).</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-28/39105696.jpg\" alt=\"\"></li>\n<li>值得注意的是,在实例中的变量会屏蔽掉原型模式中的同名变量.<h3 id=\"4-2-使用\"><a href=\"#4-2-使用\" class=\"headerlink\" title=\"4.2 使用\"></a>4.2 使用</h3>  function Person(name) {<pre><code>this.name = name;\nthis.sayHi = function() {\n    console.log(&quot;hi&quot;);\n}\n</code></pre>  }<br>  Person.prototype.sayName = function() {<pre><code>console.log(this.name)\n</code></pre>  };</li>\n</ul>\n<p>或者我们也可以通过对象字面量的方式来实现:</p>\n<pre><code>Person.prototype = {\n    constructor: Person,\n    a: &quot;a&quot;\n}\n</code></pre><h3 id=\"4-3-问题\"><a href=\"#4-3-问题\" class=\"headerlink\" title=\"4.3 问题\"></a>4.3 问题</h3><p>随着共享随之而来的问题是:对共享变量的修改可能会影响到你的预期输出结果,所以使用时还请慎重.</p>\n<h2 id=\"5-混合使用原型模式和构造函数模式\"><a href=\"#5-混合使用原型模式和构造函数模式\" class=\"headerlink\" title=\"5. 混合使用原型模式和构造函数模式\"></a>5. 混合使用原型模式和构造函数模式</h2><pre><code>function Person(name) {\n    this.name = name;\n    this.sayHi = function() {\n        console.log(&quot;hi&quot;);\n    }\n}\nPerson.prototype = {\n    constructor: Person,\n    a: &quot;a&quot;\n}\n</code></pre><hr>\n<hr>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><pre><code>function SuperType() {\n    this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n    return this.property;\n}\n\nfunction SubType() {\n    this.subproperty = false;\n}\n\nSubType.prototype  = new SuperType();\n\nSubType.prototype.getSubValue = function() {\n    return this.subproperty;\n}\n\nvar instance = new SubType();\nalert(instance.getSuperValue());\n</code></pre><p><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-30/19766157.jpg\" alt=\"\"></p>"},{"title":"Java中的synchronized和volatile","date":"2016-10-26T06:08:22.000Z","_content":"## volatile关键字\n* 程序在运行时,为了提高性能可能会将主存中的变量拷贝到CPU缓存当中,\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/52900619.jpg)\n<!--more-->\n* 如果是非volatile变量,那么就可能会出现这样的问题:\t\n\t* 线程1读取变量并且进行修改,在还没有将其写会主存的时候,线程2读取同一个变量此时就出现了问题.因为非volatile变量无法保证什么时候从主存中读取数据,也无法保证什么时候写回主存.\n\t* 图示 ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/49586736.jpg)\n* volatile变量则可以确保了变量的修改会及时写回主存、变量直接从主存中读取\n\n## synchronized关键字\n\n>引用 [http://tutorials.jenkov.com/java-concurrency/volatile.html](http://tutorials.jenkov.com/java-concurrency/volatile.html)\n","source":"_posts/Java中的synchronized和volatile_todo.md","raw":"---\ntitle: Java中的synchronized和volatile\ndate: 2016-10-26 14:08:22\ntags:\n- java\n\n---\n## volatile关键字\n* 程序在运行时,为了提高性能可能会将主存中的变量拷贝到CPU缓存当中,\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/52900619.jpg)\n<!--more-->\n* 如果是非volatile变量,那么就可能会出现这样的问题:\t\n\t* 线程1读取变量并且进行修改,在还没有将其写会主存的时候,线程2读取同一个变量此时就出现了问题.因为非volatile变量无法保证什么时候从主存中读取数据,也无法保证什么时候写回主存.\n\t* 图示 ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/49586736.jpg)\n* volatile变量则可以确保了变量的修改会及时写回主存、变量直接从主存中读取\n\n## synchronized关键字\n\n>引用 [http://tutorials.jenkov.com/java-concurrency/volatile.html](http://tutorials.jenkov.com/java-concurrency/volatile.html)\n","slug":"Java中的synchronized和volatile_todo","published":1,"updated":"2016-10-26T08:24:43.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zg000glq0hsvm3byys","content":"<h2 id=\"volatile关键字\"><a href=\"#volatile关键字\" class=\"headerlink\" title=\"volatile关键字\"></a>volatile关键字</h2><ul>\n<li>程序在运行时,为了提高性能可能会将主存中的变量拷贝到CPU缓存当中,<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/52900619.jpg\" alt=\"\"><a id=\"more\"></a></li>\n</ul>\n</li>\n<li>如果是非volatile变量,那么就可能会出现这样的问题:    <ul>\n<li>线程1读取变量并且进行修改,在还没有将其写会主存的时候,线程2读取同一个变量此时就出现了问题.因为非volatile变量无法保证什么时候从主存中读取数据,也无法保证什么时候写回主存.</li>\n<li>图示 <img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/49586736.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>volatile变量则可以确保了变量的修改会及时写回主存、变量直接从主存中读取</li>\n</ul>\n<h2 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h2><blockquote>\n<p>引用 <a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">http://tutorials.jenkov.com/java-concurrency/volatile.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"volatile关键字\"><a href=\"#volatile关键字\" class=\"headerlink\" title=\"volatile关键字\"></a>volatile关键字</h2><ul>\n<li>程序在运行时,为了提高性能可能会将主存中的变量拷贝到CPU缓存当中,<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/52900619.jpg\" alt=\"\">","more":"</li>\n</ul>\n</li>\n<li>如果是非volatile变量,那么就可能会出现这样的问题:    <ul>\n<li>线程1读取变量并且进行修改,在还没有将其写会主存的时候,线程2读取同一个变量此时就出现了问题.因为非volatile变量无法保证什么时候从主存中读取数据,也无法保证什么时候写回主存.</li>\n<li>图示 <img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-26/49586736.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>volatile变量则可以确保了变量的修改会及时写回主存、变量直接从主存中读取</li>\n</ul>\n<h2 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h2><blockquote>\n<p>引用 <a href=\"http://tutorials.jenkov.com/java-concurrency/volatile.html\" target=\"_blank\" rel=\"noopener\">http://tutorials.jenkov.com/java-concurrency/volatile.html</a></p>\n</blockquote>"},{"title":"Java中的单例模式","date":"2016-10-26T05:35:40.000Z","_content":"# Java中的单例模式\n* 多线程中可能会导致对象的多次初始化.\n## 懒汉式的实现\n* 之所以成为懒汉,个人认为应该是类的初始化只在需要的时候进行,所以很\"懒\".\n<!--more-->\n#### 线程不安全\n\n\n\t/*懒汉 非线程安全*/\n\tpublic class SingleTon_01 {\n\t    private static SingleTon_01 singleTon_01 = null;\n\t    private SingleTon_01() {\n\t\n\t    }\n\t    public static SingleTon_01 getSingleTon_01() {\n\t        if (singleTon_01 == null) {\n\t            singleTon_01 = new SingleTon_01();\n\t        }\n\t        return singleTon_01;\n\t    }\n\t    public void print() {\n\t        System.out.println(\"singleton_01\");\n\t    }\n\t}\n#### 线程安全\n\n\n\t/*懒汉 线程安全*/\n\tpublic class SingleTon_02 {\n\t    private static SingleTon_02 singleTon_02 = null;\n\t    private SingleTon_02() {}\n\t    private static synchronized SingleTon_02 getSingleTon_02() {\n\t        if (singleTon_02 == null) {\n\t            singleTon_02 = new SingleTon_02();\n\t        }\n\t        return singleTon_02;\n\t    }\n\t}\n## 饿汉实现\n* 在类加载时就进行初始化,可能会产生垃圾对象,但是不会有多线程的问题出现.\n\n\n\t\t/*饿汉式*/ \n\t\tpublic class SingleTon_03 {\n\t\t    private static SingleTon_03 singleTon_03 = new SingleTon_03();\n\t\t    private SingleTon_03() {\n\t\t        \n\t\t    }\n\t\t    public static SingleTon_03 getSingleTon_03() {\n\t\t        return singleTon_03;\n\t\t    }\n\t\t}\n\n## 双重校验锁模式\n* 要注意变量需要添加volatile关键字.\n\t* 假设有两个进程分别调用了getInstance方法,进程A首先将变量复制到CPU0缓存当中,进行初始化操作,如果没有volatile关键字,那么进程B在调用此方法时复制到CPU1缓存中的可能是未被更新的null,此时问题就出现了.\n\n\n\t\t\t/*双重校验锁模式*/\n\t\t\tpublic class SingleTon_04 {\n\t\t\t    private static volatile SingleTon_04 singleTon_04 = null;\n\t\t\t    private SingleTon_04() {\n\t\t\t\n\t\t\t    }\n\t\t\t    public static SingleTon_04 getSingleTon_04() {\n\t\t\t        if (singleTon_04 == null) {\n\t\t\t            synchronized (SingleTon_04.class) {\n\t\t\t                singleTon_04 = new SingleTon_04();\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return singleTon_04;\n\t\t\t    }\n\t\t\t}\n## 静态内部类实现\n* 通过classloader机制确保初始化时只有一个线程\n\n\n\t\t/*静态内部类*/\n\t\tpublic class SingleTon_05 {\n\t\t    private static class InstanceHolder{\n\t\t        private static SingleTon_05 singleTon_05 = new SingleTon_05();\n\t\t    }\n\t\t    private SingleTon_05() {\n\t\t        \n\t\t    }\n\t\t    public SingleTon_05 getSingleTon_05() {\n\t\t        return InstanceHolder.singleTon_05;\n\t\t    }\n\t\t}\n## enum实现\n\n\n\tpublic enum SingleTon_06 {\n\t    INSTANCE;\n\t    public void print() {\n\t        System.out.println(\"singleTon_06\");\n\t    }\n\t}","source":"_posts/Java中的单例模式.md","raw":"---\ntitle: Java中的单例模式\ndate: 2016-10-26 13:35:40\ntags:\n- java\n- 设计模式\n\n---\n# Java中的单例模式\n* 多线程中可能会导致对象的多次初始化.\n## 懒汉式的实现\n* 之所以成为懒汉,个人认为应该是类的初始化只在需要的时候进行,所以很\"懒\".\n<!--more-->\n#### 线程不安全\n\n\n\t/*懒汉 非线程安全*/\n\tpublic class SingleTon_01 {\n\t    private static SingleTon_01 singleTon_01 = null;\n\t    private SingleTon_01() {\n\t\n\t    }\n\t    public static SingleTon_01 getSingleTon_01() {\n\t        if (singleTon_01 == null) {\n\t            singleTon_01 = new SingleTon_01();\n\t        }\n\t        return singleTon_01;\n\t    }\n\t    public void print() {\n\t        System.out.println(\"singleton_01\");\n\t    }\n\t}\n#### 线程安全\n\n\n\t/*懒汉 线程安全*/\n\tpublic class SingleTon_02 {\n\t    private static SingleTon_02 singleTon_02 = null;\n\t    private SingleTon_02() {}\n\t    private static synchronized SingleTon_02 getSingleTon_02() {\n\t        if (singleTon_02 == null) {\n\t            singleTon_02 = new SingleTon_02();\n\t        }\n\t        return singleTon_02;\n\t    }\n\t}\n## 饿汉实现\n* 在类加载时就进行初始化,可能会产生垃圾对象,但是不会有多线程的问题出现.\n\n\n\t\t/*饿汉式*/ \n\t\tpublic class SingleTon_03 {\n\t\t    private static SingleTon_03 singleTon_03 = new SingleTon_03();\n\t\t    private SingleTon_03() {\n\t\t        \n\t\t    }\n\t\t    public static SingleTon_03 getSingleTon_03() {\n\t\t        return singleTon_03;\n\t\t    }\n\t\t}\n\n## 双重校验锁模式\n* 要注意变量需要添加volatile关键字.\n\t* 假设有两个进程分别调用了getInstance方法,进程A首先将变量复制到CPU0缓存当中,进行初始化操作,如果没有volatile关键字,那么进程B在调用此方法时复制到CPU1缓存中的可能是未被更新的null,此时问题就出现了.\n\n\n\t\t\t/*双重校验锁模式*/\n\t\t\tpublic class SingleTon_04 {\n\t\t\t    private static volatile SingleTon_04 singleTon_04 = null;\n\t\t\t    private SingleTon_04() {\n\t\t\t\n\t\t\t    }\n\t\t\t    public static SingleTon_04 getSingleTon_04() {\n\t\t\t        if (singleTon_04 == null) {\n\t\t\t            synchronized (SingleTon_04.class) {\n\t\t\t                singleTon_04 = new SingleTon_04();\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return singleTon_04;\n\t\t\t    }\n\t\t\t}\n## 静态内部类实现\n* 通过classloader机制确保初始化时只有一个线程\n\n\n\t\t/*静态内部类*/\n\t\tpublic class SingleTon_05 {\n\t\t    private static class InstanceHolder{\n\t\t        private static SingleTon_05 singleTon_05 = new SingleTon_05();\n\t\t    }\n\t\t    private SingleTon_05() {\n\t\t        \n\t\t    }\n\t\t    public SingleTon_05 getSingleTon_05() {\n\t\t        return InstanceHolder.singleTon_05;\n\t\t    }\n\t\t}\n## enum实现\n\n\n\tpublic enum SingleTon_06 {\n\t    INSTANCE;\n\t    public void print() {\n\t        System.out.println(\"singleTon_06\");\n\t    }\n\t}","slug":"Java中的单例模式","published":1,"updated":"2017-08-27T13:10:09.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zh000ilq0huz2ngyvr","content":"<h1 id=\"Java中的单例模式\"><a href=\"#Java中的单例模式\" class=\"headerlink\" title=\"Java中的单例模式\"></a>Java中的单例模式</h1><ul>\n<li>多线程中可能会导致对象的多次初始化.<h2 id=\"懒汉式的实现\"><a href=\"#懒汉式的实现\" class=\"headerlink\" title=\"懒汉式的实现\"></a>懒汉式的实现</h2></li>\n<li>之所以成为懒汉,个人认为应该是类的初始化只在需要的时候进行,所以很”懒”.<a id=\"more\"></a>\n<h4 id=\"线程不安全\"><a href=\"#线程不安全\" class=\"headerlink\" title=\"线程不安全\"></a>线程不安全</h4></li>\n</ul>\n<pre><code>/*懒汉 非线程安全*/\npublic class SingleTon_01 {\n    private static SingleTon_01 singleTon_01 = null;\n    private SingleTon_01() {\n\n    }\n    public static SingleTon_01 getSingleTon_01() {\n        if (singleTon_01 == null) {\n            singleTon_01 = new SingleTon_01();\n        }\n        return singleTon_01;\n    }\n    public void print() {\n        System.out.println(&quot;singleton_01&quot;);\n    }\n}\n</code></pre><h4 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h4><pre><code>/*懒汉 线程安全*/\npublic class SingleTon_02 {\n    private static SingleTon_02 singleTon_02 = null;\n    private SingleTon_02() {}\n    private static synchronized SingleTon_02 getSingleTon_02() {\n        if (singleTon_02 == null) {\n            singleTon_02 = new SingleTon_02();\n        }\n        return singleTon_02;\n    }\n}\n</code></pre><h2 id=\"饿汉实现\"><a href=\"#饿汉实现\" class=\"headerlink\" title=\"饿汉实现\"></a>饿汉实现</h2><ul>\n<li>在类加载时就进行初始化,可能会产生垃圾对象,但是不会有多线程的问题出现.</li>\n</ul>\n<pre><code>/*饿汉式*/ \npublic class SingleTon_03 {\n    private static SingleTon_03 singleTon_03 = new SingleTon_03();\n    private SingleTon_03() {\n\n    }\n    public static SingleTon_03 getSingleTon_03() {\n        return singleTon_03;\n    }\n}\n</code></pre><h2 id=\"双重校验锁模式\"><a href=\"#双重校验锁模式\" class=\"headerlink\" title=\"双重校验锁模式\"></a>双重校验锁模式</h2><ul>\n<li>要注意变量需要添加volatile关键字.<ul>\n<li>假设有两个进程分别调用了getInstance方法,进程A首先将变量复制到CPU0缓存当中,进行初始化操作,如果没有volatile关键字,那么进程B在调用此方法时复制到CPU1缓存中的可能是未被更新的null,此时问题就出现了.</li>\n</ul>\n</li>\n</ul>\n<pre><code>/*双重校验锁模式*/\npublic class SingleTon_04 {\n    private static volatile SingleTon_04 singleTon_04 = null;\n    private SingleTon_04() {\n\n    }\n    public static SingleTon_04 getSingleTon_04() {\n        if (singleTon_04 == null) {\n            synchronized (SingleTon_04.class) {\n                singleTon_04 = new SingleTon_04();\n            }\n        }\n        return singleTon_04;\n    }\n}\n</code></pre><h2 id=\"静态内部类实现\"><a href=\"#静态内部类实现\" class=\"headerlink\" title=\"静态内部类实现\"></a>静态内部类实现</h2><ul>\n<li>通过classloader机制确保初始化时只有一个线程</li>\n</ul>\n<pre><code>/*静态内部类*/\npublic class SingleTon_05 {\n    private static class InstanceHolder{\n        private static SingleTon_05 singleTon_05 = new SingleTon_05();\n    }\n    private SingleTon_05() {\n\n    }\n    public SingleTon_05 getSingleTon_05() {\n        return InstanceHolder.singleTon_05;\n    }\n}\n</code></pre><h2 id=\"enum实现\"><a href=\"#enum实现\" class=\"headerlink\" title=\"enum实现\"></a>enum实现</h2><pre><code>public enum SingleTon_06 {\n    INSTANCE;\n    public void print() {\n        System.out.println(&quot;singleTon_06&quot;);\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"Java中的单例模式\"><a href=\"#Java中的单例模式\" class=\"headerlink\" title=\"Java中的单例模式\"></a>Java中的单例模式</h1><ul>\n<li>多线程中可能会导致对象的多次初始化.<h2 id=\"懒汉式的实现\"><a href=\"#懒汉式的实现\" class=\"headerlink\" title=\"懒汉式的实现\"></a>懒汉式的实现</h2></li>\n<li>之所以成为懒汉,个人认为应该是类的初始化只在需要的时候进行,所以很”懒”.","more":"<h4 id=\"线程不安全\"><a href=\"#线程不安全\" class=\"headerlink\" title=\"线程不安全\"></a>线程不安全</h4></li>\n</ul>\n<pre><code>/*懒汉 非线程安全*/\npublic class SingleTon_01 {\n    private static SingleTon_01 singleTon_01 = null;\n    private SingleTon_01() {\n\n    }\n    public static SingleTon_01 getSingleTon_01() {\n        if (singleTon_01 == null) {\n            singleTon_01 = new SingleTon_01();\n        }\n        return singleTon_01;\n    }\n    public void print() {\n        System.out.println(&quot;singleton_01&quot;);\n    }\n}\n</code></pre><h4 id=\"线程安全\"><a href=\"#线程安全\" class=\"headerlink\" title=\"线程安全\"></a>线程安全</h4><pre><code>/*懒汉 线程安全*/\npublic class SingleTon_02 {\n    private static SingleTon_02 singleTon_02 = null;\n    private SingleTon_02() {}\n    private static synchronized SingleTon_02 getSingleTon_02() {\n        if (singleTon_02 == null) {\n            singleTon_02 = new SingleTon_02();\n        }\n        return singleTon_02;\n    }\n}\n</code></pre><h2 id=\"饿汉实现\"><a href=\"#饿汉实现\" class=\"headerlink\" title=\"饿汉实现\"></a>饿汉实现</h2><ul>\n<li>在类加载时就进行初始化,可能会产生垃圾对象,但是不会有多线程的问题出现.</li>\n</ul>\n<pre><code>/*饿汉式*/ \npublic class SingleTon_03 {\n    private static SingleTon_03 singleTon_03 = new SingleTon_03();\n    private SingleTon_03() {\n\n    }\n    public static SingleTon_03 getSingleTon_03() {\n        return singleTon_03;\n    }\n}\n</code></pre><h2 id=\"双重校验锁模式\"><a href=\"#双重校验锁模式\" class=\"headerlink\" title=\"双重校验锁模式\"></a>双重校验锁模式</h2><ul>\n<li>要注意变量需要添加volatile关键字.<ul>\n<li>假设有两个进程分别调用了getInstance方法,进程A首先将变量复制到CPU0缓存当中,进行初始化操作,如果没有volatile关键字,那么进程B在调用此方法时复制到CPU1缓存中的可能是未被更新的null,此时问题就出现了.</li>\n</ul>\n</li>\n</ul>\n<pre><code>/*双重校验锁模式*/\npublic class SingleTon_04 {\n    private static volatile SingleTon_04 singleTon_04 = null;\n    private SingleTon_04() {\n\n    }\n    public static SingleTon_04 getSingleTon_04() {\n        if (singleTon_04 == null) {\n            synchronized (SingleTon_04.class) {\n                singleTon_04 = new SingleTon_04();\n            }\n        }\n        return singleTon_04;\n    }\n}\n</code></pre><h2 id=\"静态内部类实现\"><a href=\"#静态内部类实现\" class=\"headerlink\" title=\"静态内部类实现\"></a>静态内部类实现</h2><ul>\n<li>通过classloader机制确保初始化时只有一个线程</li>\n</ul>\n<pre><code>/*静态内部类*/\npublic class SingleTon_05 {\n    private static class InstanceHolder{\n        private static SingleTon_05 singleTon_05 = new SingleTon_05();\n    }\n    private SingleTon_05() {\n\n    }\n    public SingleTon_05 getSingleTon_05() {\n        return InstanceHolder.singleTon_05;\n    }\n}\n</code></pre><h2 id=\"enum实现\"><a href=\"#enum实现\" class=\"headerlink\" title=\"enum实现\"></a>enum实现</h2><pre><code>public enum SingleTon_06 {\n    INSTANCE;\n    public void print() {\n        System.out.println(&quot;singleTon_06&quot;);\n    }\n}\n</code></pre>"},{"title":"Java核心技术卷读书笔记","date":"2017-10-11T12:19:04.000Z","_content":"\n# Java核心技术卷(一)读书笔记\n## 数据类型\n### 整型\n* int  4字节\n* long  8字节\n* short 2字节\n* byte  1字节\n> **需要注意的是字节长度与平台无关,与c语言不同**\n\n### 浮点型\n* float 4字节,一般不够用\n* double  8字节\n> 遵循IEEE754标准\n<!--more-->\n### char类型\n* 16位,字符常量,用单引号括起来\n* 16位,65536个不同的值\n* 一个char代表一个代码单元,但是并不一定代表一个代码点.\n* 一个代码点可以认为是一个字符,例如'a','中',但是其中可能前者只包含一个代码单元,而后者包含两个代码单元\n\n### boolean 类型\n### 字符串\n* String类型\n* 与C,C++不同的是,字符串并非是字符数组,也不提供修改字符串的方法,其目的在于编译器可以让字符串共享,因为各种字符串存在一个公共的存储池当中.\n* 使用equals方法来判定是否相等\n* length方法:返回的是字符长度,也就是代码单元数量\n* getBytes().length() 可以返回字节长度,需要指定编码方式.\n* 通过StringBuilder来构建字符串\n\n\n## 面向对象\n* 依赖 use a\n* 聚合 has a\n* 继承 is a\n\n> 一个对象变量并不拥有一个对象,而仅仅是**引用**一个对象\n\n* final变量:构建对象时必须初始化final变量,但是并不意味着此变量不能被改变,而仅仅意味着变量的引用不能够改变,但是如果引用的对象是不可变对象时(例如String),则可以认为此变量是不能够被改变的\n* static变量:静态变量,类级别共享的变量\n\n> 方法参数,注意到java总是按照值传递的方式调用函数(call by value)\n\n* 静态初始化块,在类第一次加载的时候将会进行静态域的初始化\n### 继承\n* final类和方法可以阻止继承,以免子类改变语义\n* 只能在继承层次进行类型转换,同时在进行(继承链)向下的转换时,先用instanceof进行类型判断\n### 方法调用\n* 动态绑定\n\t* 查看对象的声明类型和方法名称\n\t* 查看调用方法时提供的参数类型\n\t* 非静态绑定时采用动态绑定的方式调用方法,调用的方法依赖于隐式参数(this)的实际类型.\n\t* 调用与对象的实际类型最适合的类方法.\n\n> 为了减少每次搜索的开销,编译器维护一个方法表,其中列出了所有方法的签名和实际调用的方法\n* 静态绑定\n\t* private方法\n\t* static方法\n\t* final方法\n\n## equals方法的几个特性\n* 自反性\n\n> a.equals(a) 为true\n\n* 对称性\n* 传递性\n* 一致性:反复调用应该返回一样的结果\n* x.equals(null) 返回false\n\n## hashcode方法\n* 一个hash方法,由对象导出的一个整型,每个对象都有一个默认的hashcode,其值为对象的存储地址\n* **equals和hashCode的定义必须一致:调用的返回结果必须相同**\n\n## 反射\n* Class类:表示一个特定类的属性,具体而言,Class是一个类,而某个具体类的class(例如int.Class)则是对象,其类是Class.\n* newInstance()方法初始化对象\n* getFields():返回public 域数组\n* getMethods()\n* getConstructors()\n\n### todo\n* 动态绑定\n  * todo\n* instanceof\n* equals\n* hashCode\n* 枚举类\n* 反射\n* 克隆\n* 内部类","source":"_posts/Java核心技术卷读书笔记.md","raw":"---\ntitle: Java核心技术卷读书笔记\ndate: 2017-10-11 20:19:04\ntags: \n- java\n- 读书笔记\n---\n\n# Java核心技术卷(一)读书笔记\n## 数据类型\n### 整型\n* int  4字节\n* long  8字节\n* short 2字节\n* byte  1字节\n> **需要注意的是字节长度与平台无关,与c语言不同**\n\n### 浮点型\n* float 4字节,一般不够用\n* double  8字节\n> 遵循IEEE754标准\n<!--more-->\n### char类型\n* 16位,字符常量,用单引号括起来\n* 16位,65536个不同的值\n* 一个char代表一个代码单元,但是并不一定代表一个代码点.\n* 一个代码点可以认为是一个字符,例如'a','中',但是其中可能前者只包含一个代码单元,而后者包含两个代码单元\n\n### boolean 类型\n### 字符串\n* String类型\n* 与C,C++不同的是,字符串并非是字符数组,也不提供修改字符串的方法,其目的在于编译器可以让字符串共享,因为各种字符串存在一个公共的存储池当中.\n* 使用equals方法来判定是否相等\n* length方法:返回的是字符长度,也就是代码单元数量\n* getBytes().length() 可以返回字节长度,需要指定编码方式.\n* 通过StringBuilder来构建字符串\n\n\n## 面向对象\n* 依赖 use a\n* 聚合 has a\n* 继承 is a\n\n> 一个对象变量并不拥有一个对象,而仅仅是**引用**一个对象\n\n* final变量:构建对象时必须初始化final变量,但是并不意味着此变量不能被改变,而仅仅意味着变量的引用不能够改变,但是如果引用的对象是不可变对象时(例如String),则可以认为此变量是不能够被改变的\n* static变量:静态变量,类级别共享的变量\n\n> 方法参数,注意到java总是按照值传递的方式调用函数(call by value)\n\n* 静态初始化块,在类第一次加载的时候将会进行静态域的初始化\n### 继承\n* final类和方法可以阻止继承,以免子类改变语义\n* 只能在继承层次进行类型转换,同时在进行(继承链)向下的转换时,先用instanceof进行类型判断\n### 方法调用\n* 动态绑定\n\t* 查看对象的声明类型和方法名称\n\t* 查看调用方法时提供的参数类型\n\t* 非静态绑定时采用动态绑定的方式调用方法,调用的方法依赖于隐式参数(this)的实际类型.\n\t* 调用与对象的实际类型最适合的类方法.\n\n> 为了减少每次搜索的开销,编译器维护一个方法表,其中列出了所有方法的签名和实际调用的方法\n* 静态绑定\n\t* private方法\n\t* static方法\n\t* final方法\n\n## equals方法的几个特性\n* 自反性\n\n> a.equals(a) 为true\n\n* 对称性\n* 传递性\n* 一致性:反复调用应该返回一样的结果\n* x.equals(null) 返回false\n\n## hashcode方法\n* 一个hash方法,由对象导出的一个整型,每个对象都有一个默认的hashcode,其值为对象的存储地址\n* **equals和hashCode的定义必须一致:调用的返回结果必须相同**\n\n## 反射\n* Class类:表示一个特定类的属性,具体而言,Class是一个类,而某个具体类的class(例如int.Class)则是对象,其类是Class.\n* newInstance()方法初始化对象\n* getFields():返回public 域数组\n* getMethods()\n* getConstructors()\n\n### todo\n* 动态绑定\n  * todo\n* instanceof\n* equals\n* hashCode\n* 枚举类\n* 反射\n* 克隆\n* 内部类","slug":"Java核心技术卷读书笔记","published":1,"updated":"2017-12-05T13:00:00.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zi000llq0hwarla5no","content":"<h1 id=\"Java核心技术卷-一-读书笔记\"><a href=\"#Java核心技术卷-一-读书笔记\" class=\"headerlink\" title=\"Java核心技术卷(一)读书笔记\"></a>Java核心技术卷(一)读书笔记</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><ul>\n<li>int  4字节</li>\n<li>long  8字节</li>\n<li>short 2字节</li>\n<li>byte  1字节<blockquote>\n<p><strong>需要注意的是字节长度与平台无关,与c语言不同</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>float 4字节,一般不够用</li>\n<li>double  8字节<blockquote>\n<p>遵循IEEE754标准</p>\n<a id=\"more\"></a>\n</blockquote>\n<h3 id=\"char类型\"><a href=\"#char类型\" class=\"headerlink\" title=\"char类型\"></a>char类型</h3></li>\n<li>16位,字符常量,用单引号括起来</li>\n<li>16位,65536个不同的值</li>\n<li>一个char代表一个代码单元,但是并不一定代表一个代码点.</li>\n<li>一个代码点可以认为是一个字符,例如’a’,’中’,但是其中可能前者只包含一个代码单元,而后者包含两个代码单元</li>\n</ul>\n<h3 id=\"boolean-类型\"><a href=\"#boolean-类型\" class=\"headerlink\" title=\"boolean 类型\"></a>boolean 类型</h3><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li>String类型</li>\n<li>与C,C++不同的是,字符串并非是字符数组,也不提供修改字符串的方法,其目的在于编译器可以让字符串共享,因为各种字符串存在一个公共的存储池当中.</li>\n<li>使用equals方法来判定是否相等</li>\n<li>length方法:返回的是字符长度,也就是代码单元数量</li>\n<li>getBytes().length() 可以返回字节长度,需要指定编码方式.</li>\n<li>通过StringBuilder来构建字符串</li>\n</ul>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><ul>\n<li>依赖 use a</li>\n<li>聚合 has a</li>\n<li>继承 is a</li>\n</ul>\n<blockquote>\n<p>一个对象变量并不拥有一个对象,而仅仅是<strong>引用</strong>一个对象</p>\n</blockquote>\n<ul>\n<li>final变量:构建对象时必须初始化final变量,但是并不意味着此变量不能被改变,而仅仅意味着变量的引用不能够改变,但是如果引用的对象是不可变对象时(例如String),则可以认为此变量是不能够被改变的</li>\n<li>static变量:静态变量,类级别共享的变量</li>\n</ul>\n<blockquote>\n<p>方法参数,注意到java总是按照值传递的方式调用函数(call by value)</p>\n</blockquote>\n<ul>\n<li>静态初始化块,在类第一次加载的时候将会进行静态域的初始化<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3></li>\n<li>final类和方法可以阻止继承,以免子类改变语义</li>\n<li>只能在继承层次进行类型转换,同时在进行(继承链)向下的转换时,先用instanceof进行类型判断<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3></li>\n<li>动态绑定<ul>\n<li>查看对象的声明类型和方法名称</li>\n<li>查看调用方法时提供的参数类型</li>\n<li>非静态绑定时采用动态绑定的方式调用方法,调用的方法依赖于隐式参数(this)的实际类型.</li>\n<li>调用与对象的实际类型最适合的类方法.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>为了减少每次搜索的开销,编译器维护一个方法表,其中列出了所有方法的签名和实际调用的方法</p>\n<ul>\n<li>静态绑定<ul>\n<li>private方法</li>\n<li>static方法</li>\n<li>final方法</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"equals方法的几个特性\"><a href=\"#equals方法的几个特性\" class=\"headerlink\" title=\"equals方法的几个特性\"></a>equals方法的几个特性</h2><ul>\n<li>自反性</li>\n</ul>\n<blockquote>\n<p>a.equals(a) 为true</p>\n</blockquote>\n<ul>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性:反复调用应该返回一样的结果</li>\n<li>x.equals(null) 返回false</li>\n</ul>\n<h2 id=\"hashcode方法\"><a href=\"#hashcode方法\" class=\"headerlink\" title=\"hashcode方法\"></a>hashcode方法</h2><ul>\n<li>一个hash方法,由对象导出的一个整型,每个对象都有一个默认的hashcode,其值为对象的存储地址</li>\n<li><strong>equals和hashCode的定义必须一致:调用的返回结果必须相同</strong></li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><ul>\n<li>Class类:表示一个特定类的属性,具体而言,Class是一个类,而某个具体类的class(例如int.Class)则是对象,其类是Class.</li>\n<li>newInstance()方法初始化对象</li>\n<li>getFields():返回public 域数组</li>\n<li>getMethods()</li>\n<li>getConstructors()</li>\n</ul>\n<h3 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h3><ul>\n<li>动态绑定<ul>\n<li>todo</li>\n</ul>\n</li>\n<li>instanceof</li>\n<li>equals</li>\n<li>hashCode</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>克隆</li>\n<li>内部类</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Java核心技术卷-一-读书笔记\"><a href=\"#Java核心技术卷-一-读书笔记\" class=\"headerlink\" title=\"Java核心技术卷(一)读书笔记\"></a>Java核心技术卷(一)读书笔记</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h3><ul>\n<li>int  4字节</li>\n<li>long  8字节</li>\n<li>short 2字节</li>\n<li>byte  1字节<blockquote>\n<p><strong>需要注意的是字节长度与平台无关,与c语言不同</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><ul>\n<li>float 4字节,一般不够用</li>\n<li>double  8字节<blockquote>\n<p>遵循IEEE754标准</p>","more":"</blockquote>\n<h3 id=\"char类型\"><a href=\"#char类型\" class=\"headerlink\" title=\"char类型\"></a>char类型</h3></li>\n<li>16位,字符常量,用单引号括起来</li>\n<li>16位,65536个不同的值</li>\n<li>一个char代表一个代码单元,但是并不一定代表一个代码点.</li>\n<li>一个代码点可以认为是一个字符,例如’a’,’中’,但是其中可能前者只包含一个代码单元,而后者包含两个代码单元</li>\n</ul>\n<h3 id=\"boolean-类型\"><a href=\"#boolean-类型\" class=\"headerlink\" title=\"boolean 类型\"></a>boolean 类型</h3><h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><ul>\n<li>String类型</li>\n<li>与C,C++不同的是,字符串并非是字符数组,也不提供修改字符串的方法,其目的在于编译器可以让字符串共享,因为各种字符串存在一个公共的存储池当中.</li>\n<li>使用equals方法来判定是否相等</li>\n<li>length方法:返回的是字符长度,也就是代码单元数量</li>\n<li>getBytes().length() 可以返回字节长度,需要指定编码方式.</li>\n<li>通过StringBuilder来构建字符串</li>\n</ul>\n<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><ul>\n<li>依赖 use a</li>\n<li>聚合 has a</li>\n<li>继承 is a</li>\n</ul>\n<blockquote>\n<p>一个对象变量并不拥有一个对象,而仅仅是<strong>引用</strong>一个对象</p>\n</blockquote>\n<ul>\n<li>final变量:构建对象时必须初始化final变量,但是并不意味着此变量不能被改变,而仅仅意味着变量的引用不能够改变,但是如果引用的对象是不可变对象时(例如String),则可以认为此变量是不能够被改变的</li>\n<li>static变量:静态变量,类级别共享的变量</li>\n</ul>\n<blockquote>\n<p>方法参数,注意到java总是按照值传递的方式调用函数(call by value)</p>\n</blockquote>\n<ul>\n<li>静态初始化块,在类第一次加载的时候将会进行静态域的初始化<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3></li>\n<li>final类和方法可以阻止继承,以免子类改变语义</li>\n<li>只能在继承层次进行类型转换,同时在进行(继承链)向下的转换时,先用instanceof进行类型判断<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3></li>\n<li>动态绑定<ul>\n<li>查看对象的声明类型和方法名称</li>\n<li>查看调用方法时提供的参数类型</li>\n<li>非静态绑定时采用动态绑定的方式调用方法,调用的方法依赖于隐式参数(this)的实际类型.</li>\n<li>调用与对象的实际类型最适合的类方法.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>为了减少每次搜索的开销,编译器维护一个方法表,其中列出了所有方法的签名和实际调用的方法</p>\n<ul>\n<li>静态绑定<ul>\n<li>private方法</li>\n<li>static方法</li>\n<li>final方法</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"equals方法的几个特性\"><a href=\"#equals方法的几个特性\" class=\"headerlink\" title=\"equals方法的几个特性\"></a>equals方法的几个特性</h2><ul>\n<li>自反性</li>\n</ul>\n<blockquote>\n<p>a.equals(a) 为true</p>\n</blockquote>\n<ul>\n<li>对称性</li>\n<li>传递性</li>\n<li>一致性:反复调用应该返回一样的结果</li>\n<li>x.equals(null) 返回false</li>\n</ul>\n<h2 id=\"hashcode方法\"><a href=\"#hashcode方法\" class=\"headerlink\" title=\"hashcode方法\"></a>hashcode方法</h2><ul>\n<li>一个hash方法,由对象导出的一个整型,每个对象都有一个默认的hashcode,其值为对象的存储地址</li>\n<li><strong>equals和hashCode的定义必须一致:调用的返回结果必须相同</strong></li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><ul>\n<li>Class类:表示一个特定类的属性,具体而言,Class是一个类,而某个具体类的class(例如int.Class)则是对象,其类是Class.</li>\n<li>newInstance()方法初始化对象</li>\n<li>getFields():返回public 域数组</li>\n<li>getMethods()</li>\n<li>getConstructors()</li>\n</ul>\n<h3 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h3><ul>\n<li>动态绑定<ul>\n<li>todo</li>\n</ul>\n</li>\n<li>instanceof</li>\n<li>equals</li>\n<li>hashCode</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>克隆</li>\n<li>内部类</li>\n</ul>"},{"title":"Java正则表达式SomeTips","date":"2016-10-16T12:29:12.000Z","_content":"* 默认的写法均为贪婪的\n* 加?之后修改为最短匹配\n\n\t\tPattern pattern = Pattern.compile(\"\\\\d{1,3}\");\n        String s = \"123-456-789\";\n        Matcher matcher = pattern.matcher(s);\n<!--more-->\n* Matcher类\n\t* matches() 方法返回boolean，判断整个字符串是否符合pattern。\n\t* find() 方法返回boolean， **判断字符串中是否存在子串符合pattern**,通过group()方法获得匹配的子串。\n\t\n\t\t\twhile (matcher.find()) {\n\t            System.out.println(matcher.group());\n\t        }\n","source":"_posts/Java正则表达式.md","raw":"---\ntitle: Java正则表达式SomeTips\ndate: 2016-10-16 20:29:12\ntags:\n- java\n\n---\n* 默认的写法均为贪婪的\n* 加?之后修改为最短匹配\n\n\t\tPattern pattern = Pattern.compile(\"\\\\d{1,3}\");\n        String s = \"123-456-789\";\n        Matcher matcher = pattern.matcher(s);\n<!--more-->\n* Matcher类\n\t* matches() 方法返回boolean，判断整个字符串是否符合pattern。\n\t* find() 方法返回boolean， **判断字符串中是否存在子串符合pattern**,通过group()方法获得匹配的子串。\n\t\n\t\t\twhile (matcher.find()) {\n\t            System.out.println(matcher.group());\n\t        }\n","slug":"Java正则表达式","published":1,"updated":"2016-10-16T13:16:17.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zj000nlq0hj4t9y6by","content":"<ul>\n<li>默认的写法均为贪婪的</li>\n<li><p>加?之后修改为最短匹配</p>\n<pre><code>Pattern pattern = Pattern.compile(&quot;\\\\d{1,3}&quot;);\nString s = &quot;123-456-789&quot;;\nMatcher matcher = pattern.matcher(s);\n</code></pre><a id=\"more\"></a></li>\n<li><p>Matcher类</p>\n<ul>\n<li>matches() 方法返回boolean，判断整个字符串是否符合pattern。</li>\n<li><p>find() 方法返回boolean， <strong>判断字符串中是否存在子串符合pattern</strong>,通过group()方法获得匹配的子串。</p>\n<pre><code>while (matcher.find()) {\n    System.out.println(matcher.group());\n}\n</code></pre></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>默认的写法均为贪婪的</li>\n<li><p>加?之后修改为最短匹配</p>\n<pre><code>Pattern pattern = Pattern.compile(&quot;\\\\d{1,3}&quot;);\nString s = &quot;123-456-789&quot;;\nMatcher matcher = pattern.matcher(s);\n</code></pre>","more":"</li>\n<li><p>Matcher类</p>\n<ul>\n<li>matches() 方法返回boolean，判断整个字符串是否符合pattern。</li>\n<li><p>find() 方法返回boolean， <strong>判断字符串中是否存在子串符合pattern</strong>,通过group()方法获得匹配的子串。</p>\n<pre><code>while (matcher.find()) {\n    System.out.println(matcher.group());\n}\n</code></pre></li>\n</ul>\n</li>\n</ul>"},{"title":"Java高级程序设计之面向对象","date":"2017-08-01T13:56:36.000Z","_content":"# Java高级程序设计之面向对象\n## 对象\n### 使用对象字面量来创建对象\n* 对于对象的每一个属性来说,,都有两种类型的属性来确实其性质:\n\t* 数据属性\n\t\t* Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)\n\t\t* Enumerable  是否可遍历,指定for in时是否返回\n\t\t* Writable\n\t\t* Value 属性的数据值,例如person中的属性name的值wilbert\n\t* 访问器属性\n\t\t* Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)\n\t\t* Enumerable  是否可遍历,指定for in时是否返回\n\t\t* Writable\n\t\t* Value 属性的数据值,例如person中的属性name的值wilbert  \n\t\t* Get  \n\t\t* Set\n<!--more-->\n---\n\tvar person = {\n    \tname: \"wilbert\",\n    \tsayHello: function () {\n    \t    console.log(\"hello!world!\")\n    \t}\n\t}\n\tObject.defineProperty(person, \"name\", {\n\t    get: function () {\n\t        return name + \"test\";\n\t    },\n\t    set: function (newValue) {\n\t     name = newValue;\n\t     }\n\t})\n\tperson.name = \"abcd\";\n\tconsole.log(person.name);\n\t//输出 abcdtest\n\n\n* 注意,仅能通过Object.defineProperty()或者Object.defineProperties()方法来对上述属性进行修改.\n\n----\n### 工厂模式\n* 使用一个普通的函数,在函数中新建Object并且设定其属性,之后\n返回这个对象\n### 构造函数模式\n\tfunction Person(name, password) {\n\t    this.name = name;\n\t    this.password = password;\n\t    this.sayHello = function () {\n\t        console.log(\"Hello!\");\n\t    }\n\t}\n\tperson = new Person('a', 'a');\n* 使用new操作符来创建对象\n可以使用instanceof来判断对象类型\n* 构造函数也可以看成普通的函数来调用,注意此时的this的作用域(一般情况下是windows)\n* 缺点:每个方法都相当于重新实例化了一遍,这个问题可以通过\n原型模式property解决\n### 原型模式\n* 每个构造函数都存在着prototype属性,这个属性指向一个原型对象,默认原型对象仅有constructor属性,constructor属性中又存在着指向构造函数的指针,如图\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-1/13154209.jpg)\n* 而通过构造函数实例化的对象都存在一个无法访问的指针[[prototype]]指向**同一个**原型对象.\n* 指针的获得方式\n  \n\t\t Object.getPrototypeof(person)\n\n* 所以我们可以通过构造函数的prototype属性来设置原型对象从而达到公用函数或者变量的目的.\n* 注意,访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再访问原型对象中的值.\n#### 动态原型模式\n看代码\n\n\tfunction Person(name, password) {\n\t    this.name = name;\n\t    this.password = password;\n\t\n\t    if(typeof this.sayHello != \"function\") {\n\t        Person.prototype.sayHello = function () {\n\t            console.log(this.name + this.password);\n\t        }\n\t    }\n\t}\n\n* 结合了构造函数与原型模式的优点,使其在使用上与普通的C/C++系的类更加相同.\n\n\n## 继承\n顺着上面的原型链继续写点关于继承的内容.\n### 实现方法:\n设置子类(SubType)的原型属性(prototype)为父类(SuperType)的实例.\n### 大概原理\n* 图片\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-2/37511968.jpg)\n* 代码大致如下\n\n\t\tfunction Man(age) {\n\t\t    this.age = age;\n\t\t    this.name = \"test sub\";\n\t\t}\n\t\tMan.prototype = new Person(\"sub\", \"sub\");\n\t\tman = new Man(\"10\");\n\t\tman.sayHello();\n\t\t//访问Person类的方法\n\t\tconsole.log(man.name);\n\t\t//访问Person类的属性\n* 此时情况如下:\n\t* man中的\\[[prototype]](不可访问指针)指向Person(父类)的实例对象person\n\t* person类中的\\[[prototype]](不可访问指针)指向Person(父类)的原型对象\n\t* Person(父类)的原型对象的Constructor中存在指向Person的指针\n* 综上,构成了一条原型链,而根据属性的访问规则:\n>访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再顺着原型链直至查找到对象为止.\n\n* 重点在于\n\t* 构造函数存在prototype指向原型对象;\n\t* 默认原型对象的构造函数存在指向构造函数的指针;\n\t* 对象实例(通过构造函数创建)存在指向原型对象的指针.\n* 可以通过 instanceOf判断类型\n* 给原型添加方法的代码一定要放在替换原型的语句之后.\n","source":"_posts/Java高级程序设计之面向对象.md","raw":"---\ntitle: Java高级程序设计之面向对象\ndate: 2017-08-01 21:56:36\ntags:\n- javascript\n- 继承\n\n---\n# Java高级程序设计之面向对象\n## 对象\n### 使用对象字面量来创建对象\n* 对于对象的每一个属性来说,,都有两种类型的属性来确实其性质:\n\t* 数据属性\n\t\t* Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)\n\t\t* Enumerable  是否可遍历,指定for in时是否返回\n\t\t* Writable\n\t\t* Value 属性的数据值,例如person中的属性name的值wilbert\n\t* 访问器属性\n\t\t* Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)\n\t\t* Enumerable  是否可遍历,指定for in时是否返回\n\t\t* Writable\n\t\t* Value 属性的数据值,例如person中的属性name的值wilbert  \n\t\t* Get  \n\t\t* Set\n<!--more-->\n---\n\tvar person = {\n    \tname: \"wilbert\",\n    \tsayHello: function () {\n    \t    console.log(\"hello!world!\")\n    \t}\n\t}\n\tObject.defineProperty(person, \"name\", {\n\t    get: function () {\n\t        return name + \"test\";\n\t    },\n\t    set: function (newValue) {\n\t     name = newValue;\n\t     }\n\t})\n\tperson.name = \"abcd\";\n\tconsole.log(person.name);\n\t//输出 abcdtest\n\n\n* 注意,仅能通过Object.defineProperty()或者Object.defineProperties()方法来对上述属性进行修改.\n\n----\n### 工厂模式\n* 使用一个普通的函数,在函数中新建Object并且设定其属性,之后\n返回这个对象\n### 构造函数模式\n\tfunction Person(name, password) {\n\t    this.name = name;\n\t    this.password = password;\n\t    this.sayHello = function () {\n\t        console.log(\"Hello!\");\n\t    }\n\t}\n\tperson = new Person('a', 'a');\n* 使用new操作符来创建对象\n可以使用instanceof来判断对象类型\n* 构造函数也可以看成普通的函数来调用,注意此时的this的作用域(一般情况下是windows)\n* 缺点:每个方法都相当于重新实例化了一遍,这个问题可以通过\n原型模式property解决\n### 原型模式\n* 每个构造函数都存在着prototype属性,这个属性指向一个原型对象,默认原型对象仅有constructor属性,constructor属性中又存在着指向构造函数的指针,如图\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-1/13154209.jpg)\n* 而通过构造函数实例化的对象都存在一个无法访问的指针[[prototype]]指向**同一个**原型对象.\n* 指针的获得方式\n  \n\t\t Object.getPrototypeof(person)\n\n* 所以我们可以通过构造函数的prototype属性来设置原型对象从而达到公用函数或者变量的目的.\n* 注意,访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再访问原型对象中的值.\n#### 动态原型模式\n看代码\n\n\tfunction Person(name, password) {\n\t    this.name = name;\n\t    this.password = password;\n\t\n\t    if(typeof this.sayHello != \"function\") {\n\t        Person.prototype.sayHello = function () {\n\t            console.log(this.name + this.password);\n\t        }\n\t    }\n\t}\n\n* 结合了构造函数与原型模式的优点,使其在使用上与普通的C/C++系的类更加相同.\n\n\n## 继承\n顺着上面的原型链继续写点关于继承的内容.\n### 实现方法:\n设置子类(SubType)的原型属性(prototype)为父类(SuperType)的实例.\n### 大概原理\n* 图片\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-8-2/37511968.jpg)\n* 代码大致如下\n\n\t\tfunction Man(age) {\n\t\t    this.age = age;\n\t\t    this.name = \"test sub\";\n\t\t}\n\t\tMan.prototype = new Person(\"sub\", \"sub\");\n\t\tman = new Man(\"10\");\n\t\tman.sayHello();\n\t\t//访问Person类的方法\n\t\tconsole.log(man.name);\n\t\t//访问Person类的属性\n* 此时情况如下:\n\t* man中的\\[[prototype]](不可访问指针)指向Person(父类)的实例对象person\n\t* person类中的\\[[prototype]](不可访问指针)指向Person(父类)的原型对象\n\t* Person(父类)的原型对象的Constructor中存在指向Person的指针\n* 综上,构成了一条原型链,而根据属性的访问规则:\n>访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再顺着原型链直至查找到对象为止.\n\n* 重点在于\n\t* 构造函数存在prototype指向原型对象;\n\t* 默认原型对象的构造函数存在指向构造函数的指针;\n\t* 对象实例(通过构造函数创建)存在指向原型对象的指针.\n* 可以通过 instanceOf判断类型\n* 给原型添加方法的代码一定要放在替换原型的语句之后.\n","slug":"Java高级程序设计之面向对象","published":1,"updated":"2017-08-27T13:11:43.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zk000plq0h7ihwvkw3","content":"<h1 id=\"Java高级程序设计之面向对象\"><a href=\"#Java高级程序设计之面向对象\" class=\"headerlink\" title=\"Java高级程序设计之面向对象\"></a>Java高级程序设计之面向对象</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"使用对象字面量来创建对象\"><a href=\"#使用对象字面量来创建对象\" class=\"headerlink\" title=\"使用对象字面量来创建对象\"></a>使用对象字面量来创建对象</h3><ul>\n<li>对于对象的每一个属性来说,,都有两种类型的属性来确实其性质:<ul>\n<li>数据属性<ul>\n<li>Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)</li>\n<li>Enumerable  是否可遍历,指定for in时是否返回</li>\n<li>Writable</li>\n<li>Value 属性的数据值,例如person中的属性name的值wilbert</li>\n</ul>\n</li>\n<li>访问器属性<ul>\n<li>Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)</li>\n<li>Enumerable  是否可遍历,指定for in时是否返回</li>\n<li>Writable</li>\n<li>Value 属性的数据值,例如person中的属性name的值wilbert  </li>\n<li>Get  </li>\n<li>Set<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<pre><code>var person = {\n    name: &quot;wilbert&quot;,\n    sayHello: function () {\n        console.log(&quot;hello!world!&quot;)\n    }\n}\nObject.defineProperty(person, &quot;name&quot;, {\n    get: function () {\n        return name + &quot;test&quot;;\n    },\n    set: function (newValue) {\n     name = newValue;\n     }\n})\nperson.name = &quot;abcd&quot;;\nconsole.log(person.name);\n//输出 abcdtest\n</code></pre><ul>\n<li>注意,仅能通过Object.defineProperty()或者Object.defineProperties()方法来对上述属性进行修改.</li>\n</ul>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><ul>\n<li>使用一个普通的函数,在函数中新建Object并且设定其属性,之后<br>返回这个对象<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3>  function Person(name, password) {<pre><code>this.name = name;\nthis.password = password;\nthis.sayHello = function () {\n    console.log(&quot;Hello!&quot;);\n}\n</code></pre>  }<br>  person = new Person(‘a’, ‘a’);</li>\n<li>使用new操作符来创建对象<br>可以使用instanceof来判断对象类型</li>\n<li>构造函数也可以看成普通的函数来调用,注意此时的this的作用域(一般情况下是windows)</li>\n<li>缺点:每个方法都相当于重新实例化了一遍,这个问题可以通过<br>原型模式property解决<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3></li>\n<li>每个构造函数都存在着prototype属性,这个属性指向一个原型对象,默认原型对象仅有constructor属性,constructor属性中又存在着指向构造函数的指针,如图</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-1/13154209.jpg\" alt=\"\"></li>\n<li>而通过构造函数实例化的对象都存在一个无法访问的指针[[prototype]]指向<strong>同一个</strong>原型对象.</li>\n<li><p>指针的获得方式</p>\n<pre><code>Object.getPrototypeof(person)\n</code></pre></li>\n<li><p>所以我们可以通过构造函数的prototype属性来设置原型对象从而达到公用函数或者变量的目的.</p>\n</li>\n<li><p>注意,访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再访问原型对象中的值.</p>\n<h4 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h4><p>看代码</p>\n<p>  function Person(name, password) {</p>\n<pre><code>this.name = name;\nthis.password = password;\n\nif(typeof this.sayHello != &quot;function&quot;) {\n    Person.prototype.sayHello = function () {\n        console.log(this.name + this.password);\n    }\n}\n</code></pre><p>  }</p>\n</li>\n<li><p>结合了构造函数与原型模式的优点,使其在使用上与普通的C/C++系的类更加相同.</p>\n</li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>顺着上面的原型链继续写点关于继承的内容.</p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法:\"></a>实现方法:</h3><p>设置子类(SubType)的原型属性(prototype)为父类(SuperType)的实例.</p>\n<h3 id=\"大概原理\"><a href=\"#大概原理\" class=\"headerlink\" title=\"大概原理\"></a>大概原理</h3><ul>\n<li>图片<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-2/37511968.jpg\" alt=\"\"></li>\n<li><p>代码大致如下</p>\n<pre><code>function Man(age) {\n    this.age = age;\n    this.name = &quot;test sub&quot;;\n}\nMan.prototype = new Person(&quot;sub&quot;, &quot;sub&quot;);\nman = new Man(&quot;10&quot;);\nman.sayHello();\n//访问Person类的方法\nconsole.log(man.name);\n//访问Person类的属性\n</code></pre></li>\n<li>此时情况如下:<ul>\n<li>man中的[<a href=\"不可访问指针\">prototype]</a>指向Person(父类)的实例对象person</li>\n<li>person类中的[<a href=\"不可访问指针\">prototype]</a>指向Person(父类)的原型对象</li>\n<li>Person(父类)的原型对象的Constructor中存在指向Person的指针</li>\n</ul>\n</li>\n<li><p>综上,构成了一条原型链,而根据属性的访问规则:</p>\n<blockquote>\n<p>访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再顺着原型链直至查找到对象为止.</p>\n</blockquote>\n</li>\n<li><p>重点在于</p>\n<ul>\n<li>构造函数存在prototype指向原型对象;</li>\n<li>默认原型对象的构造函数存在指向构造函数的指针;</li>\n<li>对象实例(通过构造函数创建)存在指向原型对象的指针.</li>\n</ul>\n</li>\n<li>可以通过 instanceOf判断类型</li>\n<li>给原型添加方法的代码一定要放在替换原型的语句之后.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Java高级程序设计之面向对象\"><a href=\"#Java高级程序设计之面向对象\" class=\"headerlink\" title=\"Java高级程序设计之面向对象\"></a>Java高级程序设计之面向对象</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"使用对象字面量来创建对象\"><a href=\"#使用对象字面量来创建对象\" class=\"headerlink\" title=\"使用对象字面量来创建对象\"></a>使用对象字面量来创建对象</h3><ul>\n<li>对于对象的每一个属性来说,,都有两种类型的属性来确实其性质:<ul>\n<li>数据属性<ul>\n<li>Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)</li>\n<li>Enumerable  是否可遍历,指定for in时是否返回</li>\n<li>Writable</li>\n<li>Value 属性的数据值,例如person中的属性name的值wilbert</li>\n</ul>\n</li>\n<li>访问器属性<ul>\n<li>Configureable 是否可配置,该属性指定对象是否可以配置(主要指的是数据属性)</li>\n<li>Enumerable  是否可遍历,指定for in时是否返回</li>\n<li>Writable</li>\n<li>Value 属性的数据值,例如person中的属性name的值wilbert  </li>\n<li>Get  </li>\n<li>Set","more":"</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<pre><code>var person = {\n    name: &quot;wilbert&quot;,\n    sayHello: function () {\n        console.log(&quot;hello!world!&quot;)\n    }\n}\nObject.defineProperty(person, &quot;name&quot;, {\n    get: function () {\n        return name + &quot;test&quot;;\n    },\n    set: function (newValue) {\n     name = newValue;\n     }\n})\nperson.name = &quot;abcd&quot;;\nconsole.log(person.name);\n//输出 abcdtest\n</code></pre><ul>\n<li>注意,仅能通过Object.defineProperty()或者Object.defineProperties()方法来对上述属性进行修改.</li>\n</ul>\n<hr>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><ul>\n<li>使用一个普通的函数,在函数中新建Object并且设定其属性,之后<br>返回这个对象<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3>  function Person(name, password) {<pre><code>this.name = name;\nthis.password = password;\nthis.sayHello = function () {\n    console.log(&quot;Hello!&quot;);\n}\n</code></pre>  }<br>  person = new Person(‘a’, ‘a’);</li>\n<li>使用new操作符来创建对象<br>可以使用instanceof来判断对象类型</li>\n<li>构造函数也可以看成普通的函数来调用,注意此时的this的作用域(一般情况下是windows)</li>\n<li>缺点:每个方法都相当于重新实例化了一遍,这个问题可以通过<br>原型模式property解决<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3></li>\n<li>每个构造函数都存在着prototype属性,这个属性指向一个原型对象,默认原型对象仅有constructor属性,constructor属性中又存在着指向构造函数的指针,如图</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-1/13154209.jpg\" alt=\"\"></li>\n<li>而通过构造函数实例化的对象都存在一个无法访问的指针[[prototype]]指向<strong>同一个</strong>原型对象.</li>\n<li><p>指针的获得方式</p>\n<pre><code>Object.getPrototypeof(person)\n</code></pre></li>\n<li><p>所以我们可以通过构造函数的prototype属性来设置原型对象从而达到公用函数或者变量的目的.</p>\n</li>\n<li><p>注意,访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再访问原型对象中的值.</p>\n<h4 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h4><p>看代码</p>\n<p>  function Person(name, password) {</p>\n<pre><code>this.name = name;\nthis.password = password;\n\nif(typeof this.sayHello != &quot;function&quot;) {\n    Person.prototype.sayHello = function () {\n        console.log(this.name + this.password);\n    }\n}\n</code></pre><p>  }</p>\n</li>\n<li><p>结合了构造函数与原型模式的优点,使其在使用上与普通的C/C++系的类更加相同.</p>\n</li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>顺着上面的原型链继续写点关于继承的内容.</p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法:\"></a>实现方法:</h3><p>设置子类(SubType)的原型属性(prototype)为父类(SuperType)的实例.</p>\n<h3 id=\"大概原理\"><a href=\"#大概原理\" class=\"headerlink\" title=\"大概原理\"></a>大概原理</h3><ul>\n<li>图片<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-8-2/37511968.jpg\" alt=\"\"></li>\n<li><p>代码大致如下</p>\n<pre><code>function Man(age) {\n    this.age = age;\n    this.name = &quot;test sub&quot;;\n}\nMan.prototype = new Person(&quot;sub&quot;, &quot;sub&quot;);\nman = new Man(&quot;10&quot;);\nman.sayHello();\n//访问Person类的方法\nconsole.log(man.name);\n//访问Person类的属性\n</code></pre></li>\n<li>此时情况如下:<ul>\n<li>man中的[<a href=\"不可访问指针\">prototype]</a>指向Person(父类)的实例对象person</li>\n<li>person类中的[<a href=\"不可访问指针\">prototype]</a>指向Person(父类)的原型对象</li>\n<li>Person(父类)的原型对象的Constructor中存在指向Person的指针</li>\n</ul>\n</li>\n<li><p>综上,构成了一条原型链,而根据属性的访问规则:</p>\n<blockquote>\n<p>访问一个对象的属性时的访问顺序:先访问自身的值,如果不存在,再顺着原型链直至查找到对象为止.</p>\n</blockquote>\n</li>\n<li><p>重点在于</p>\n<ul>\n<li>构造函数存在prototype指向原型对象;</li>\n<li>默认原型对象的构造函数存在指向构造函数的指针;</li>\n<li>对象实例(通过构造函数创建)存在指向原型对象的指针.</li>\n</ul>\n</li>\n<li>可以通过 instanceOf判断类型</li>\n<li>给原型添加方法的代码一定要放在替换原型的语句之后.</li>\n</ul>"},{"title":"Maven实战读书笔记","date":"2017-10-11T12:59:19.000Z","_content":"\n# Maven实战\n\n## 常用命令\n\n* mvn clean compile\n* mvn clean test\n* mvn clean package\n  * 默认打包为jar,可以在pom.xml里面指定打包类型\n* mvn clean install\n  * 将项目打包后安装到本地仓库以供其他项目使用\n* 默认打包生成的jar时不能够直接运行的,为了生成可执行的jar文件,需要借助maven-shade-plugin\n\n<!--more-->\n\n","source":"_posts/Maven实战读书笔记.md","raw":"---\ntitle: Maven实战读书笔记\ndate: 2017-10-11 20:59:19\ntags:\n- Maven\n---\n\n# Maven实战\n\n## 常用命令\n\n* mvn clean compile\n* mvn clean test\n* mvn clean package\n  * 默认打包为jar,可以在pom.xml里面指定打包类型\n* mvn clean install\n  * 将项目打包后安装到本地仓库以供其他项目使用\n* 默认打包生成的jar时不能够直接运行的,为了生成可执行的jar文件,需要借助maven-shade-plugin\n\n<!--more-->\n\n","slug":"Maven实战读书笔记","published":1,"updated":"2017-10-11T14:17:26.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zm000qlq0hndpve7yz","content":"<h1 id=\"Maven实战\"><a href=\"#Maven实战\" class=\"headerlink\" title=\"Maven实战\"></a>Maven实战</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>mvn clean compile</li>\n<li>mvn clean test</li>\n<li>mvn clean package<ul>\n<li>默认打包为jar,可以在pom.xml里面指定打包类型</li>\n</ul>\n</li>\n<li>mvn clean install<ul>\n<li>将项目打包后安装到本地仓库以供其他项目使用</li>\n</ul>\n</li>\n<li>默认打包生成的jar时不能够直接运行的,为了生成可执行的jar文件,需要借助maven-shade-plugin</li>\n</ul>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h1 id=\"Maven实战\"><a href=\"#Maven实战\" class=\"headerlink\" title=\"Maven实战\"></a>Maven实战</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>mvn clean compile</li>\n<li>mvn clean test</li>\n<li>mvn clean package<ul>\n<li>默认打包为jar,可以在pom.xml里面指定打包类型</li>\n</ul>\n</li>\n<li>mvn clean install<ul>\n<li>将项目打包后安装到本地仓库以供其他项目使用</li>\n</ul>\n</li>\n<li>默认打包生成的jar时不能够直接运行的,为了生成可执行的jar文件,需要借助maven-shade-plugin</li>\n</ul>","more":""},{"title":"RecycleView","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n### 创建RecycleView.Adapter的继承类\n* 其中存在内部静态类：继承 RecyclerView.ViewHolder.\n* 内部静态类：\n\n\t\tpublic static class ViewHolder extends RecyclerView.ViewHolder{\n\t        public Button button;\n\t        public ViewHolder(View t) {\n\t            super(t);\n\t            button = (Button) t.findViewById(R.id.item_text_view);\n\t        }}\n#### 重载函数 onCreateViewHolder\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        final View view = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.my_text_view, parent, false);\n\t\tViewHolder viewHolder = new ViewHolder(view);\n        return viewHolder;\n    }\n#### 重载onBindViewHolder，设置每一个item的内容\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n\t\t//每个item的具体设置\n        holder.button.setText(dataSet.get(position));\n    }\n\n### 实现按钮监听的方法\n1. 声明接口\n\n\t\tpublic interface IOnItemClick {\n\t        void onItemClick(View view);\n\t    }\n2. 在Activity中实现接口\n\n\t\tMenuAdapter.IOnItemClick iOnItemClick = new MenuAdapter.IOnItemClick() {\n            @Override\n            public void onItemClick(View view) {\n\t\t\t\t//此处的view为每个item的View而非里面的按钮之类的\n\t\t        int itemPosition = recyclerView.getChildLayoutPosition(view);\n        \t}\n\t\t}\n3. 在初始化Adapter中，将接口的实现类传进去。\n4. 在Adapter中。\n\n\t\t    @Override\n\t\t    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\t\t        final View view = LayoutInflater.from(parent.getContext())\n\t\t                .inflate(R.layout.my_text_view, parent, false);\n\t\t        ViewHolder viewHolder = new ViewHolder(view);\n\t\t        if(iOnItemClick != null) {\n\t\t            viewHolder.button.setOnClickListener(new View.OnClickListener() {\n\t\t                @Override\n\t\t                public void onClick(View v) {\n\t\t                    iOnItemClick.onItemClick(view);\n\t\t\t\t\t\t\t//此处调用的view为上面所述的view而非按钮v\n\t\t                }\n\t\t            });\n\t\t        }\n\t\t        return viewHolder;\n\t\t    }","source":"_posts/RecycleView.md","raw":"title: RecycleView\ndate: 2016-09-26\ntags:\n- android\n\n---\n<font style=\"font-family:微软雅黑\">\n### 创建RecycleView.Adapter的继承类\n* 其中存在内部静态类：继承 RecyclerView.ViewHolder.\n* 内部静态类：\n\n\t\tpublic static class ViewHolder extends RecyclerView.ViewHolder{\n\t        public Button button;\n\t        public ViewHolder(View t) {\n\t            super(t);\n\t            button = (Button) t.findViewById(R.id.item_text_view);\n\t        }}\n#### 重载函数 onCreateViewHolder\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        final View view = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.my_text_view, parent, false);\n\t\tViewHolder viewHolder = new ViewHolder(view);\n        return viewHolder;\n    }\n#### 重载onBindViewHolder，设置每一个item的内容\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n\t\t//每个item的具体设置\n        holder.button.setText(dataSet.get(position));\n    }\n\n### 实现按钮监听的方法\n1. 声明接口\n\n\t\tpublic interface IOnItemClick {\n\t        void onItemClick(View view);\n\t    }\n2. 在Activity中实现接口\n\n\t\tMenuAdapter.IOnItemClick iOnItemClick = new MenuAdapter.IOnItemClick() {\n            @Override\n            public void onItemClick(View view) {\n\t\t\t\t//此处的view为每个item的View而非里面的按钮之类的\n\t\t        int itemPosition = recyclerView.getChildLayoutPosition(view);\n        \t}\n\t\t}\n3. 在初始化Adapter中，将接口的实现类传进去。\n4. 在Adapter中。\n\n\t\t    @Override\n\t\t    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\t\t        final View view = LayoutInflater.from(parent.getContext())\n\t\t                .inflate(R.layout.my_text_view, parent, false);\n\t\t        ViewHolder viewHolder = new ViewHolder(view);\n\t\t        if(iOnItemClick != null) {\n\t\t            viewHolder.button.setOnClickListener(new View.OnClickListener() {\n\t\t                @Override\n\t\t                public void onClick(View v) {\n\t\t                    iOnItemClick.onItemClick(view);\n\t\t\t\t\t\t\t//此处调用的view为上面所述的view而非按钮v\n\t\t                }\n\t\t            });\n\t\t        }\n\t\t        return viewHolder;\n\t\t    }","slug":"RecycleView","published":1,"updated":"2016-09-26T08:58:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zn000slq0hdozqvn15","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"创建RecycleView-Adapter的继承类\"><a href=\"#创建RecycleView-Adapter的继承类\" class=\"headerlink\" title=\"创建RecycleView.Adapter的继承类\"></a>创建RecycleView.Adapter的继承类</h3><ul>\n<li>其中存在内部静态类：继承 RecyclerView.ViewHolder.</li>\n<li><p>内部静态类：</p>\n<pre><code>public static class ViewHolder extends RecyclerView.ViewHolder{\n    public Button button;\n    public ViewHolder(View t) {\n        super(t);\n        button = (Button) t.findViewById(R.id.item_text_view);\n    }}\n</code></pre><h4 id=\"重载函数-onCreateViewHolder\"><a href=\"#重载函数-onCreateViewHolder\" class=\"headerlink\" title=\"重载函数 onCreateViewHolder\"></a>重载函数 onCreateViewHolder</h4><p>  @Override<br>  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {</p>\n<pre><code>final View view = LayoutInflater.from(parent.getContext())\n        .inflate(R.layout.my_text_view, parent, false);\nViewHolder viewHolder = new ViewHolder(view);\nreturn viewHolder;\n</code></pre><p>  }</p>\n<h4 id=\"重载onBindViewHolder，设置每一个item的内容\"><a href=\"#重载onBindViewHolder，设置每一个item的内容\" class=\"headerlink\" title=\"重载onBindViewHolder，设置每一个item的内容\"></a>重载onBindViewHolder，设置每一个item的内容</h4><p>  @Override<br>  public void onBindViewHolder(ViewHolder holder, int position) {</p>\n<pre><code>//每个item的具体设置\nholder.button.setText(dataSet.get(position));\n</code></pre><p>  }</p>\n</li>\n</ul>\n<h3 id=\"实现按钮监听的方法\"><a href=\"#实现按钮监听的方法\" class=\"headerlink\" title=\"实现按钮监听的方法\"></a>实现按钮监听的方法</h3><ol>\n<li><p>声明接口</p>\n<pre><code>public interface IOnItemClick {\n    void onItemClick(View view);\n}\n</code></pre></li>\n<li><p>在Activity中实现接口</p>\n<pre><code>MenuAdapter.IOnItemClick iOnItemClick = new MenuAdapter.IOnItemClick() {\n    @Override\n    public void onItemClick(View view) {\n        //此处的view为每个item的View而非里面的按钮之类的\n        int itemPosition = recyclerView.getChildLayoutPosition(view);\n    }\n}\n</code></pre></li>\n<li>在初始化Adapter中，将接口的实现类传进去。</li>\n<li><p>在Adapter中。</p>\n<pre><code>@Override\npublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final View view = LayoutInflater.from(parent.getContext())\n            .inflate(R.layout.my_text_view, parent, false);\n    ViewHolder viewHolder = new ViewHolder(view);\n    if(iOnItemClick != null) {\n        viewHolder.button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                iOnItemClick.onItemClick(view);\n                //此处调用的view为上面所述的view而非按钮v\n            }\n        });\n    }\n    return viewHolder;\n}\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"创建RecycleView-Adapter的继承类\"><a href=\"#创建RecycleView-Adapter的继承类\" class=\"headerlink\" title=\"创建RecycleView.Adapter的继承类\"></a>创建RecycleView.Adapter的继承类</h3><ul>\n<li>其中存在内部静态类：继承 RecyclerView.ViewHolder.</li>\n<li><p>内部静态类：</p>\n<pre><code>public static class ViewHolder extends RecyclerView.ViewHolder{\n    public Button button;\n    public ViewHolder(View t) {\n        super(t);\n        button = (Button) t.findViewById(R.id.item_text_view);\n    }}\n</code></pre><h4 id=\"重载函数-onCreateViewHolder\"><a href=\"#重载函数-onCreateViewHolder\" class=\"headerlink\" title=\"重载函数 onCreateViewHolder\"></a>重载函数 onCreateViewHolder</h4><p>  @Override<br>  public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {</p>\n<pre><code>final View view = LayoutInflater.from(parent.getContext())\n        .inflate(R.layout.my_text_view, parent, false);\nViewHolder viewHolder = new ViewHolder(view);\nreturn viewHolder;\n</code></pre><p>  }</p>\n<h4 id=\"重载onBindViewHolder，设置每一个item的内容\"><a href=\"#重载onBindViewHolder，设置每一个item的内容\" class=\"headerlink\" title=\"重载onBindViewHolder，设置每一个item的内容\"></a>重载onBindViewHolder，设置每一个item的内容</h4><p>  @Override<br>  public void onBindViewHolder(ViewHolder holder, int position) {</p>\n<pre><code>//每个item的具体设置\nholder.button.setText(dataSet.get(position));\n</code></pre><p>  }</p>\n</li>\n</ul>\n<h3 id=\"实现按钮监听的方法\"><a href=\"#实现按钮监听的方法\" class=\"headerlink\" title=\"实现按钮监听的方法\"></a>实现按钮监听的方法</h3><ol>\n<li><p>声明接口</p>\n<pre><code>public interface IOnItemClick {\n    void onItemClick(View view);\n}\n</code></pre></li>\n<li><p>在Activity中实现接口</p>\n<pre><code>MenuAdapter.IOnItemClick iOnItemClick = new MenuAdapter.IOnItemClick() {\n    @Override\n    public void onItemClick(View view) {\n        //此处的view为每个item的View而非里面的按钮之类的\n        int itemPosition = recyclerView.getChildLayoutPosition(view);\n    }\n}\n</code></pre></li>\n<li>在初始化Adapter中，将接口的实现类传进去。</li>\n<li><p>在Adapter中。</p>\n<pre><code>@Override\npublic ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n    final View view = LayoutInflater.from(parent.getContext())\n            .inflate(R.layout.my_text_view, parent, false);\n    ViewHolder viewHolder = new ViewHolder(view);\n    if(iOnItemClick != null) {\n        viewHolder.button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                iOnItemClick.onItemClick(view);\n                //此处调用的view为上面所述的view而非按钮v\n            }\n        });\n    }\n    return viewHolder;\n}\n</code></pre></li>\n</ol>\n"},{"title":"SQL记录(二)","date":"2017-07-31T13:27:57.000Z","_content":"\n# 聚集函数\n### MIN()\n### MAX()\n### AVG()\n### SUM()\n<!--more-->\n### COUNT() 函数\n* count(*) 将对表中行的数目进行计数\n* count(column) 会略过值为null的列\n### tips\n*可以使用distinct关键字仅指定不同值的行.\n\t>select count(distinct column)  \n\t>.....\n# **分组数据**\n关键字:  \n### **Group by**\n* 根据指定的列来进行分组\n\t>select cID, count(*) as number\n\t>from Products\n\t>Group by cID;\n* 根据cID进行分组,返回cID以及相对应的数目\n* 除了聚集计算语句之外,select的每个字段必须为分组的依据(出现在group by之后)\n* group by 出现在where子句之后,order by之前.    \n### **Having**\n* 筛选分组\n* HAVING和WHERE的区别在于一个是在分组之前过滤(where,不符合条件的记录不参与分组),一个是在分组之后进行过滤(HAVING).\n# 联结 join\n* 等值联结,又称内联结 \n\t* inner join on\n\t* where ... ** = ** \n* \n\n\n\n\n","source":"_posts/SQL记录-二.md","raw":"---\ntitle: SQL记录(二)\ndate: 2017-07-31 21:27:57\ntags: \n- SQL\n- 数据库\n\n---\n\n# 聚集函数\n### MIN()\n### MAX()\n### AVG()\n### SUM()\n<!--more-->\n### COUNT() 函数\n* count(*) 将对表中行的数目进行计数\n* count(column) 会略过值为null的列\n### tips\n*可以使用distinct关键字仅指定不同值的行.\n\t>select count(distinct column)  \n\t>.....\n# **分组数据**\n关键字:  \n### **Group by**\n* 根据指定的列来进行分组\n\t>select cID, count(*) as number\n\t>from Products\n\t>Group by cID;\n* 根据cID进行分组,返回cID以及相对应的数目\n* 除了聚集计算语句之外,select的每个字段必须为分组的依据(出现在group by之后)\n* group by 出现在where子句之后,order by之前.    \n### **Having**\n* 筛选分组\n* HAVING和WHERE的区别在于一个是在分组之前过滤(where,不符合条件的记录不参与分组),一个是在分组之后进行过滤(HAVING).\n# 联结 join\n* 等值联结,又称内联结 \n\t* inner join on\n\t* where ... ** = ** \n* \n\n\n\n\n","slug":"SQL记录-二","published":1,"updated":"2017-08-02T14:50:22.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zo000ulq0hwgp84e9z","content":"<h1 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h1><h3 id=\"MIN\"><a href=\"#MIN\" class=\"headerlink\" title=\"MIN()\"></a>MIN()</h3><h3 id=\"MAX\"><a href=\"#MAX\" class=\"headerlink\" title=\"MAX()\"></a>MAX()</h3><h3 id=\"AVG\"><a href=\"#AVG\" class=\"headerlink\" title=\"AVG()\"></a>AVG()</h3><h3 id=\"SUM\"><a href=\"#SUM\" class=\"headerlink\" title=\"SUM()\"></a>SUM()</h3><a id=\"more\"></a>\n<h3 id=\"COUNT-函数\"><a href=\"#COUNT-函数\" class=\"headerlink\" title=\"COUNT() 函数\"></a>COUNT() 函数</h3><ul>\n<li>count(*) 将对表中行的数目进行计数</li>\n<li>count(column) 会略过值为null的列<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3>*可以使用distinct关键字仅指定不同值的行.<blockquote>\n<p>select count(distinct column)<br>…..</p>\n</blockquote>\n<h1 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a><strong>分组数据</strong></h1>关键字:  <h3 id=\"Group-by\"><a href=\"#Group-by\" class=\"headerlink\" title=\"Group by\"></a><strong>Group by</strong></h3></li>\n<li>根据指定的列来进行分组<blockquote>\n<p>select cID, count(*) as number<br>from Products<br>Group by cID;</p>\n</blockquote>\n</li>\n<li>根据cID进行分组,返回cID以及相对应的数目</li>\n<li>除了聚集计算语句之外,select的每个字段必须为分组的依据(出现在group by之后)</li>\n<li>group by 出现在where子句之后,order by之前.    <h3 id=\"Having\"><a href=\"#Having\" class=\"headerlink\" title=\"Having\"></a><strong>Having</strong></h3></li>\n<li>筛选分组</li>\n<li>HAVING和WHERE的区别在于一个是在分组之前过滤(where,不符合条件的记录不参与分组),一个是在分组之后进行过滤(HAVING).<h1 id=\"联结-join\"><a href=\"#联结-join\" class=\"headerlink\" title=\"联结 join\"></a>联结 join</h1></li>\n<li>等值联结,又称内联结 <ul>\n<li>inner join on</li>\n<li>where … <strong> = </strong> </li>\n</ul>\n</li>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h1><h3 id=\"MIN\"><a href=\"#MIN\" class=\"headerlink\" title=\"MIN()\"></a>MIN()</h3><h3 id=\"MAX\"><a href=\"#MAX\" class=\"headerlink\" title=\"MAX()\"></a>MAX()</h3><h3 id=\"AVG\"><a href=\"#AVG\" class=\"headerlink\" title=\"AVG()\"></a>AVG()</h3><h3 id=\"SUM\"><a href=\"#SUM\" class=\"headerlink\" title=\"SUM()\"></a>SUM()</h3>","more":"<h3 id=\"COUNT-函数\"><a href=\"#COUNT-函数\" class=\"headerlink\" title=\"COUNT() 函数\"></a>COUNT() 函数</h3><ul>\n<li>count(*) 将对表中行的数目进行计数</li>\n<li>count(column) 会略过值为null的列<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3>*可以使用distinct关键字仅指定不同值的行.<blockquote>\n<p>select count(distinct column)<br>…..</p>\n</blockquote>\n<h1 id=\"分组数据\"><a href=\"#分组数据\" class=\"headerlink\" title=\"分组数据\"></a><strong>分组数据</strong></h1>关键字:  <h3 id=\"Group-by\"><a href=\"#Group-by\" class=\"headerlink\" title=\"Group by\"></a><strong>Group by</strong></h3></li>\n<li>根据指定的列来进行分组<blockquote>\n<p>select cID, count(*) as number<br>from Products<br>Group by cID;</p>\n</blockquote>\n</li>\n<li>根据cID进行分组,返回cID以及相对应的数目</li>\n<li>除了聚集计算语句之外,select的每个字段必须为分组的依据(出现在group by之后)</li>\n<li>group by 出现在where子句之后,order by之前.    <h3 id=\"Having\"><a href=\"#Having\" class=\"headerlink\" title=\"Having\"></a><strong>Having</strong></h3></li>\n<li>筛选分组</li>\n<li>HAVING和WHERE的区别在于一个是在分组之前过滤(where,不符合条件的记录不参与分组),一个是在分组之后进行过滤(HAVING).<h1 id=\"联结-join\"><a href=\"#联结-join\" class=\"headerlink\" title=\"联结 join\"></a>联结 join</h1></li>\n<li>等值联结,又称内联结 <ul>\n<li>inner join on</li>\n<li>where … <strong> = </strong> </li>\n</ul>\n</li>\n<li></li>\n</ul>"},{"title":"SQL记录(一)","date":"2017-07-17T12:28:17.000Z","_content":"* distinct关键字\n\n\t* 通过distinct让数据库只返回不同的数值,注意,当查询多列数字时,只有当所有列内容相同才会视其为相同的数值.\n\t* 使用时,将distinct关键字置于列名之前.\n<!--more-->\n* order by 排序\n\t* 应该保证order by子句是select语句中的最后一条子句,否则将会报错.\n\t* 可以使用非选择的列进行排序\n\t* 可以选择按照多个列进行排序,排序优先级按照出现顺序,也就是说先按照a条件排序,当a条件相同时在按照b条件进行进一步的排序.\n\t* desc 逆序排列,注意此关键字只作用在其指定的列上(与之不同的是distinct关键字,它作用于选择的所有列上),也就是说,如果按照两列的逆序排列的话,你需要分别在这两列列名后使用desc\n* where 筛选\n\t* 范围值检查,使用between and操作符\n\t* 空值检查\n\t\t* IS NULL子句(注意,不能够使用 =NULL)\n\t\t* 空值指的是NULL,而非存在值但是值为0\n\t* AND OR关键字\n\t\t* 注意两者的求值顺序,总是使用括号来显示指定求值顺序\n\t* IN (... , ...)\n\t\t* 实现与OR操作符类似的功能\n\t* NOT\n\t\t* 进行否定,一般多用于 NOT IN()\n* LIKE操作符\n\t* 通配符搜索只能用于文本字段\n\t* % 通配符\n\t\t* 表示任何字符出现任何次数(包含0次)\n\t* _ \n\t\t* 仅匹配单个字符\n\t* []\n\t\t* 指定字符集,与正则表达式类似,只是它总是刚好匹配指定字符集之中的一个字符.例如[JM],使用[^JM]表示除了JM之外的任一字符.\n* 计算字段\n\t* 拼接字段\n\t\t* + 连接\n\t\t* || 连接\n\t* TRIM()/LTRIM()/RTRIM()函数:去除空格\n\t* 算术计算\n* AS 别名\n\t* 将计算字段或者某一个已有的字段(即列)重命名为其他值并且返回\n","source":"_posts/SQL记录.md","raw":"---\ntitle: SQL记录(一)\ndate: 2017-07-17 20:28:17\ntags:\n- SQL\n- 数据库\n\n---\n* distinct关键字\n\n\t* 通过distinct让数据库只返回不同的数值,注意,当查询多列数字时,只有当所有列内容相同才会视其为相同的数值.\n\t* 使用时,将distinct关键字置于列名之前.\n<!--more-->\n* order by 排序\n\t* 应该保证order by子句是select语句中的最后一条子句,否则将会报错.\n\t* 可以使用非选择的列进行排序\n\t* 可以选择按照多个列进行排序,排序优先级按照出现顺序,也就是说先按照a条件排序,当a条件相同时在按照b条件进行进一步的排序.\n\t* desc 逆序排列,注意此关键字只作用在其指定的列上(与之不同的是distinct关键字,它作用于选择的所有列上),也就是说,如果按照两列的逆序排列的话,你需要分别在这两列列名后使用desc\n* where 筛选\n\t* 范围值检查,使用between and操作符\n\t* 空值检查\n\t\t* IS NULL子句(注意,不能够使用 =NULL)\n\t\t* 空值指的是NULL,而非存在值但是值为0\n\t* AND OR关键字\n\t\t* 注意两者的求值顺序,总是使用括号来显示指定求值顺序\n\t* IN (... , ...)\n\t\t* 实现与OR操作符类似的功能\n\t* NOT\n\t\t* 进行否定,一般多用于 NOT IN()\n* LIKE操作符\n\t* 通配符搜索只能用于文本字段\n\t* % 通配符\n\t\t* 表示任何字符出现任何次数(包含0次)\n\t* _ \n\t\t* 仅匹配单个字符\n\t* []\n\t\t* 指定字符集,与正则表达式类似,只是它总是刚好匹配指定字符集之中的一个字符.例如[JM],使用[^JM]表示除了JM之外的任一字符.\n* 计算字段\n\t* 拼接字段\n\t\t* + 连接\n\t\t* || 连接\n\t* TRIM()/LTRIM()/RTRIM()函数:去除空格\n\t* 算术计算\n* AS 别名\n\t* 将计算字段或者某一个已有的字段(即列)重命名为其他值并且返回\n","slug":"SQL记录","published":1,"updated":"2017-07-17T14:35:15.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zp000xlq0hlpdsts5a","content":"<ul>\n<li><p>distinct关键字</p>\n<ul>\n<li>通过distinct让数据库只返回不同的数值,注意,当查询多列数字时,只有当所有列内容相同才会视其为相同的数值.</li>\n<li>使用时,将distinct关键字置于列名之前.<a id=\"more\"></a></li>\n</ul>\n</li>\n<li>order by 排序<ul>\n<li>应该保证order by子句是select语句中的最后一条子句,否则将会报错.</li>\n<li>可以使用非选择的列进行排序</li>\n<li>可以选择按照多个列进行排序,排序优先级按照出现顺序,也就是说先按照a条件排序,当a条件相同时在按照b条件进行进一步的排序.</li>\n<li>desc 逆序排列,注意此关键字只作用在其指定的列上(与之不同的是distinct关键字,它作用于选择的所有列上),也就是说,如果按照两列的逆序排列的话,你需要分别在这两列列名后使用desc</li>\n</ul>\n</li>\n<li>where 筛选<ul>\n<li>范围值检查,使用between and操作符</li>\n<li>空值检查<ul>\n<li>IS NULL子句(注意,不能够使用 =NULL)</li>\n<li>空值指的是NULL,而非存在值但是值为0</li>\n</ul>\n</li>\n<li>AND OR关键字<ul>\n<li>注意两者的求值顺序,总是使用括号来显示指定求值顺序</li>\n</ul>\n</li>\n<li>IN (… , …)<ul>\n<li>实现与OR操作符类似的功能</li>\n</ul>\n</li>\n<li>NOT<ul>\n<li>进行否定,一般多用于 NOT IN()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>LIKE操作符<ul>\n<li>通配符搜索只能用于文本字段</li>\n<li>% 通配符<ul>\n<li>表示任何字符出现任何次数(包含0次)</li>\n</ul>\n</li>\n<li>_ <ul>\n<li>仅匹配单个字符</li>\n</ul>\n</li>\n<li>[]<ul>\n<li>指定字符集,与正则表达式类似,只是它总是刚好匹配指定字符集之中的一个字符.例如[JM],使用[^JM]表示除了JM之外的任一字符.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>计算字段<ul>\n<li>拼接字段<ul>\n<li><ul>\n<li>连接</li>\n</ul>\n</li>\n<li>|| 连接</li>\n</ul>\n</li>\n<li>TRIM()/LTRIM()/RTRIM()函数:去除空格</li>\n<li>算术计算</li>\n</ul>\n</li>\n<li>AS 别名<ul>\n<li>将计算字段或者某一个已有的字段(即列)重命名为其他值并且返回</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>distinct关键字</p>\n<ul>\n<li>通过distinct让数据库只返回不同的数值,注意,当查询多列数字时,只有当所有列内容相同才会视其为相同的数值.</li>\n<li>使用时,将distinct关键字置于列名之前.","more":"</li>\n</ul>\n</li>\n<li>order by 排序<ul>\n<li>应该保证order by子句是select语句中的最后一条子句,否则将会报错.</li>\n<li>可以使用非选择的列进行排序</li>\n<li>可以选择按照多个列进行排序,排序优先级按照出现顺序,也就是说先按照a条件排序,当a条件相同时在按照b条件进行进一步的排序.</li>\n<li>desc 逆序排列,注意此关键字只作用在其指定的列上(与之不同的是distinct关键字,它作用于选择的所有列上),也就是说,如果按照两列的逆序排列的话,你需要分别在这两列列名后使用desc</li>\n</ul>\n</li>\n<li>where 筛选<ul>\n<li>范围值检查,使用between and操作符</li>\n<li>空值检查<ul>\n<li>IS NULL子句(注意,不能够使用 =NULL)</li>\n<li>空值指的是NULL,而非存在值但是值为0</li>\n</ul>\n</li>\n<li>AND OR关键字<ul>\n<li>注意两者的求值顺序,总是使用括号来显示指定求值顺序</li>\n</ul>\n</li>\n<li>IN (… , …)<ul>\n<li>实现与OR操作符类似的功能</li>\n</ul>\n</li>\n<li>NOT<ul>\n<li>进行否定,一般多用于 NOT IN()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>LIKE操作符<ul>\n<li>通配符搜索只能用于文本字段</li>\n<li>% 通配符<ul>\n<li>表示任何字符出现任何次数(包含0次)</li>\n</ul>\n</li>\n<li>_ <ul>\n<li>仅匹配单个字符</li>\n</ul>\n</li>\n<li>[]<ul>\n<li>指定字符集,与正则表达式类似,只是它总是刚好匹配指定字符集之中的一个字符.例如[JM],使用[^JM]表示除了JM之外的任一字符.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>计算字段<ul>\n<li>拼接字段<ul>\n<li><ul>\n<li>连接</li>\n</ul>\n</li>\n<li>|| 连接</li>\n</ul>\n</li>\n<li>TRIM()/LTRIM()/RTRIM()函数:去除空格</li>\n<li>算术计算</li>\n</ul>\n</li>\n<li>AS 别名<ul>\n<li>将计算字段或者某一个已有的字段(即列)重命名为其他值并且返回</li>\n</ul>\n</li>\n</ul>"},{"title":"Service","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## Service\n### 基本用法\n#### 和Activity进行通信\n1. 继承Binder对象\n\n\t    public class DownloadBinder extends Binder{\n        int count = 0;\n        Handler handler;\n        public void setHandler(Handler handler) {\n            this.handler = handler;\n        }\n        public void startDownload() {\n\n        }\n    }\n2. 继承Service，Override onBind函数,新增成员：DownloadBinder。\n\n\t\tpublic class MyService extends Service {\n\t\t    DownloadBinder downloadBinder = new DownloadBinder();\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public IBinder onBind(Intent intent) {\n\t\t        return downloadBinder;\n\t\t    }\n\t\t}\n\n3. Activity中，连接时获得DownloadBinder实例，这样就可以通过Binder来与Service进行通信。\n\n\t    ServiceConnection connection = new ServiceConnection() {\n\t        @Override\n\t        public void onServiceConnected(ComponentName name, IBinder service) {\n\t            binder = (MyService.DownloadBinder) service;\n\t            binder.setHandler(handler);\n\t            binder.startDownload();\n\t        }\n\t\n\t        @Override\n\t        public void onServiceDisconnected(ComponentName name) {\n\t        \n\t        }};\n4. 绑定service\n\n                Intent intent = new Intent(ServiceLearnActivity.this, MyService.class);\n                bindService(intent, connection, BIND_AUTO_CREATE);\n\n\n#### 生命周期\n* startService方法调用时，启动相应的服务，如果服务之前没有创建，那么会先回调onCreate方法，接下来回调onStartCommand方法。\n* 每个服务只会存在一个实例。\n* bindService方法：回调onBind方法：如果服务之前还没有创建，那么会先回调onCreate方法。","source":"_posts/Service.md","raw":"title: Service\ndate: 2016-09-26\ntags:\n- android\n- 第一行代码\n\n---\n<font style=\"font-family:微软雅黑\">\n## Service\n### 基本用法\n#### 和Activity进行通信\n1. 继承Binder对象\n\n\t    public class DownloadBinder extends Binder{\n        int count = 0;\n        Handler handler;\n        public void setHandler(Handler handler) {\n            this.handler = handler;\n        }\n        public void startDownload() {\n\n        }\n    }\n2. 继承Service，Override onBind函数,新增成员：DownloadBinder。\n\n\t\tpublic class MyService extends Service {\n\t\t    DownloadBinder downloadBinder = new DownloadBinder();\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public IBinder onBind(Intent intent) {\n\t\t        return downloadBinder;\n\t\t    }\n\t\t}\n\n3. Activity中，连接时获得DownloadBinder实例，这样就可以通过Binder来与Service进行通信。\n\n\t    ServiceConnection connection = new ServiceConnection() {\n\t        @Override\n\t        public void onServiceConnected(ComponentName name, IBinder service) {\n\t            binder = (MyService.DownloadBinder) service;\n\t            binder.setHandler(handler);\n\t            binder.startDownload();\n\t        }\n\t\n\t        @Override\n\t        public void onServiceDisconnected(ComponentName name) {\n\t        \n\t        }};\n4. 绑定service\n\n                Intent intent = new Intent(ServiceLearnActivity.this, MyService.class);\n                bindService(intent, connection, BIND_AUTO_CREATE);\n\n\n#### 生命周期\n* startService方法调用时，启动相应的服务，如果服务之前没有创建，那么会先回调onCreate方法，接下来回调onStartCommand方法。\n* 每个服务只会存在一个实例。\n* bindService方法：回调onBind方法：如果服务之前还没有创建，那么会先回调onCreate方法。","slug":"Service","published":1,"updated":"2016-09-26T08:58:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zr000zlq0hd0vs5w8b","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><h4 id=\"和Activity进行通信\"><a href=\"#和Activity进行通信\" class=\"headerlink\" title=\"和Activity进行通信\"></a>和Activity进行通信</h4><ol>\n<li><p>继承Binder对象</p>\n<pre><code>public class DownloadBinder extends Binder{\nint count = 0;\nHandler handler;\npublic void setHandler(Handler handler) {\n    this.handler = handler;\n}\npublic void startDownload() {\n\n}\n</code></pre><p> }</p>\n</li>\n<li><p>继承Service，Override onBind函数,新增成员：DownloadBinder。</p>\n<pre><code>public class MyService extends Service {\n    DownloadBinder downloadBinder = new DownloadBinder();\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return downloadBinder;\n    }\n}\n</code></pre></li>\n<li><p>Activity中，连接时获得DownloadBinder实例，这样就可以通过Binder来与Service进行通信。</p>\n<pre><code>ServiceConnection connection = new ServiceConnection() {\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        binder = (MyService.DownloadBinder) service;\n        binder.setHandler(handler);\n        binder.startDownload();\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n\n    }};\n</code></pre></li>\n<li><p>绑定service</p>\n<pre><code>Intent intent = new Intent(ServiceLearnActivity.this, MyService.class);\nbindService(intent, connection, BIND_AUTO_CREATE);\n</code></pre></li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>startService方法调用时，启动相应的服务，如果服务之前没有创建，那么会先回调onCreate方法，接下来回调onStartCommand方法。</li>\n<li>每个服务只会存在一个实例。</li>\n<li>bindService方法：回调onBind方法：如果服务之前还没有创建，那么会先回调onCreate方法。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><h4 id=\"和Activity进行通信\"><a href=\"#和Activity进行通信\" class=\"headerlink\" title=\"和Activity进行通信\"></a>和Activity进行通信</h4><ol>\n<li><p>继承Binder对象</p>\n<pre><code>public class DownloadBinder extends Binder{\nint count = 0;\nHandler handler;\npublic void setHandler(Handler handler) {\n    this.handler = handler;\n}\npublic void startDownload() {\n\n}\n</code></pre><p> }</p>\n</li>\n<li><p>继承Service，Override onBind函数,新增成员：DownloadBinder。</p>\n<pre><code>public class MyService extends Service {\n    DownloadBinder downloadBinder = new DownloadBinder();\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return downloadBinder;\n    }\n}\n</code></pre></li>\n<li><p>Activity中，连接时获得DownloadBinder实例，这样就可以通过Binder来与Service进行通信。</p>\n<pre><code>ServiceConnection connection = new ServiceConnection() {\n    @Override\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        binder = (MyService.DownloadBinder) service;\n        binder.setHandler(handler);\n        binder.startDownload();\n    }\n\n    @Override\n    public void onServiceDisconnected(ComponentName name) {\n\n    }};\n</code></pre></li>\n<li><p>绑定service</p>\n<pre><code>Intent intent = new Intent(ServiceLearnActivity.this, MyService.class);\nbindService(intent, connection, BIND_AUTO_CREATE);\n</code></pre></li>\n</ol>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>startService方法调用时，启动相应的服务，如果服务之前没有创建，那么会先回调onCreate方法，接下来回调onStartCommand方法。</li>\n<li>每个服务只会存在一个实例。</li>\n<li>bindService方法：回调onBind方法：如果服务之前还没有创建，那么会先回调onCreate方法。</li>\n</ul>\n"},{"title":"UI","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## TextView\n* android:gravity\n> top bottom left right等等，指定对齐方向\n\n* match\\_parent\n* fill\\_parent \n* wrap_content\n\n## EditText\nmaxLine\n## ImageView\n                imageView.setImageResource(R.mipmap.abc);\n## visible invisible gone属性\n* visible 可见\n* invisible 不可见但是还存在\n* gone 不可见不存在\n* View setVisibilty() View.gone ...\n## AlertDialog\n\tAlertDialog.Builder builder = new AlertDialog.Builder(UIActivity.this);\n                builder.setTitle(\"AlertDialogTitle\");\n                builder.setCancelable(false);\n                builder.setMessage(\"some message\");\n                builder.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n\n                    }\n                });\n                builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n\n                    }\n                });\n                builder.show();\n## LinearLayout\n* 指定方向，要注意如果是水平方向的话，则内部控件的宽度不能够是match_parent的不然会充满整个布局，同理竖直方向也是类似的。\n* android:layout_gravity属性：正如TextView中gravity表示文本内容占据整个宽度的位置，这个属性指的是控件在LinearLayout中的相对位置，而且，当外层layout是竖直布局时在其上的关于竖直的设置是不会生效的。注意，这个属性亦是属于子布局里面的而不是属于LinearLayout（要指定的是每一个不同的子布局）。\n* android:layout\\_weight属性：系统会先把 LinearLayout 下所有控件指定的 layout\\_weight 值相加， 得到一个总值，然后每个控件所占大小的比例就是用该控件的 layout_weight 值除以刚才算出的总值。\n* 布局中的如果只有部分控件有weight属性，则有weight属性的控件共享剩下的宽度或者高度（按照比例分配）。\n\n## RelativeLayout 相对布局\n\n## dp和sp\n在编写 Android 程序的时候，尽量将控件或布局的大小指定成 match_parent\n或 wrap_content，如果必须要指定一个固定值，则使用 dp 来作为单位，指定文字大小的时候\n使用 sp 作为单位。","source":"_posts/UI.md","raw":"title: UI\ndate: 2016-09-26\ntags:\n- android\n \n---\n<font style=\"font-family:微软雅黑\">\n## TextView\n* android:gravity\n> top bottom left right等等，指定对齐方向\n\n* match\\_parent\n* fill\\_parent \n* wrap_content\n\n## EditText\nmaxLine\n## ImageView\n                imageView.setImageResource(R.mipmap.abc);\n## visible invisible gone属性\n* visible 可见\n* invisible 不可见但是还存在\n* gone 不可见不存在\n* View setVisibilty() View.gone ...\n## AlertDialog\n\tAlertDialog.Builder builder = new AlertDialog.Builder(UIActivity.this);\n                builder.setTitle(\"AlertDialogTitle\");\n                builder.setCancelable(false);\n                builder.setMessage(\"some message\");\n                builder.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n\n                    }\n                });\n                builder.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n\n                    }\n                });\n                builder.show();\n## LinearLayout\n* 指定方向，要注意如果是水平方向的话，则内部控件的宽度不能够是match_parent的不然会充满整个布局，同理竖直方向也是类似的。\n* android:layout_gravity属性：正如TextView中gravity表示文本内容占据整个宽度的位置，这个属性指的是控件在LinearLayout中的相对位置，而且，当外层layout是竖直布局时在其上的关于竖直的设置是不会生效的。注意，这个属性亦是属于子布局里面的而不是属于LinearLayout（要指定的是每一个不同的子布局）。\n* android:layout\\_weight属性：系统会先把 LinearLayout 下所有控件指定的 layout\\_weight 值相加， 得到一个总值，然后每个控件所占大小的比例就是用该控件的 layout_weight 值除以刚才算出的总值。\n* 布局中的如果只有部分控件有weight属性，则有weight属性的控件共享剩下的宽度或者高度（按照比例分配）。\n\n## RelativeLayout 相对布局\n\n## dp和sp\n在编写 Android 程序的时候，尽量将控件或布局的大小指定成 match_parent\n或 wrap_content，如果必须要指定一个固定值，则使用 dp 来作为单位，指定文字大小的时候\n使用 sp 作为单位。","slug":"UI","published":1,"updated":"2018-07-01T08:34:45.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zs0011lq0hkukzr29o","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h2><ul>\n<li><p>android:gravity</p>\n<blockquote>\n<p>top bottom left right等等，指定对齐方向</p>\n</blockquote>\n</li>\n<li><p>match_parent</p>\n</li>\n<li>fill_parent </li>\n<li>wrap_content</li>\n</ul>\n<h2 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h2><p>maxLine</p>\n<h2 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h2><pre><code>imageView.setImageResource(R.mipmap.abc);\n</code></pre><h2 id=\"visible-invisible-gone属性\"><a href=\"#visible-invisible-gone属性\" class=\"headerlink\" title=\"visible invisible gone属性\"></a>visible invisible gone属性</h2><ul>\n<li>visible 可见</li>\n<li>invisible 不可见但是还存在</li>\n<li>gone 不可见不存在</li>\n<li><p>View setVisibilty() View.gone …</p>\n<h2 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h2><p>  AlertDialog.Builder builder = new AlertDialog.Builder(UIActivity.this);</p>\n<pre><code>builder.setTitle(&quot;AlertDialogTitle&quot;);\nbuilder.setCancelable(false);\nbuilder.setMessage(&quot;some message&quot;);\nbuilder.setPositiveButton(&quot;Yes&quot;, new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n\n    }\n});\nbuilder.setNegativeButton(&quot;No&quot;, new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n\n    }\n});\nbuilder.show();\n</code></pre><h2 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h2></li>\n<li>指定方向，要注意如果是水平方向的话，则内部控件的宽度不能够是match_parent的不然会充满整个布局，同理竖直方向也是类似的。</li>\n<li>android:layout_gravity属性：正如TextView中gravity表示文本内容占据整个宽度的位置，这个属性指的是控件在LinearLayout中的相对位置，而且，当外层layout是竖直布局时在其上的关于竖直的设置是不会生效的。注意，这个属性亦是属于子布局里面的而不是属于LinearLayout（要指定的是每一个不同的子布局）。</li>\n<li>android:layout_weight属性：系统会先把 LinearLayout 下所有控件指定的 layout_weight 值相加， 得到一个总值，然后每个控件所占大小的比例就是用该控件的 layout_weight 值除以刚才算出的总值。</li>\n<li>布局中的如果只有部分控件有weight属性，则有weight属性的控件共享剩下的宽度或者高度（按照比例分配）。</li>\n</ul>\n<h2 id=\"RelativeLayout-相对布局\"><a href=\"#RelativeLayout-相对布局\" class=\"headerlink\" title=\"RelativeLayout 相对布局\"></a>RelativeLayout 相对布局</h2><h2 id=\"dp和sp\"><a href=\"#dp和sp\" class=\"headerlink\" title=\"dp和sp\"></a>dp和sp</h2><p>在编写 Android 程序的时候，尽量将控件或布局的大小指定成 match_parent<br>或 wrap_content，如果必须要指定一个固定值，则使用 dp 来作为单位，指定文字大小的时候<br>使用 sp 作为单位。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h2><ul>\n<li><p>android:gravity</p>\n<blockquote>\n<p>top bottom left right等等，指定对齐方向</p>\n</blockquote>\n</li>\n<li><p>match_parent</p>\n</li>\n<li>fill_parent </li>\n<li>wrap_content</li>\n</ul>\n<h2 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h2><p>maxLine</p>\n<h2 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h2><pre><code>imageView.setImageResource(R.mipmap.abc);\n</code></pre><h2 id=\"visible-invisible-gone属性\"><a href=\"#visible-invisible-gone属性\" class=\"headerlink\" title=\"visible invisible gone属性\"></a>visible invisible gone属性</h2><ul>\n<li>visible 可见</li>\n<li>invisible 不可见但是还存在</li>\n<li>gone 不可见不存在</li>\n<li><p>View setVisibilty() View.gone …</p>\n<h2 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h2><p>  AlertDialog.Builder builder = new AlertDialog.Builder(UIActivity.this);</p>\n<pre><code>builder.setTitle(&quot;AlertDialogTitle&quot;);\nbuilder.setCancelable(false);\nbuilder.setMessage(&quot;some message&quot;);\nbuilder.setPositiveButton(&quot;Yes&quot;, new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n\n    }\n});\nbuilder.setNegativeButton(&quot;No&quot;, new DialogInterface.OnClickListener() {\n    @Override\n    public void onClick(DialogInterface dialog, int which) {\n\n    }\n});\nbuilder.show();\n</code></pre><h2 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h2></li>\n<li>指定方向，要注意如果是水平方向的话，则内部控件的宽度不能够是match_parent的不然会充满整个布局，同理竖直方向也是类似的。</li>\n<li>android:layout_gravity属性：正如TextView中gravity表示文本内容占据整个宽度的位置，这个属性指的是控件在LinearLayout中的相对位置，而且，当外层layout是竖直布局时在其上的关于竖直的设置是不会生效的。注意，这个属性亦是属于子布局里面的而不是属于LinearLayout（要指定的是每一个不同的子布局）。</li>\n<li>android:layout_weight属性：系统会先把 LinearLayout 下所有控件指定的 layout_weight 值相加， 得到一个总值，然后每个控件所占大小的比例就是用该控件的 layout_weight 值除以刚才算出的总值。</li>\n<li>布局中的如果只有部分控件有weight属性，则有weight属性的控件共享剩下的宽度或者高度（按照比例分配）。</li>\n</ul>\n<h2 id=\"RelativeLayout-相对布局\"><a href=\"#RelativeLayout-相对布局\" class=\"headerlink\" title=\"RelativeLayout 相对布局\"></a>RelativeLayout 相对布局</h2><h2 id=\"dp和sp\"><a href=\"#dp和sp\" class=\"headerlink\" title=\"dp和sp\"></a>dp和sp</h2><p>在编写 Android 程序的时候，尽量将控件或布局的大小指定成 match_parent<br>或 wrap_content，如果必须要指定一个固定值，则使用 dp 来作为单位，指定文字大小的时候<br>使用 sp 作为单位。</p>\n"},{"title":"View","date":"2016-09-25T16:00:00.000Z","_content":"## 追踪手指在滑动过程中的速度\n\t@Override\n\t    public boolean onTouchEvent(MotionEvent event) {\n\t        VelocityTracker velocityTracker = VelocityTracker.obtain();\n\t        velocityTracker.addMovement(event);\n\t        velocityTracker.computeCurrentVelocity(1000);\n\t        int x = (int)velocityTracker.getXVelocity();\n\t        int y = (int)velocityTracker.getYVelocity();\n\t\n\t        Log.d(W, \"x:\" + x + \",y:\" + y);\n\t        return super.onTouchEvent(event);\n\t    }\n\n## 检测手势行为\n\n\timplements GestureDetector.OnGestureListener\n\n\t\t@Override\n\t    public boolean onTouchEvent(MotionEvent event) {\t\n\t        boolean consume = gestureDetector.onTouchEvent(event);\n\t        return consume;\n\t    }\n## 滑动\n### scrollTo&&scrollerBy\n### 使用动画\n### 改变布局参数\n\n\n    public void onClick(View v) {\n        ViewGroup.MarginLayoutParams marginLayoutParams =\n                (ViewGroup.MarginLayoutParams)button.getLayoutParams();\n        Log.d(W, \"layout\");\n        marginLayoutParams.width += 100;\n        marginLayoutParams.leftMargin += 100;\n        button.requestLayout();\n    }","source":"_posts/View.md","raw":"title: View\ndate: 2016-09-26\ntags:\n- android\n \n---\n## 追踪手指在滑动过程中的速度\n\t@Override\n\t    public boolean onTouchEvent(MotionEvent event) {\n\t        VelocityTracker velocityTracker = VelocityTracker.obtain();\n\t        velocityTracker.addMovement(event);\n\t        velocityTracker.computeCurrentVelocity(1000);\n\t        int x = (int)velocityTracker.getXVelocity();\n\t        int y = (int)velocityTracker.getYVelocity();\n\t\n\t        Log.d(W, \"x:\" + x + \",y:\" + y);\n\t        return super.onTouchEvent(event);\n\t    }\n\n## 检测手势行为\n\n\timplements GestureDetector.OnGestureListener\n\n\t\t@Override\n\t    public boolean onTouchEvent(MotionEvent event) {\t\n\t        boolean consume = gestureDetector.onTouchEvent(event);\n\t        return consume;\n\t    }\n## 滑动\n### scrollTo&&scrollerBy\n### 使用动画\n### 改变布局参数\n\n\n    public void onClick(View v) {\n        ViewGroup.MarginLayoutParams marginLayoutParams =\n                (ViewGroup.MarginLayoutParams)button.getLayoutParams();\n        Log.d(W, \"layout\");\n        marginLayoutParams.width += 100;\n        marginLayoutParams.leftMargin += 100;\n        button.requestLayout();\n    }","slug":"View","published":1,"updated":"2018-07-01T08:34:39.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zt0014lq0h08hmymk9","content":"<h2 id=\"追踪手指在滑动过程中的速度\"><a href=\"#追踪手指在滑动过程中的速度\" class=\"headerlink\" title=\"追踪手指在滑动过程中的速度\"></a>追踪手指在滑动过程中的速度</h2><pre><code>@Override\n    public boolean onTouchEvent(MotionEvent event) {\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n        velocityTracker.computeCurrentVelocity(1000);\n        int x = (int)velocityTracker.getXVelocity();\n        int y = (int)velocityTracker.getYVelocity();\n\n        Log.d(W, &quot;x:&quot; + x + &quot;,y:&quot; + y);\n        return super.onTouchEvent(event);\n    }\n</code></pre><h2 id=\"检测手势行为\"><a href=\"#检测手势行为\" class=\"headerlink\" title=\"检测手势行为\"></a>检测手势行为</h2><pre><code>implements GestureDetector.OnGestureListener\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {    \n        boolean consume = gestureDetector.onTouchEvent(event);\n        return consume;\n    }\n</code></pre><h2 id=\"滑动\"><a href=\"#滑动\" class=\"headerlink\" title=\"滑动\"></a>滑动</h2><h3 id=\"scrollTo-amp-amp-scrollerBy\"><a href=\"#scrollTo-amp-amp-scrollerBy\" class=\"headerlink\" title=\"scrollTo&amp;&amp;scrollerBy\"></a>scrollTo&amp;&amp;scrollerBy</h3><h3 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h3><h3 id=\"改变布局参数\"><a href=\"#改变布局参数\" class=\"headerlink\" title=\"改变布局参数\"></a>改变布局参数</h3><pre><code>public void onClick(View v) {\n    ViewGroup.MarginLayoutParams marginLayoutParams =\n            (ViewGroup.MarginLayoutParams)button.getLayoutParams();\n    Log.d(W, &quot;layout&quot;);\n    marginLayoutParams.width += 100;\n    marginLayoutParams.leftMargin += 100;\n    button.requestLayout();\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"追踪手指在滑动过程中的速度\"><a href=\"#追踪手指在滑动过程中的速度\" class=\"headerlink\" title=\"追踪手指在滑动过程中的速度\"></a>追踪手指在滑动过程中的速度</h2><pre><code>@Override\n    public boolean onTouchEvent(MotionEvent event) {\n        VelocityTracker velocityTracker = VelocityTracker.obtain();\n        velocityTracker.addMovement(event);\n        velocityTracker.computeCurrentVelocity(1000);\n        int x = (int)velocityTracker.getXVelocity();\n        int y = (int)velocityTracker.getYVelocity();\n\n        Log.d(W, &quot;x:&quot; + x + &quot;,y:&quot; + y);\n        return super.onTouchEvent(event);\n    }\n</code></pre><h2 id=\"检测手势行为\"><a href=\"#检测手势行为\" class=\"headerlink\" title=\"检测手势行为\"></a>检测手势行为</h2><pre><code>implements GestureDetector.OnGestureListener\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {    \n        boolean consume = gestureDetector.onTouchEvent(event);\n        return consume;\n    }\n</code></pre><h2 id=\"滑动\"><a href=\"#滑动\" class=\"headerlink\" title=\"滑动\"></a>滑动</h2><h3 id=\"scrollTo-amp-amp-scrollerBy\"><a href=\"#scrollTo-amp-amp-scrollerBy\" class=\"headerlink\" title=\"scrollTo&amp;&amp;scrollerBy\"></a>scrollTo&amp;&amp;scrollerBy</h3><h3 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h3><h3 id=\"改变布局参数\"><a href=\"#改变布局参数\" class=\"headerlink\" title=\"改变布局参数\"></a>改变布局参数</h3><pre><code>public void onClick(View v) {\n    ViewGroup.MarginLayoutParams marginLayoutParams =\n            (ViewGroup.MarginLayoutParams)button.getLayoutParams();\n    Log.d(W, &quot;layout&quot;);\n    marginLayoutParams.width += 100;\n    marginLayoutParams.leftMargin += 100;\n    button.requestLayout();\n}\n</code></pre>"},{"title":"android动画简介","date":"2016-10-10T11:35:56.000Z","_content":"### ViewAnimation\n#### **视图动画**\n#### 基类是Animation，包含的子类有\n* AlphaAnimation 透明度动画\n* TranslateAnimation 平移动画\n* ScaleAnimation 缩放动画\n* RotateAnimation 旋转动画\n* AnimationSet 动画集合\n<!--more-->\n#### 定义方法\n* java代码\n* xml文件定义  \n\t* xml文件\n\t\t>  res->anim->view_alpha.xml\n\t \n\t* java文件  \n\n\t\t\tAnimation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.view_alpha); \n<!--more-->\n### **PropertyAnimation**属性动画\n\n* [google官方api](https://developer.android.com/guide/topics/graphics/prop-animation.html)\n#### 与视图动画的区别\n* 视图动画比较局限,仅能够修改view对象,局限于view对象的一些特定属性:例如scale,alpha等.\n* 视图动画仅仅是修改了view绘制的地方而非view本身的属性.(在你移动一个按钮到新的位置时,点击新的位置的按钮并不能够触发事件监听)\n#### ValueAnimator\n* 使用:\n\n\t\tValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\n\t\tanimation.setDuration(1000);\n\t\tanimation.start();\n\t* 一般不直接使用这个,因为其只能够修改值而不能够将其值作用于目标上,这个类一般是作为下面的ObjectAnimator的内部实现.\n\t* 常用的几个方法为ofFloat ofInt ofArgb ofObject.\n\t* ofObject时需要传递实现了TypeEvaluator接口的类以提供计算方法.[TypeEvaluator文档](https://developer.android.com/reference/android/animation/TypeEvaluator.html)\n#### ObjectAnimator\n* 使用:\n\n\t\tObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\n\t\tanim.setDuration(1000);\n\t\tanim.start();\n\t* 常用的方法与ValueAnimator相同\n\t* 第一个参数是target,即需要进行操作的类\n\t* 第二个参数是property,target类中存在的变量,需要有setter方法,当setter方法不存在时:\n\t\t* 添加方法\n\t\t* 使用包装类\n\t\t* 使用valueAnimator类\n\t* 注意,有时候可能需要在动画的update监听器当中调用view的invalidate()方法来进行页面的重画.\n* tips\n\t* 通过调用addListener添加动画监听器\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-20/36491693.jpg)\n\t\t* 由于AnimatorListener需要实现的方法较多,所以google提供了另外一个实现了AnimatorListener接口的抽象类AnimatorListenerAdapter,你只需要实现这个类里面的某个方法即可(当你仅仅需要监听其中的某个方法的时候),其他方法默认为空实现.\n#### xml定义动画\n* 定义在res下的animator文件夹中\n\t\t\n\t\t<set android:ordering=\"sequentially\">\n\t\t    <set>\n\t\t        <objectAnimator\n\t\t            android:propertyName=\"x\"\n\t\t            android:duration=\"500\"\n\t\t            android:valueTo=\"400\"\n\t\t            android:valueType=\"intType\"/>\n\t\t        <objectAnimator\n\t\t            android:propertyName=\"y\"\n\t\t            android:duration=\"500\"\n\t\t            android:valueTo=\"300\"\n\t\t            android:valueType=\"intType\"/>\n\t\t    </set>\n\t\t    <objectAnimator\n\t\t        android:propertyName=\"alpha\"\n\t\t        android:duration=\"500\"\n\t\t        android:valueTo=\"1f\"/>\n\t\t</set>\n* java代码\n\t\t\n\t\tAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n\t\t    R.anim.property_animator);\n\t\tset.setTarget(myObject);\n\t\tset.start();\n#### 还未涉及到的...\n* animatorset 动画集合的使用\n* xml定义动画的具体使用:当valueType时的处理方法","source":"_posts/android动画简介.md","raw":"---\ntitle: android动画简介\ndate: 2016-10-10 19:35:56\ntags:\n- android\n\n---\n### ViewAnimation\n#### **视图动画**\n#### 基类是Animation，包含的子类有\n* AlphaAnimation 透明度动画\n* TranslateAnimation 平移动画\n* ScaleAnimation 缩放动画\n* RotateAnimation 旋转动画\n* AnimationSet 动画集合\n<!--more-->\n#### 定义方法\n* java代码\n* xml文件定义  \n\t* xml文件\n\t\t>  res->anim->view_alpha.xml\n\t \n\t* java文件  \n\n\t\t\tAnimation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.view_alpha); \n<!--more-->\n### **PropertyAnimation**属性动画\n\n* [google官方api](https://developer.android.com/guide/topics/graphics/prop-animation.html)\n#### 与视图动画的区别\n* 视图动画比较局限,仅能够修改view对象,局限于view对象的一些特定属性:例如scale,alpha等.\n* 视图动画仅仅是修改了view绘制的地方而非view本身的属性.(在你移动一个按钮到新的位置时,点击新的位置的按钮并不能够触发事件监听)\n#### ValueAnimator\n* 使用:\n\n\t\tValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\n\t\tanimation.setDuration(1000);\n\t\tanimation.start();\n\t* 一般不直接使用这个,因为其只能够修改值而不能够将其值作用于目标上,这个类一般是作为下面的ObjectAnimator的内部实现.\n\t* 常用的几个方法为ofFloat ofInt ofArgb ofObject.\n\t* ofObject时需要传递实现了TypeEvaluator接口的类以提供计算方法.[TypeEvaluator文档](https://developer.android.com/reference/android/animation/TypeEvaluator.html)\n#### ObjectAnimator\n* 使用:\n\n\t\tObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\n\t\tanim.setDuration(1000);\n\t\tanim.start();\n\t* 常用的方法与ValueAnimator相同\n\t* 第一个参数是target,即需要进行操作的类\n\t* 第二个参数是property,target类中存在的变量,需要有setter方法,当setter方法不存在时:\n\t\t* 添加方法\n\t\t* 使用包装类\n\t\t* 使用valueAnimator类\n\t* 注意,有时候可能需要在动画的update监听器当中调用view的invalidate()方法来进行页面的重画.\n* tips\n\t* 通过调用addListener添加动画监听器\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-20/36491693.jpg)\n\t\t* 由于AnimatorListener需要实现的方法较多,所以google提供了另外一个实现了AnimatorListener接口的抽象类AnimatorListenerAdapter,你只需要实现这个类里面的某个方法即可(当你仅仅需要监听其中的某个方法的时候),其他方法默认为空实现.\n#### xml定义动画\n* 定义在res下的animator文件夹中\n\t\t\n\t\t<set android:ordering=\"sequentially\">\n\t\t    <set>\n\t\t        <objectAnimator\n\t\t            android:propertyName=\"x\"\n\t\t            android:duration=\"500\"\n\t\t            android:valueTo=\"400\"\n\t\t            android:valueType=\"intType\"/>\n\t\t        <objectAnimator\n\t\t            android:propertyName=\"y\"\n\t\t            android:duration=\"500\"\n\t\t            android:valueTo=\"300\"\n\t\t            android:valueType=\"intType\"/>\n\t\t    </set>\n\t\t    <objectAnimator\n\t\t        android:propertyName=\"alpha\"\n\t\t        android:duration=\"500\"\n\t\t        android:valueTo=\"1f\"/>\n\t\t</set>\n* java代码\n\t\t\n\t\tAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n\t\t    R.anim.property_animator);\n\t\tset.setTarget(myObject);\n\t\tset.start();\n#### 还未涉及到的...\n* animatorset 动画集合的使用\n* xml定义动画的具体使用:当valueType时的处理方法","slug":"android动画简介","published":1,"updated":"2016-10-20T13:26:47.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zu0016lq0hp1r9bt38","content":"<h3 id=\"ViewAnimation\"><a href=\"#ViewAnimation\" class=\"headerlink\" title=\"ViewAnimation\"></a>ViewAnimation</h3><h4 id=\"视图动画\"><a href=\"#视图动画\" class=\"headerlink\" title=\"视图动画\"></a><strong>视图动画</strong></h4><h4 id=\"基类是Animation，包含的子类有\"><a href=\"#基类是Animation，包含的子类有\" class=\"headerlink\" title=\"基类是Animation，包含的子类有\"></a>基类是Animation，包含的子类有</h4><ul>\n<li>AlphaAnimation 透明度动画</li>\n<li>TranslateAnimation 平移动画</li>\n<li>ScaleAnimation 缩放动画</li>\n<li>RotateAnimation 旋转动画</li>\n<li>AnimationSet 动画集合<a id=\"more\"></a>\n<h4 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h4></li>\n<li>java代码</li>\n<li><p>xml文件定义  </p>\n<ul>\n<li><p>xml文件</p>\n<blockquote>\n<p> res-&gt;anim-&gt;view_alpha.xml</p>\n</blockquote>\n</li>\n<li><p>java文件  </p>\n<pre><code>Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.view_alpha); \n</code></pre><!--more-->\n<h3 id=\"PropertyAnimation属性动画\"><a href=\"#PropertyAnimation属性动画\" class=\"headerlink\" title=\"PropertyAnimation属性动画\"></a><strong>PropertyAnimation</strong>属性动画</h3></li>\n</ul>\n</li>\n<li><p><a href=\"https://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\" rel=\"noopener\">google官方api</a></p>\n<h4 id=\"与视图动画的区别\"><a href=\"#与视图动画的区别\" class=\"headerlink\" title=\"与视图动画的区别\"></a>与视图动画的区别</h4></li>\n<li>视图动画比较局限,仅能够修改view对象,局限于view对象的一些特定属性:例如scale,alpha等.</li>\n<li>视图动画仅仅是修改了view绘制的地方而非view本身的属性.(在你移动一个按钮到新的位置时,点击新的位置的按钮并不能够触发事件监听)<h4 id=\"ValueAnimator\"><a href=\"#ValueAnimator\" class=\"headerlink\" title=\"ValueAnimator\"></a>ValueAnimator</h4></li>\n<li><p>使用:</p>\n<pre><code>ValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n</code></pre><ul>\n<li>一般不直接使用这个,因为其只能够修改值而不能够将其值作用于目标上,这个类一般是作为下面的ObjectAnimator的内部实现.</li>\n<li>常用的几个方法为ofFloat ofInt ofArgb ofObject.</li>\n<li>ofObject时需要传递实现了TypeEvaluator接口的类以提供计算方法.<a href=\"https://developer.android.com/reference/android/animation/TypeEvaluator.html\" target=\"_blank\" rel=\"noopener\">TypeEvaluator文档</a><h4 id=\"ObjectAnimator\"><a href=\"#ObjectAnimator\" class=\"headerlink\" title=\"ObjectAnimator\"></a>ObjectAnimator</h4></li>\n</ul>\n</li>\n<li><p>使用:</p>\n<pre><code>ObjectAnimator anim = ObjectAnimator.ofFloat(foo, &quot;alpha&quot;, 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n</code></pre><ul>\n<li>常用的方法与ValueAnimator相同</li>\n<li>第一个参数是target,即需要进行操作的类</li>\n<li>第二个参数是property,target类中存在的变量,需要有setter方法,当setter方法不存在时:<ul>\n<li>添加方法</li>\n<li>使用包装类</li>\n<li>使用valueAnimator类</li>\n</ul>\n</li>\n<li>注意,有时候可能需要在动画的update监听器当中调用view的invalidate()方法来进行页面的重画.</li>\n</ul>\n</li>\n<li>tips<ul>\n<li>通过调用addListener添加动画监听器<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-20/36491693.jpg\" alt=\"\"></li>\n<li>由于AnimatorListener需要实现的方法较多,所以google提供了另外一个实现了AnimatorListener接口的抽象类AnimatorListenerAdapter,你只需要实现这个类里面的某个方法即可(当你仅仅需要监听其中的某个方法的时候),其他方法默认为空实现.<h4 id=\"xml定义动画\"><a href=\"#xml定义动画\" class=\"headerlink\" title=\"xml定义动画\"></a>xml定义动画</h4></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义在res下的animator文件夹中</p>\n<pre><code>&lt;set android:ordering=&quot;sequentially&quot;&gt;\n    &lt;set&gt;\n        &lt;objectAnimator\n            android:propertyName=&quot;x&quot;\n            android:duration=&quot;500&quot;\n            android:valueTo=&quot;400&quot;\n            android:valueType=&quot;intType&quot;/&gt;\n        &lt;objectAnimator\n            android:propertyName=&quot;y&quot;\n            android:duration=&quot;500&quot;\n            android:valueTo=&quot;300&quot;\n            android:valueType=&quot;intType&quot;/&gt;\n    &lt;/set&gt;\n    &lt;objectAnimator\n        android:propertyName=&quot;alpha&quot;\n        android:duration=&quot;500&quot;\n        android:valueTo=&quot;1f&quot;/&gt;\n&lt;/set&gt;\n</code></pre></li>\n<li><p>java代码</p>\n<pre><code>AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n</code></pre><h4 id=\"还未涉及到的…\"><a href=\"#还未涉及到的…\" class=\"headerlink\" title=\"还未涉及到的…\"></a>还未涉及到的…</h4></li>\n<li>animatorset 动画集合的使用</li>\n<li>xml定义动画的具体使用:当valueType时的处理方法</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"ViewAnimation\"><a href=\"#ViewAnimation\" class=\"headerlink\" title=\"ViewAnimation\"></a>ViewAnimation</h3><h4 id=\"视图动画\"><a href=\"#视图动画\" class=\"headerlink\" title=\"视图动画\"></a><strong>视图动画</strong></h4><h4 id=\"基类是Animation，包含的子类有\"><a href=\"#基类是Animation，包含的子类有\" class=\"headerlink\" title=\"基类是Animation，包含的子类有\"></a>基类是Animation，包含的子类有</h4><ul>\n<li>AlphaAnimation 透明度动画</li>\n<li>TranslateAnimation 平移动画</li>\n<li>ScaleAnimation 缩放动画</li>\n<li>RotateAnimation 旋转动画</li>\n<li>AnimationSet 动画集合","more":"<h4 id=\"定义方法\"><a href=\"#定义方法\" class=\"headerlink\" title=\"定义方法\"></a>定义方法</h4></li>\n<li>java代码</li>\n<li><p>xml文件定义  </p>\n<ul>\n<li><p>xml文件</p>\n<blockquote>\n<p> res-&gt;anim-&gt;view_alpha.xml</p>\n</blockquote>\n</li>\n<li><p>java文件  </p>\n<pre><code>Animation animation = AnimationUtils.loadAnimation(getApplicationContext(), R.anim.view_alpha); \n</code></pre><!--more-->\n<h3 id=\"PropertyAnimation属性动画\"><a href=\"#PropertyAnimation属性动画\" class=\"headerlink\" title=\"PropertyAnimation属性动画\"></a><strong>PropertyAnimation</strong>属性动画</h3></li>\n</ul>\n</li>\n<li><p><a href=\"https://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\" rel=\"noopener\">google官方api</a></p>\n<h4 id=\"与视图动画的区别\"><a href=\"#与视图动画的区别\" class=\"headerlink\" title=\"与视图动画的区别\"></a>与视图动画的区别</h4></li>\n<li>视图动画比较局限,仅能够修改view对象,局限于view对象的一些特定属性:例如scale,alpha等.</li>\n<li>视图动画仅仅是修改了view绘制的地方而非view本身的属性.(在你移动一个按钮到新的位置时,点击新的位置的按钮并不能够触发事件监听)<h4 id=\"ValueAnimator\"><a href=\"#ValueAnimator\" class=\"headerlink\" title=\"ValueAnimator\"></a>ValueAnimator</h4></li>\n<li><p>使用:</p>\n<pre><code>ValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n</code></pre><ul>\n<li>一般不直接使用这个,因为其只能够修改值而不能够将其值作用于目标上,这个类一般是作为下面的ObjectAnimator的内部实现.</li>\n<li>常用的几个方法为ofFloat ofInt ofArgb ofObject.</li>\n<li>ofObject时需要传递实现了TypeEvaluator接口的类以提供计算方法.<a href=\"https://developer.android.com/reference/android/animation/TypeEvaluator.html\" target=\"_blank\" rel=\"noopener\">TypeEvaluator文档</a><h4 id=\"ObjectAnimator\"><a href=\"#ObjectAnimator\" class=\"headerlink\" title=\"ObjectAnimator\"></a>ObjectAnimator</h4></li>\n</ul>\n</li>\n<li><p>使用:</p>\n<pre><code>ObjectAnimator anim = ObjectAnimator.ofFloat(foo, &quot;alpha&quot;, 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n</code></pre><ul>\n<li>常用的方法与ValueAnimator相同</li>\n<li>第一个参数是target,即需要进行操作的类</li>\n<li>第二个参数是property,target类中存在的变量,需要有setter方法,当setter方法不存在时:<ul>\n<li>添加方法</li>\n<li>使用包装类</li>\n<li>使用valueAnimator类</li>\n</ul>\n</li>\n<li>注意,有时候可能需要在动画的update监听器当中调用view的invalidate()方法来进行页面的重画.</li>\n</ul>\n</li>\n<li>tips<ul>\n<li>通过调用addListener添加动画监听器<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-20/36491693.jpg\" alt=\"\"></li>\n<li>由于AnimatorListener需要实现的方法较多,所以google提供了另外一个实现了AnimatorListener接口的抽象类AnimatorListenerAdapter,你只需要实现这个类里面的某个方法即可(当你仅仅需要监听其中的某个方法的时候),其他方法默认为空实现.<h4 id=\"xml定义动画\"><a href=\"#xml定义动画\" class=\"headerlink\" title=\"xml定义动画\"></a>xml定义动画</h4></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义在res下的animator文件夹中</p>\n<pre><code>&lt;set android:ordering=&quot;sequentially&quot;&gt;\n    &lt;set&gt;\n        &lt;objectAnimator\n            android:propertyName=&quot;x&quot;\n            android:duration=&quot;500&quot;\n            android:valueTo=&quot;400&quot;\n            android:valueType=&quot;intType&quot;/&gt;\n        &lt;objectAnimator\n            android:propertyName=&quot;y&quot;\n            android:duration=&quot;500&quot;\n            android:valueTo=&quot;300&quot;\n            android:valueType=&quot;intType&quot;/&gt;\n    &lt;/set&gt;\n    &lt;objectAnimator\n        android:propertyName=&quot;alpha&quot;\n        android:duration=&quot;500&quot;\n        android:valueTo=&quot;1f&quot;/&gt;\n&lt;/set&gt;\n</code></pre></li>\n<li><p>java代码</p>\n<pre><code>AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n</code></pre><h4 id=\"还未涉及到的…\"><a href=\"#还未涉及到的…\" class=\"headerlink\" title=\"还未涉及到的…\"></a>还未涉及到的…</h4></li>\n<li>animatorset 动画集合的使用</li>\n<li>xml定义动画的具体使用:当valueType时的处理方法</li>\n</ul>"},{"title":"android常用工具包","date":"2016-10-07T10:46:49.000Z","_content":"<font style=\"font-family:微软雅黑\">\n### Github地址\n[https://github.com/wz-wilbertwu/android-util](https://github.com/wz-wilbertwu/android-util)\n### 包含\n#### AppUtil\n#### BitmapLoad\n#### BitmapLruCache\n#### DiskLruCache\n#### DownloadUtil\n#### FileUti\n#### ImageLoader\n#### ImageResizer \t\n#### LogUti\n#### Md5Util\n\n\n","source":"_posts/android常用工具包.md","raw":"---\ntitle: android常用工具包\ndate: 2016-10-07 18:46:49\ntags:\n- android\n\n---\n<font style=\"font-family:微软雅黑\">\n### Github地址\n[https://github.com/wz-wilbertwu/android-util](https://github.com/wz-wilbertwu/android-util)\n### 包含\n#### AppUtil\n#### BitmapLoad\n#### BitmapLruCache\n#### DiskLruCache\n#### DownloadUtil\n#### FileUti\n#### ImageLoader\n#### ImageResizer \t\n#### LogUti\n#### Md5Util\n\n\n","slug":"android常用工具包","published":1,"updated":"2016-10-07T10:49:55.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zw0019lq0h9ckb1ex1","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><p><a href=\"https://github.com/wz-wilbertwu/android-util\" target=\"_blank\" rel=\"noopener\">https://github.com/wz-wilbertwu/android-util</a></p>\n<h3 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h3><h4 id=\"AppUtil\"><a href=\"#AppUtil\" class=\"headerlink\" title=\"AppUtil\"></a>AppUtil</h4><h4 id=\"BitmapLoad\"><a href=\"#BitmapLoad\" class=\"headerlink\" title=\"BitmapLoad\"></a>BitmapLoad</h4><h4 id=\"BitmapLruCache\"><a href=\"#BitmapLruCache\" class=\"headerlink\" title=\"BitmapLruCache\"></a>BitmapLruCache</h4><h4 id=\"DiskLruCache\"><a href=\"#DiskLruCache\" class=\"headerlink\" title=\"DiskLruCache\"></a>DiskLruCache</h4><h4 id=\"DownloadUtil\"><a href=\"#DownloadUtil\" class=\"headerlink\" title=\"DownloadUtil\"></a>DownloadUtil</h4><h4 id=\"FileUti\"><a href=\"#FileUti\" class=\"headerlink\" title=\"FileUti\"></a>FileUti</h4><h4 id=\"ImageLoader\"><a href=\"#ImageLoader\" class=\"headerlink\" title=\"ImageLoader\"></a>ImageLoader</h4><h4 id=\"ImageResizer\"><a href=\"#ImageResizer\" class=\"headerlink\" title=\"ImageResizer\"></a>ImageResizer</h4><h4 id=\"LogUti\"><a href=\"#LogUti\" class=\"headerlink\" title=\"LogUti\"></a>LogUti</h4><h4 id=\"Md5Util\"><a href=\"#Md5Util\" class=\"headerlink\" title=\"Md5Util\"></a>Md5Util</h4>","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"Github地址\"><a href=\"#Github地址\" class=\"headerlink\" title=\"Github地址\"></a>Github地址</h3><p><a href=\"https://github.com/wz-wilbertwu/android-util\" target=\"_blank\" rel=\"noopener\">https://github.com/wz-wilbertwu/android-util</a></p>\n<h3 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h3><h4 id=\"AppUtil\"><a href=\"#AppUtil\" class=\"headerlink\" title=\"AppUtil\"></a>AppUtil</h4><h4 id=\"BitmapLoad\"><a href=\"#BitmapLoad\" class=\"headerlink\" title=\"BitmapLoad\"></a>BitmapLoad</h4><h4 id=\"BitmapLruCache\"><a href=\"#BitmapLruCache\" class=\"headerlink\" title=\"BitmapLruCache\"></a>BitmapLruCache</h4><h4 id=\"DiskLruCache\"><a href=\"#DiskLruCache\" class=\"headerlink\" title=\"DiskLruCache\"></a>DiskLruCache</h4><h4 id=\"DownloadUtil\"><a href=\"#DownloadUtil\" class=\"headerlink\" title=\"DownloadUtil\"></a>DownloadUtil</h4><h4 id=\"FileUti\"><a href=\"#FileUti\" class=\"headerlink\" title=\"FileUti\"></a>FileUti</h4><h4 id=\"ImageLoader\"><a href=\"#ImageLoader\" class=\"headerlink\" title=\"ImageLoader\"></a>ImageLoader</h4><h4 id=\"ImageResizer\"><a href=\"#ImageResizer\" class=\"headerlink\" title=\"ImageResizer\"></a>ImageResizer</h4><h4 id=\"LogUti\"><a href=\"#LogUti\" class=\"headerlink\" title=\"LogUti\"></a>LogUti</h4><h4 id=\"Md5Util\"><a href=\"#Md5Util\" class=\"headerlink\" title=\"Md5Util\"></a>Md5Util</h4>"},{"title":"android动画学习","date":"2016-10-19T11:47:37.000Z","_content":"* 根据google官方的动画学习\n* [https://developer.android.com/training/animation/index.html](https://developer.android.com/training/animation/index.html)\n### Crossfading Two Views\n* 两个view的切换：淡入淡出效果的实现\n* 应用场景：进度条加载完成之后内容的显示\n<!--more-->\n#### 页面代码\n\t\n\t<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\">\n\t\n\t    <ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t        android:id=\"@+id/content\"\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"match_parent\">\n\t\n\t        <TextView style=\"?android:textAppearanceMedium\"\n\t            android:lineSpacingMultiplier=\"1.2\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"@string/lorem_ipsum\"\n\t            android:padding=\"16dp\" />\n\t\n\t    </ScrollView>\n\t\n\t    <ProgressBar android:id=\"@+id/loading_spinner\"\n\t        style=\"?android:progressBarStyleLarge\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_gravity=\"center\" />\n\t\n\t</FrameLayout>\n\n* 实现效果：在activity打开之后progressBar的alpha值逐渐下降到0直至可见性为GONE，而文本的内容的alpha值逐渐上升到1。\n* 动画代码\n\n\tprivate void crossfade() {\n\t\n\t    // Set the content view to 0% opacity but visible, so that it is visible\n\t    // (but fully transparent) during the animation.\n\t    mContentView.setAlpha(0f);\n\t    mContentView.setVisibility(View.VISIBLE);\n\t\n\t    // Animate the content view to 100% opacity, and clear any animation\n\t    // listener set on the view.\n\t    mContentView.animate()\n\t            .alpha(1f)\n\t            .setDuration(mShortAnimationDuration)\n\t            .setListener(null);\n\t\n\t    // Animate the loading view to 0% opacity. After the animation ends,\n\t    // set its visibility to GONE as an optimization step (it won't\n\t    // participate in layout passes, etc.)\n\t    mLoadingView.animate()\n\t            .alpha(0f)\n\t            .setDuration(mShortAnimationDuration)\n\t            .setListener(new AnimatorListenerAdapter() {\n\t                @Override\n\t                public void onAnimationEnd(Animator animation) {\n\t                    mLoadingView.setVisibility(View.GONE);\n\t                }\n\t            });\n\t\t}\n\t\n\t\t\n##### some tips\n* > mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);  //200ms\n* view.animate() 返回值为ViewPropertyAnimator,可以对其进行view上的某一个property的动画操作（例如alpha）\n* 可以设置动画开始/结束等的监听事件，\n#### ViewPager切换效果\n* 重点在于Viewpager的函数\n\t>mPager.setPageTransformer(true, new DepthPageTransformer());\n* 其中函数的第二个参数为PageTransformer接口\n* \n\t    public interface PageTransformer {\n\t        /**\n\t         * Apply a property transformation to the given page.\n\t         *\n\t         * @param page Apply the transformation to this page\n\t         * @param position Position of page relative to the current front-and-center\n\t         *                 position of the pager. 0 is front and center. 1 is one full\n\t         *                 page position to the right, and -1 is one page position to the left.\n\t         */\n\t        public void transformPage(View page, float position);\n\t    }\n* position:\n\t* 0: 前台居中\n\t* 1: 前台右侧\n\t* -1:前台左侧\n##### ZoomOutPageTransformer\n\t\n\t\t\t\tpublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n\t\t\t\t    private static final float MIN_SCALE = 0.85f;\n\t\t\t\t    private static final float MIN_ALPHA = 0.5f;\n\t\t\t\t\n\t\t\t\t    @Override\n\t\t\t\t    public void transformPage(View view, float position) {\n\t\t\t\t        int pageWidth = view.getWidth();\n\t\t\t\t        int pageHeight = view.getHeight();\n\t\t\t\t\n\t\t\t\t        if (position < -1) { // [-Infinity,-1)\n\t\t\t\t            // This page is way off-screen to the left.\n\t\t\t\t            view.setAlpha(0);\n\t\t\t\t\n\t\t\t\t        } else if (position <= 1) { // [-1,1]\n\t\t\t\t            // Modify the default slide transition to shrink the page as well\n\t\t\t\t            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n\t\t\t\t            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n\t\t\t\t            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n\t\t\t\t            if (position < 0) {\n\t\t\t\t                view.setTranslationX(horzMargin - vertMargin / 2);\n\t\t\t\t            } else {\n\t\t\t\t                view.setTranslationX(-horzMargin + vertMargin / 2);\n\t\t\t\t            }\n\t\t\t\t\n\t\t\t\t            // Scale the page down (between MIN_SCALE and 1)\n\t\t\t\t            view.setScaleX(scaleFactor);\n\t\t\t\t            view.setScaleY(scaleFactor);\n\t\t\t\t\n\t\t\t\t            // Fade the page relative to its size.\n\t\t\t\t            view.setAlpha(MIN_ALPHA +\n\t\t\t\t                    (scaleFactor - MIN_SCALE) /\n\t\t\t\t                            (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\t\t\t\t\n\t\t\t\t        } else { // (1,+Infinity]\n\t\t\t\t            // This page is way off-screen to the right.\n\t\t\t\t            view.setAlpha(0);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n* 根据position对view进行位置的偏移(translation)以及大小的缩放(scale)以及透明度(alpha)的调整.\n##### DepthPageTransformer \n\t\tpublic class DepthPageTransformer implements ViewPager.PageTransformer {\n\t\t    private static final float MIN_SCALE = 0.75f;\n\t\t\n\t\t    public void transformPage(View view, float position) {\n\t\t        int pageWidth = view.getWidth();\n\t\t\n\t\t        if (position < -1) { // [-Infinity,-1)\n\t\t            // This page is way off-screen to the left.\n\t\t            view.setAlpha(0);\n\t\t\n\t\t        } else if (position <= 0) { // [-1,0]\n\t\t            // Use the default slide transition when moving to the left page\n\t\t            view.setAlpha(1);\n\t\t            view.setTranslationX(0);\n\t\t            view.setScaleX(1);\n\t\t            view.setScaleY(1);\n\t\t\n\t\t        } else if (position <= 1) { // (0,1]\n\t\t            // Fade the page out.\n\t\t            view.setAlpha(1 - position);\n\t\t\n\t\t            // Counteract the default slide transition\n\t\t            view.setTranslationX(pageWidth * -position);\n\t\t\n\t\t            // Scale the page down (between MIN_SCALE and 1)\n\t\t            float scaleFactor = MIN_SCALE\n\t\t                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n\t\t            view.setScaleX(scaleFactor);\n\t\t            view.setScaleY(scaleFactor);\n\t\t\n\t\t        } else { // (1,+Infinity]\n\t\t            // This page is way off-screen to the right.\n\t\t            view.setAlpha(0);\n\t\t        }\n\t\t    }\n\t\t}\n#### Displaying Card Flip Animations\n* 简单来讲,这个应该指的是一些页面切换时候的动画\n\t\t\n\t\tgetFragmentManager()\n\t\t                .beginTransaction()\n\t\t\n\t\t                // Replace the default fragment animations with animator resources\n\t\t                // representing rotations when switching to the back of the card, as\n\t\t                // well as animator resources representing rotations when flipping\n\t\t                // back to the front (e.g. when the system Back button is pressed).\n\t\t                .setCustomAnimations(\n\t\t                        R.animator.card_flip_right_in,\n\t\t                        R.animator.card_flip_right_out,\n\t\t                        R.animator.card_flip_left_in,\n\t\t                        R.animator.card_flip_left_out)\n\t\t\n\t\t                // Replace any fragments currently in the container view with a\n\t\t                // fragment representing the next page (indicated by the\n\t\t                // just-incremented currentPage variable).\n\t\t                .replace(R.id.container, new CardBackFragment())\n\t\t\n\t\t                // Add this transaction to the back stack, allowing users to press\n\t\t                // Back to get to the front of the card.\n\t\t                .addToBackStack(null)\n\t\t\n\t\t                // Commit the transaction.\n\t\t                .commit();\n* 核心方法为:setCustomeAnimations\n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-19/36019666.jpg)\n* 具体的代码可以参见[https://developer.android.com/training/animation/cardflip.html](https://developer.android.com/training/animation/cardflip.html)\n#### Zooming a View\n#### Animating Layout Changes\n* layout布局变化的时候的动画是自带的,配置如下:\n\n\t\t<LinearLayout android:id=\"@+id/container\"\n\t\t    android:animateLayoutChanges=\"true\"\n\t\t    ...\n\t\t/>\n* 接下来只需要直接在代码中addView中就可以了.\n\n**下一篇要写的是属性动画的另外一些应用**","source":"_posts/android动画学习.md","raw":"---\ntitle: android动画学习\ndate: 2016-10-19 19:47:37\ntags:\n- android\n\n---\n* 根据google官方的动画学习\n* [https://developer.android.com/training/animation/index.html](https://developer.android.com/training/animation/index.html)\n### Crossfading Two Views\n* 两个view的切换：淡入淡出效果的实现\n* 应用场景：进度条加载完成之后内容的显示\n<!--more-->\n#### 页面代码\n\t\n\t<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\">\n\t\n\t    <ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t        android:id=\"@+id/content\"\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"match_parent\">\n\t\n\t        <TextView style=\"?android:textAppearanceMedium\"\n\t            android:lineSpacingMultiplier=\"1.2\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"@string/lorem_ipsum\"\n\t            android:padding=\"16dp\" />\n\t\n\t    </ScrollView>\n\t\n\t    <ProgressBar android:id=\"@+id/loading_spinner\"\n\t        style=\"?android:progressBarStyleLarge\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_gravity=\"center\" />\n\t\n\t</FrameLayout>\n\n* 实现效果：在activity打开之后progressBar的alpha值逐渐下降到0直至可见性为GONE，而文本的内容的alpha值逐渐上升到1。\n* 动画代码\n\n\tprivate void crossfade() {\n\t\n\t    // Set the content view to 0% opacity but visible, so that it is visible\n\t    // (but fully transparent) during the animation.\n\t    mContentView.setAlpha(0f);\n\t    mContentView.setVisibility(View.VISIBLE);\n\t\n\t    // Animate the content view to 100% opacity, and clear any animation\n\t    // listener set on the view.\n\t    mContentView.animate()\n\t            .alpha(1f)\n\t            .setDuration(mShortAnimationDuration)\n\t            .setListener(null);\n\t\n\t    // Animate the loading view to 0% opacity. After the animation ends,\n\t    // set its visibility to GONE as an optimization step (it won't\n\t    // participate in layout passes, etc.)\n\t    mLoadingView.animate()\n\t            .alpha(0f)\n\t            .setDuration(mShortAnimationDuration)\n\t            .setListener(new AnimatorListenerAdapter() {\n\t                @Override\n\t                public void onAnimationEnd(Animator animation) {\n\t                    mLoadingView.setVisibility(View.GONE);\n\t                }\n\t            });\n\t\t}\n\t\n\t\t\n##### some tips\n* > mShortAnimationDuration = getResources().getInteger(\n                android.R.integer.config_shortAnimTime);  //200ms\n* view.animate() 返回值为ViewPropertyAnimator,可以对其进行view上的某一个property的动画操作（例如alpha）\n* 可以设置动画开始/结束等的监听事件，\n#### ViewPager切换效果\n* 重点在于Viewpager的函数\n\t>mPager.setPageTransformer(true, new DepthPageTransformer());\n* 其中函数的第二个参数为PageTransformer接口\n* \n\t    public interface PageTransformer {\n\t        /**\n\t         * Apply a property transformation to the given page.\n\t         *\n\t         * @param page Apply the transformation to this page\n\t         * @param position Position of page relative to the current front-and-center\n\t         *                 position of the pager. 0 is front and center. 1 is one full\n\t         *                 page position to the right, and -1 is one page position to the left.\n\t         */\n\t        public void transformPage(View page, float position);\n\t    }\n* position:\n\t* 0: 前台居中\n\t* 1: 前台右侧\n\t* -1:前台左侧\n##### ZoomOutPageTransformer\n\t\n\t\t\t\tpublic class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n\t\t\t\t    private static final float MIN_SCALE = 0.85f;\n\t\t\t\t    private static final float MIN_ALPHA = 0.5f;\n\t\t\t\t\n\t\t\t\t    @Override\n\t\t\t\t    public void transformPage(View view, float position) {\n\t\t\t\t        int pageWidth = view.getWidth();\n\t\t\t\t        int pageHeight = view.getHeight();\n\t\t\t\t\n\t\t\t\t        if (position < -1) { // [-Infinity,-1)\n\t\t\t\t            // This page is way off-screen to the left.\n\t\t\t\t            view.setAlpha(0);\n\t\t\t\t\n\t\t\t\t        } else if (position <= 1) { // [-1,1]\n\t\t\t\t            // Modify the default slide transition to shrink the page as well\n\t\t\t\t            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n\t\t\t\t            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n\t\t\t\t            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n\t\t\t\t            if (position < 0) {\n\t\t\t\t                view.setTranslationX(horzMargin - vertMargin / 2);\n\t\t\t\t            } else {\n\t\t\t\t                view.setTranslationX(-horzMargin + vertMargin / 2);\n\t\t\t\t            }\n\t\t\t\t\n\t\t\t\t            // Scale the page down (between MIN_SCALE and 1)\n\t\t\t\t            view.setScaleX(scaleFactor);\n\t\t\t\t            view.setScaleY(scaleFactor);\n\t\t\t\t\n\t\t\t\t            // Fade the page relative to its size.\n\t\t\t\t            view.setAlpha(MIN_ALPHA +\n\t\t\t\t                    (scaleFactor - MIN_SCALE) /\n\t\t\t\t                            (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\t\t\t\t\n\t\t\t\t        } else { // (1,+Infinity]\n\t\t\t\t            // This page is way off-screen to the right.\n\t\t\t\t            view.setAlpha(0);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n* 根据position对view进行位置的偏移(translation)以及大小的缩放(scale)以及透明度(alpha)的调整.\n##### DepthPageTransformer \n\t\tpublic class DepthPageTransformer implements ViewPager.PageTransformer {\n\t\t    private static final float MIN_SCALE = 0.75f;\n\t\t\n\t\t    public void transformPage(View view, float position) {\n\t\t        int pageWidth = view.getWidth();\n\t\t\n\t\t        if (position < -1) { // [-Infinity,-1)\n\t\t            // This page is way off-screen to the left.\n\t\t            view.setAlpha(0);\n\t\t\n\t\t        } else if (position <= 0) { // [-1,0]\n\t\t            // Use the default slide transition when moving to the left page\n\t\t            view.setAlpha(1);\n\t\t            view.setTranslationX(0);\n\t\t            view.setScaleX(1);\n\t\t            view.setScaleY(1);\n\t\t\n\t\t        } else if (position <= 1) { // (0,1]\n\t\t            // Fade the page out.\n\t\t            view.setAlpha(1 - position);\n\t\t\n\t\t            // Counteract the default slide transition\n\t\t            view.setTranslationX(pageWidth * -position);\n\t\t\n\t\t            // Scale the page down (between MIN_SCALE and 1)\n\t\t            float scaleFactor = MIN_SCALE\n\t\t                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n\t\t            view.setScaleX(scaleFactor);\n\t\t            view.setScaleY(scaleFactor);\n\t\t\n\t\t        } else { // (1,+Infinity]\n\t\t            // This page is way off-screen to the right.\n\t\t            view.setAlpha(0);\n\t\t        }\n\t\t    }\n\t\t}\n#### Displaying Card Flip Animations\n* 简单来讲,这个应该指的是一些页面切换时候的动画\n\t\t\n\t\tgetFragmentManager()\n\t\t                .beginTransaction()\n\t\t\n\t\t                // Replace the default fragment animations with animator resources\n\t\t                // representing rotations when switching to the back of the card, as\n\t\t                // well as animator resources representing rotations when flipping\n\t\t                // back to the front (e.g. when the system Back button is pressed).\n\t\t                .setCustomAnimations(\n\t\t                        R.animator.card_flip_right_in,\n\t\t                        R.animator.card_flip_right_out,\n\t\t                        R.animator.card_flip_left_in,\n\t\t                        R.animator.card_flip_left_out)\n\t\t\n\t\t                // Replace any fragments currently in the container view with a\n\t\t                // fragment representing the next page (indicated by the\n\t\t                // just-incremented currentPage variable).\n\t\t                .replace(R.id.container, new CardBackFragment())\n\t\t\n\t\t                // Add this transaction to the back stack, allowing users to press\n\t\t                // Back to get to the front of the card.\n\t\t                .addToBackStack(null)\n\t\t\n\t\t                // Commit the transaction.\n\t\t                .commit();\n* 核心方法为:setCustomeAnimations\n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-19/36019666.jpg)\n* 具体的代码可以参见[https://developer.android.com/training/animation/cardflip.html](https://developer.android.com/training/animation/cardflip.html)\n#### Zooming a View\n#### Animating Layout Changes\n* layout布局变化的时候的动画是自带的,配置如下:\n\n\t\t<LinearLayout android:id=\"@+id/container\"\n\t\t    android:animateLayoutChanges=\"true\"\n\t\t    ...\n\t\t/>\n* 接下来只需要直接在代码中addView中就可以了.\n\n**下一篇要写的是属性动画的另外一些应用**","slug":"android动画学习","published":1,"updated":"2016-10-19T13:26:14.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zx001blq0hdvu2ykzq","content":"<ul>\n<li>根据google官方的动画学习</li>\n<li><a href=\"https://developer.android.com/training/animation/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/animation/index.html</a><h3 id=\"Crossfading-Two-Views\"><a href=\"#Crossfading-Two-Views\" class=\"headerlink\" title=\"Crossfading Two Views\"></a>Crossfading Two Views</h3></li>\n<li>两个view的切换：淡入淡出效果的实现</li>\n<li><p>应用场景：进度条加载完成之后内容的显示</p>\n<a id=\"more\"></a>\n<h4 id=\"页面代码\"><a href=\"#页面代码\" class=\"headerlink\" title=\"页面代码\"></a>页面代码</h4>  <framelayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"><br><br>      <scrollview xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"><br><br>          <textview style=\"?android:textAppearanceMedium\" android:linespacingmultiplier=\"1.2\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"@string/lorem_ipsum\" android:padding=\"16dp\"><br><br>      </textview></scrollview><br><br>      <progressbar android:id=\"@+id/loading_spinner\" style=\"?android:progressBarStyleLarge\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\"><br><br>  </progressbar></framelayout>\n</li>\n<li><p>实现效果：在activity打开之后progressBar的alpha值逐渐下降到0直至可见性为GONE，而文本的内容的alpha值逐渐上升到1。</p>\n</li>\n<li><p>动画代码</p>\n<p>  private void crossfade() {</p>\n<pre><code>// Set the content view to 0% opacity but visible, so that it is visible\n// (but fully transparent) during the animation.\nmContentView.setAlpha(0f);\nmContentView.setVisibility(View.VISIBLE);\n\n// Animate the content view to 100% opacity, and clear any animation\n// listener set on the view.\nmContentView.animate()\n        .alpha(1f)\n        .setDuration(mShortAnimationDuration)\n        .setListener(null);\n\n// Animate the loading view to 0% opacity. After the animation ends,\n// set its visibility to GONE as an optimization step (it won&apos;t\n// participate in layout passes, etc.)\nmLoadingView.animate()\n        .alpha(0f)\n        .setDuration(mShortAnimationDuration)\n        .setListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mLoadingView.setVisibility(View.GONE);\n            }\n        });\n}\n</code></pre></li>\n</ul>\n<h5 id=\"some-tips\"><a href=\"#some-tips\" class=\"headerlink\" title=\"some tips\"></a>some tips</h5><ul>\n<li><blockquote>\n<p>mShortAnimationDuration = getResources().getInteger(</p>\n<pre><code>android.R.integer.config_shortAnimTime);  //200ms\n</code></pre></blockquote>\n</li>\n<li>view.animate() 返回值为ViewPropertyAnimator,可以对其进行view上的某一个property的动画操作（例如alpha）</li>\n<li>可以设置动画开始/结束等的监听事件，<h4 id=\"ViewPager切换效果\"><a href=\"#ViewPager切换效果\" class=\"headerlink\" title=\"ViewPager切换效果\"></a>ViewPager切换效果</h4></li>\n<li>重点在于Viewpager的函数<blockquote>\n<p>mPager.setPageTransformer(true, new DepthPageTransformer());</p>\n</blockquote>\n</li>\n<li>其中函数的第二个参数为PageTransformer接口</li>\n<li><pre><code>public interface PageTransformer {\n    /**\n     * Apply a property transformation to the given page.\n     *\n     * @param page Apply the transformation to this page\n     * @param position Position of page relative to the current front-and-center\n     *                 position of the pager. 0 is front and center. 1 is one full\n     *                 page position to the right, and -1 is one page position to the left.\n     */\n    public void transformPage(View page, float position);\n}\n</code></pre></li>\n<li><p>position:</p>\n<ul>\n<li>0: 前台居中</li>\n<li>1: 前台右侧</li>\n<li><p>-1:前台左侧</p>\n<h5 id=\"ZoomOutPageTransformer\"><a href=\"#ZoomOutPageTransformer\" class=\"headerlink\" title=\"ZoomOutPageTransformer\"></a>ZoomOutPageTransformer</h5><pre><code>public class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    @Override\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position &lt; -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position &lt;= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position &lt; 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                            (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>根据position对view进行位置的偏移(translation)以及大小的缩放(scale)以及透明度(alpha)的调整.</p>\n<h5 id=\"DepthPageTransformer\"><a href=\"#DepthPageTransformer\" class=\"headerlink\" title=\"DepthPageTransformer\"></a>DepthPageTransformer</h5><pre><code>public class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position &lt; -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position &lt;= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position &lt;= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n</code></pre><h4 id=\"Displaying-Card-Flip-Animations\"><a href=\"#Displaying-Card-Flip-Animations\" class=\"headerlink\" title=\"Displaying Card Flip Animations\"></a>Displaying Card Flip Animations</h4></li>\n<li><p>简单来讲,这个应该指的是一些页面切换时候的动画</p>\n<pre><code>getFragmentManager()\n                .beginTransaction()\n\n                // Replace the default fragment animations with animator resources\n                // representing rotations when switching to the back of the card, as\n                // well as animator resources representing rotations when flipping\n                // back to the front (e.g. when the system Back button is pressed).\n                .setCustomAnimations(\n                        R.animator.card_flip_right_in,\n                        R.animator.card_flip_right_out,\n                        R.animator.card_flip_left_in,\n                        R.animator.card_flip_left_out)\n\n                // Replace any fragments currently in the container view with a\n                // fragment representing the next page (indicated by the\n                // just-incremented currentPage variable).\n                .replace(R.id.container, new CardBackFragment())\n\n                // Add this transaction to the back stack, allowing users to press\n                // Back to get to the front of the card.\n                .addToBackStack(null)\n\n                // Commit the transaction.\n                .commit();\n</code></pre></li>\n<li>核心方法为:setCustomeAnimations<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-19/36019666.jpg\" alt=\"\"></li>\n<li>具体的代码可以参见<a href=\"https://developer.android.com/training/animation/cardflip.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/animation/cardflip.html</a><h4 id=\"Zooming-a-View\"><a href=\"#Zooming-a-View\" class=\"headerlink\" title=\"Zooming a View\"></a>Zooming a View</h4><h4 id=\"Animating-Layout-Changes\"><a href=\"#Animating-Layout-Changes\" class=\"headerlink\" title=\"Animating Layout Changes\"></a>Animating Layout Changes</h4></li>\n<li><p>layout布局变化的时候的动画是自带的,配置如下:</p>\n<pre><code>&lt;LinearLayout android:id=&quot;@+id/container&quot;\n    android:animateLayoutChanges=&quot;true&quot;\n    ...\n/&gt;\n</code></pre></li>\n<li>接下来只需要直接在代码中addView中就可以了.</li>\n</ul>\n<p><strong>下一篇要写的是属性动画的另外一些应用</strong></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>根据google官方的动画学习</li>\n<li><a href=\"https://developer.android.com/training/animation/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/animation/index.html</a><h3 id=\"Crossfading-Two-Views\"><a href=\"#Crossfading-Two-Views\" class=\"headerlink\" title=\"Crossfading Two Views\"></a>Crossfading Two Views</h3></li>\n<li>两个view的切换：淡入淡出效果的实现</li>\n<li><p>应用场景：进度条加载完成之后内容的显示</p>","more":"<h4 id=\"页面代码\"><a href=\"#页面代码\" class=\"headerlink\" title=\"页面代码\"></a>页面代码</h4>  <framelayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"><br><br>      <scrollview xmlns:android=\"http://schemas.android.com/apk/res/android\" android:id=\"@+id/content\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"><br><br>          <textview style=\"?android:textAppearanceMedium\" android:linespacingmultiplier=\"1.2\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:text=\"@string/lorem_ipsum\" android:padding=\"16dp\"><br><br>      </textview></scrollview><br><br>      <progressbar android:id=\"@+id/loading_spinner\" style=\"?android:progressBarStyleLarge\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\"><br><br>  </progressbar></framelayout>\n</li>\n<li><p>实现效果：在activity打开之后progressBar的alpha值逐渐下降到0直至可见性为GONE，而文本的内容的alpha值逐渐上升到1。</p>\n</li>\n<li><p>动画代码</p>\n<p>  private void crossfade() {</p>\n<pre><code>// Set the content view to 0% opacity but visible, so that it is visible\n// (but fully transparent) during the animation.\nmContentView.setAlpha(0f);\nmContentView.setVisibility(View.VISIBLE);\n\n// Animate the content view to 100% opacity, and clear any animation\n// listener set on the view.\nmContentView.animate()\n        .alpha(1f)\n        .setDuration(mShortAnimationDuration)\n        .setListener(null);\n\n// Animate the loading view to 0% opacity. After the animation ends,\n// set its visibility to GONE as an optimization step (it won&apos;t\n// participate in layout passes, etc.)\nmLoadingView.animate()\n        .alpha(0f)\n        .setDuration(mShortAnimationDuration)\n        .setListener(new AnimatorListenerAdapter() {\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                mLoadingView.setVisibility(View.GONE);\n            }\n        });\n}\n</code></pre></li>\n</ul>\n<h5 id=\"some-tips\"><a href=\"#some-tips\" class=\"headerlink\" title=\"some tips\"></a>some tips</h5><ul>\n<li><blockquote>\n<p>mShortAnimationDuration = getResources().getInteger(</p>\n<pre><code>android.R.integer.config_shortAnimTime);  //200ms\n</code></pre></blockquote>\n</li>\n<li>view.animate() 返回值为ViewPropertyAnimator,可以对其进行view上的某一个property的动画操作（例如alpha）</li>\n<li>可以设置动画开始/结束等的监听事件，<h4 id=\"ViewPager切换效果\"><a href=\"#ViewPager切换效果\" class=\"headerlink\" title=\"ViewPager切换效果\"></a>ViewPager切换效果</h4></li>\n<li>重点在于Viewpager的函数<blockquote>\n<p>mPager.setPageTransformer(true, new DepthPageTransformer());</p>\n</blockquote>\n</li>\n<li>其中函数的第二个参数为PageTransformer接口</li>\n<li><pre><code>public interface PageTransformer {\n    /**\n     * Apply a property transformation to the given page.\n     *\n     * @param page Apply the transformation to this page\n     * @param position Position of page relative to the current front-and-center\n     *                 position of the pager. 0 is front and center. 1 is one full\n     *                 page position to the right, and -1 is one page position to the left.\n     */\n    public void transformPage(View page, float position);\n}\n</code></pre></li>\n<li><p>position:</p>\n<ul>\n<li>0: 前台居中</li>\n<li>1: 前台右侧</li>\n<li><p>-1:前台左侧</p>\n<h5 id=\"ZoomOutPageTransformer\"><a href=\"#ZoomOutPageTransformer\" class=\"headerlink\" title=\"ZoomOutPageTransformer\"></a>ZoomOutPageTransformer</h5><pre><code>public class ZoomOutPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.85f;\n    private static final float MIN_ALPHA = 0.5f;\n\n    @Override\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n        int pageHeight = view.getHeight();\n\n        if (position &lt; -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position &lt;= 1) { // [-1,1]\n            // Modify the default slide transition to shrink the page as well\n            float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));\n            float vertMargin = pageHeight * (1 - scaleFactor) / 2;\n            float horzMargin = pageWidth * (1 - scaleFactor) / 2;\n            if (position &lt; 0) {\n                view.setTranslationX(horzMargin - vertMargin / 2);\n            } else {\n                view.setTranslationX(-horzMargin + vertMargin / 2);\n            }\n\n            // Scale the page down (between MIN_SCALE and 1)\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n            // Fade the page relative to its size.\n            view.setAlpha(MIN_ALPHA +\n                    (scaleFactor - MIN_SCALE) /\n                            (1 - MIN_SCALE) * (1 - MIN_ALPHA));\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>根据position对view进行位置的偏移(translation)以及大小的缩放(scale)以及透明度(alpha)的调整.</p>\n<h5 id=\"DepthPageTransformer\"><a href=\"#DepthPageTransformer\" class=\"headerlink\" title=\"DepthPageTransformer\"></a>DepthPageTransformer</h5><pre><code>public class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n        int pageWidth = view.getWidth();\n\n        if (position &lt; -1) { // [-Infinity,-1)\n            // This page is way off-screen to the left.\n            view.setAlpha(0);\n\n        } else if (position &lt;= 0) { // [-1,0]\n            // Use the default slide transition when moving to the left page\n            view.setAlpha(1);\n            view.setTranslationX(0);\n            view.setScaleX(1);\n            view.setScaleY(1);\n\n        } else if (position &lt;= 1) { // (0,1]\n            // Fade the page out.\n            view.setAlpha(1 - position);\n\n            // Counteract the default slide transition\n            view.setTranslationX(pageWidth * -position);\n\n            // Scale the page down (between MIN_SCALE and 1)\n            float scaleFactor = MIN_SCALE\n                    + (1 - MIN_SCALE) * (1 - Math.abs(position));\n            view.setScaleX(scaleFactor);\n            view.setScaleY(scaleFactor);\n\n        } else { // (1,+Infinity]\n            // This page is way off-screen to the right.\n            view.setAlpha(0);\n        }\n    }\n}\n</code></pre><h4 id=\"Displaying-Card-Flip-Animations\"><a href=\"#Displaying-Card-Flip-Animations\" class=\"headerlink\" title=\"Displaying Card Flip Animations\"></a>Displaying Card Flip Animations</h4></li>\n<li><p>简单来讲,这个应该指的是一些页面切换时候的动画</p>\n<pre><code>getFragmentManager()\n                .beginTransaction()\n\n                // Replace the default fragment animations with animator resources\n                // representing rotations when switching to the back of the card, as\n                // well as animator resources representing rotations when flipping\n                // back to the front (e.g. when the system Back button is pressed).\n                .setCustomAnimations(\n                        R.animator.card_flip_right_in,\n                        R.animator.card_flip_right_out,\n                        R.animator.card_flip_left_in,\n                        R.animator.card_flip_left_out)\n\n                // Replace any fragments currently in the container view with a\n                // fragment representing the next page (indicated by the\n                // just-incremented currentPage variable).\n                .replace(R.id.container, new CardBackFragment())\n\n                // Add this transaction to the back stack, allowing users to press\n                // Back to get to the front of the card.\n                .addToBackStack(null)\n\n                // Commit the transaction.\n                .commit();\n</code></pre></li>\n<li>核心方法为:setCustomeAnimations<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-19/36019666.jpg\" alt=\"\"></li>\n<li>具体的代码可以参见<a href=\"https://developer.android.com/training/animation/cardflip.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/animation/cardflip.html</a><h4 id=\"Zooming-a-View\"><a href=\"#Zooming-a-View\" class=\"headerlink\" title=\"Zooming a View\"></a>Zooming a View</h4><h4 id=\"Animating-Layout-Changes\"><a href=\"#Animating-Layout-Changes\" class=\"headerlink\" title=\"Animating Layout Changes\"></a>Animating Layout Changes</h4></li>\n<li><p>layout布局变化的时候的动画是自带的,配置如下:</p>\n<pre><code>&lt;LinearLayout android:id=&quot;@+id/container&quot;\n    android:animateLayoutChanges=&quot;true&quot;\n    ...\n/&gt;\n</code></pre></li>\n<li>接下来只需要直接在代码中addView中就可以了.</li>\n</ul>\n<p><strong>下一篇要写的是属性动画的另外一些应用</strong></p>"},{"title":"android序列化","date":"2016-10-08T07:30:31.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## 实现Serializable接口\n_Serializable接口是来自Java的序列化接口_\n### 使用方法\n\n\t    class BagOfPrimitives implements Serializable{\n\t        public int value1 = 1;\n\t        public String value2 = \"abc\";\n\t        public transient int value3 = 3;\n    \t}\n* 在Intent中传递对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/9889133.jpg)\n* 取出对象  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/4751825.jpg)\n## 实现Parcelable接口\n_Android自带的接口，性能更高，但通用性不强_\n### 使用方法如下\n* Parcel为参数的构造函数中，给变量赋值\n* writeToParcel(Parcel dest, int flags)将变量的值写入dest\n\n\t\t\tpublic class Person  implements Parcelable {\n\t\t\t    private int data;\n\t\t\t    private Book book;\n\t\t\t    protected Person(Parcel in) {\n\t\t\t        data = in.readInt();\n\t\t\t        book = in.readParcelable(Book.class.getClassLoader());\n\t\t\t    }\n\t\t\t\n\t\t\t    public static final Creator<Person> CREATOR = new Creator<Person>() {\n\t\t\t        @Override\n\t\t\t        public Person createFromParcel(Parcel in) {\n\t\t\t            return new Person(in);\n\t\t\t        }\n\t\t\t\n\t\t\t        @Override\n\t\t\t        public Person[] newArray(int size) {\n\t\t\t            return new Person[size];\n\t\t\t        }\n\t\t\t    };\n\t\t\t\n\t\t\t    @Override\n\t\t\t    public int describeContents() {\n\t\t\t        return 0;\n\t\t\t    }\n\t\t\t\n\t\t\t    @Override\n\t\t\t    public void writeToParcel(Parcel dest, int flags) {\n\t\t\t        dest.writeInt(data);\n\t\t\t        dest.writeParcelable(book, flags);\n\t\t\t    }\n\t\t\t}\n* 重点\n\t* 序列化的成员变量也需要实现Parcel接口，同时读取以及写入方式如下\n\t* 读取\n\t\t>book = in.readParcelable(Book.class.getClassLoader());\n\t* 写入\n\t\t>dest.writeParcelable(book, flags);\n* 传递对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/68062237.jpg)\n* 接收对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/50517350.jpg)\n","source":"_posts/android序列化.md","raw":"---\ntitle: android序列化\ndate: 2016-10-08 15:30:31\ntags:\n- android\n- java\n\n---\n<font style=\"font-family:微软雅黑\">\n## 实现Serializable接口\n_Serializable接口是来自Java的序列化接口_\n### 使用方法\n\n\t    class BagOfPrimitives implements Serializable{\n\t        public int value1 = 1;\n\t        public String value2 = \"abc\";\n\t        public transient int value3 = 3;\n    \t}\n* 在Intent中传递对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/9889133.jpg)\n* 取出对象  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/4751825.jpg)\n## 实现Parcelable接口\n_Android自带的接口，性能更高，但通用性不强_\n### 使用方法如下\n* Parcel为参数的构造函数中，给变量赋值\n* writeToParcel(Parcel dest, int flags)将变量的值写入dest\n\n\t\t\tpublic class Person  implements Parcelable {\n\t\t\t    private int data;\n\t\t\t    private Book book;\n\t\t\t    protected Person(Parcel in) {\n\t\t\t        data = in.readInt();\n\t\t\t        book = in.readParcelable(Book.class.getClassLoader());\n\t\t\t    }\n\t\t\t\n\t\t\t    public static final Creator<Person> CREATOR = new Creator<Person>() {\n\t\t\t        @Override\n\t\t\t        public Person createFromParcel(Parcel in) {\n\t\t\t            return new Person(in);\n\t\t\t        }\n\t\t\t\n\t\t\t        @Override\n\t\t\t        public Person[] newArray(int size) {\n\t\t\t            return new Person[size];\n\t\t\t        }\n\t\t\t    };\n\t\t\t\n\t\t\t    @Override\n\t\t\t    public int describeContents() {\n\t\t\t        return 0;\n\t\t\t    }\n\t\t\t\n\t\t\t    @Override\n\t\t\t    public void writeToParcel(Parcel dest, int flags) {\n\t\t\t        dest.writeInt(data);\n\t\t\t        dest.writeParcelable(book, flags);\n\t\t\t    }\n\t\t\t}\n* 重点\n\t* 序列化的成员变量也需要实现Parcel接口，同时读取以及写入方式如下\n\t* 读取\n\t\t>book = in.readParcelable(Book.class.getClassLoader());\n\t* 写入\n\t\t>dest.writeParcelable(book, flags);\n* 传递对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/68062237.jpg)\n* 接收对象时  \n![](http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/50517350.jpg)\n","slug":"android序列化","published":1,"updated":"2016-10-08T08:12:38.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r4zz001elq0hz0u1zql3","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"实现Serializable接口\"><a href=\"#实现Serializable接口\" class=\"headerlink\" title=\"实现Serializable接口\"></a>实现Serializable接口</h2><p><em>Serializable接口是来自Java的序列化接口</em></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><pre><code>class BagOfPrimitives implements Serializable{\n    public int value1 = 1;\n    public String value2 = &quot;abc&quot;;\n    public transient int value3 = 3;\n}\n</code></pre><ul>\n<li>在Intent中传递对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/9889133.jpg\" alt=\"\"></li>\n<li>取出对象<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/4751825.jpg\" alt=\"\"><h2 id=\"实现Parcelable接口\"><a href=\"#实现Parcelable接口\" class=\"headerlink\" title=\"实现Parcelable接口\"></a>实现Parcelable接口</h2><em>Android自带的接口，性能更高，但通用性不强</em><h3 id=\"使用方法如下\"><a href=\"#使用方法如下\" class=\"headerlink\" title=\"使用方法如下\"></a>使用方法如下</h3></li>\n<li>Parcel为参数的构造函数中，给变量赋值</li>\n<li><p>writeToParcel(Parcel dest, int flags)将变量的值写入dest</p>\n<pre><code>public class Person  implements Parcelable {\n    private int data;\n    private Book book;\n    protected Person(Parcel in) {\n        data = in.readInt();\n        book = in.readParcelable(Book.class.getClassLoader());\n    }\n\n    public static final Creator&lt;Person&gt; CREATOR = new Creator&lt;Person&gt;() {\n        @Override\n        public Person createFromParcel(Parcel in) {\n            return new Person(in);\n        }\n\n        @Override\n        public Person[] newArray(int size) {\n            return new Person[size];\n        }\n    };\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(data);\n        dest.writeParcelable(book, flags);\n    }\n}\n</code></pre></li>\n<li>重点<ul>\n<li>序列化的成员变量也需要实现Parcel接口，同时读取以及写入方式如下</li>\n<li>读取<blockquote>\n<p>book = in.readParcelable(Book.class.getClassLoader());</p>\n</blockquote>\n</li>\n<li>写入<blockquote>\n<p>dest.writeParcelable(book, flags);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>传递对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/68062237.jpg\" alt=\"\"></li>\n<li>接收对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/50517350.jpg\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"实现Serializable接口\"><a href=\"#实现Serializable接口\" class=\"headerlink\" title=\"实现Serializable接口\"></a>实现Serializable接口</h2><p><em>Serializable接口是来自Java的序列化接口</em></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><pre><code>class BagOfPrimitives implements Serializable{\n    public int value1 = 1;\n    public String value2 = &quot;abc&quot;;\n    public transient int value3 = 3;\n}\n</code></pre><ul>\n<li>在Intent中传递对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/9889133.jpg\" alt=\"\"></li>\n<li>取出对象<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/4751825.jpg\" alt=\"\"><h2 id=\"实现Parcelable接口\"><a href=\"#实现Parcelable接口\" class=\"headerlink\" title=\"实现Parcelable接口\"></a>实现Parcelable接口</h2><em>Android自带的接口，性能更高，但通用性不强</em><h3 id=\"使用方法如下\"><a href=\"#使用方法如下\" class=\"headerlink\" title=\"使用方法如下\"></a>使用方法如下</h3></li>\n<li>Parcel为参数的构造函数中，给变量赋值</li>\n<li><p>writeToParcel(Parcel dest, int flags)将变量的值写入dest</p>\n<pre><code>public class Person  implements Parcelable {\n    private int data;\n    private Book book;\n    protected Person(Parcel in) {\n        data = in.readInt();\n        book = in.readParcelable(Book.class.getClassLoader());\n    }\n\n    public static final Creator&lt;Person&gt; CREATOR = new Creator&lt;Person&gt;() {\n        @Override\n        public Person createFromParcel(Parcel in) {\n            return new Person(in);\n        }\n\n        @Override\n        public Person[] newArray(int size) {\n            return new Person[size];\n        }\n    };\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeInt(data);\n        dest.writeParcelable(book, flags);\n    }\n}\n</code></pre></li>\n<li>重点<ul>\n<li>序列化的成员变量也需要实现Parcel接口，同时读取以及写入方式如下</li>\n<li>读取<blockquote>\n<p>book = in.readParcelable(Book.class.getClassLoader());</p>\n</blockquote>\n</li>\n<li>写入<blockquote>\n<p>dest.writeParcelable(book, flags);</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>传递对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/68062237.jpg\" alt=\"\"></li>\n<li>接收对象时<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/16-10-8/50517350.jpg\" alt=\"\"></li>\n</ul>\n"},{"title":"广播接收器","date":"2016-09-25T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## 广播机制\n* 标准广播\n\t> * 完全异步执行\n\t> * 所有广播接收器几乎同时收到\n* 有序广播\n\t> * 同步执行\n\t> * 优先级高的先收到，可以截断。\n## 系统广播\n\n## broadcast receiver\n* 不允许开启线程\n* onReceive 中的context的来源，是谁在调用这个函数 // todo\n### 静态注册\n>  manifest中注册\n  \n\t<receiver android:name=\"util.NetworkChangedReceiver\">\n            <intent-filter>\n                <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\"></action>\n            </intent-filter>\n        </receiver>\n### 动态注册\n> 代码中注册\n\n1. 继承类\n\n\t\t    class NetworkChangeReceiver extends BroadcastReceiver{\n\t\n\t        @Override\n\t        public void onReceive(Context context, Intent intent) {\n\t            ConnectivityManager manager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);\n\t            NetworkInfo info = manager.getActiveNetworkInfo();\n\t\t/*\n\t            Intent intent1 = new Intent(context, SettingActivity.class);\n\t            startActivity(intent1);\n\t\t*/\n\t            if (info != null && info.isAvailable()) {\n\t                Toast.makeText(context, \"network is available\", Toast.LENGTH_SHORT).show();\n\t            } else {\n\t                Toast.makeText(context, \"network is unavailable\", Toast.LENGTH_SHORT).show();\n\t            }\n\t        }\n\t    }\n \n2.  注册广播，在onCreate中添加\n\n\t        IntentFilter intentFilter = new IntentFilter(\"android.net.conn.CONNECTIVITY_CHANGE\");\n\t        registerReceiver(receiver, intentFilter);\n\n3. 注意要在onDestroy函数中取消注册。\n\n## 自定义广播接收器\n* 与隐式intent类似，可以在intent-filter中添加自定义的action，发送广播时调用sendBroadCast(Intent intent)。此时发送的是标准广播，同时也可以发送一些数据，在intent当中。\n* sendOrderedBroadCast() 发送有序广播\n### 本地广播功能\nLocalBroadCastManager getInstance()方法\n  \n* 初始化localBroadCastManager\n>localBroadCastManager = LocalBroadCastManager.getInstance(this);\n\n* 注册\n>localBroadCastManager.register.....\n\n* 发送\n> localBroadCastManager.send......\n\n* 销毁\n> localBroadCastManager .unregister.....\n\n* 本地广播无法使用静态注册。 \n## tips\n* 在广播接收器里启动activity时，需要给Intent加入FLAG\\_ACTIVITY\\_NEW\\_TASK标志。","source":"_posts/broadcast.md","raw":"title: 广播接收器\ndate: 2016-09-26\ntag:\n- android\n- 第一行代码\n\n---\n<font style=\"font-family:微软雅黑\">\n## 广播机制\n* 标准广播\n\t> * 完全异步执行\n\t> * 所有广播接收器几乎同时收到\n* 有序广播\n\t> * 同步执行\n\t> * 优先级高的先收到，可以截断。\n## 系统广播\n\n## broadcast receiver\n* 不允许开启线程\n* onReceive 中的context的来源，是谁在调用这个函数 // todo\n### 静态注册\n>  manifest中注册\n  \n\t<receiver android:name=\"util.NetworkChangedReceiver\">\n            <intent-filter>\n                <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\"></action>\n            </intent-filter>\n        </receiver>\n### 动态注册\n> 代码中注册\n\n1. 继承类\n\n\t\t    class NetworkChangeReceiver extends BroadcastReceiver{\n\t\n\t        @Override\n\t        public void onReceive(Context context, Intent intent) {\n\t            ConnectivityManager manager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);\n\t            NetworkInfo info = manager.getActiveNetworkInfo();\n\t\t/*\n\t            Intent intent1 = new Intent(context, SettingActivity.class);\n\t            startActivity(intent1);\n\t\t*/\n\t            if (info != null && info.isAvailable()) {\n\t                Toast.makeText(context, \"network is available\", Toast.LENGTH_SHORT).show();\n\t            } else {\n\t                Toast.makeText(context, \"network is unavailable\", Toast.LENGTH_SHORT).show();\n\t            }\n\t        }\n\t    }\n \n2.  注册广播，在onCreate中添加\n\n\t        IntentFilter intentFilter = new IntentFilter(\"android.net.conn.CONNECTIVITY_CHANGE\");\n\t        registerReceiver(receiver, intentFilter);\n\n3. 注意要在onDestroy函数中取消注册。\n\n## 自定义广播接收器\n* 与隐式intent类似，可以在intent-filter中添加自定义的action，发送广播时调用sendBroadCast(Intent intent)。此时发送的是标准广播，同时也可以发送一些数据，在intent当中。\n* sendOrderedBroadCast() 发送有序广播\n### 本地广播功能\nLocalBroadCastManager getInstance()方法\n  \n* 初始化localBroadCastManager\n>localBroadCastManager = LocalBroadCastManager.getInstance(this);\n\n* 注册\n>localBroadCastManager.register.....\n\n* 发送\n> localBroadCastManager.send......\n\n* 销毁\n> localBroadCastManager .unregister.....\n\n* 本地广播无法使用静态注册。 \n## tips\n* 在广播接收器里启动activity时，需要给Intent加入FLAG\\_ACTIVITY\\_NEW\\_TASK标志。","slug":"broadcast","published":1,"updated":"2016-09-26T08:58:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r500001glq0hnqrle5uo","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"广播机制\"><a href=\"#广播机制\" class=\"headerlink\" title=\"广播机制\"></a>广播机制</h2><ul>\n<li>标准广播<blockquote>\n<ul>\n<li>完全异步执行</li>\n<li>所有广播接收器几乎同时收到</li>\n</ul>\n</blockquote>\n</li>\n<li>有序广播<blockquote>\n<ul>\n<li>同步执行</li>\n<li>优先级高的先收到，可以截断。</li>\n</ul>\n</blockquote>\n<h2 id=\"系统广播\"><a href=\"#系统广播\" class=\"headerlink\" title=\"系统广播\"></a>系统广播</h2></li>\n</ul>\n<h2 id=\"broadcast-receiver\"><a href=\"#broadcast-receiver\" class=\"headerlink\" title=\"broadcast receiver\"></a>broadcast receiver</h2><ul>\n<li>不允许开启线程</li>\n<li><p>onReceive 中的context的来源，是谁在调用这个函数 // todo</p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><blockquote>\n<p> manifest中注册</p>\n</blockquote>\n<p>  <receiver android:name=\"util.NetworkChangedReceiver\"></receiver></p>\n<pre><code>    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;&gt;&lt;/action&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt;\n</code></pre><h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><blockquote>\n<p>代码中注册</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><p>继承类</p>\n<pre><code>    class NetworkChangeReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        ConnectivityManager manager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);\n        NetworkInfo info = manager.getActiveNetworkInfo();\n/*\n        Intent intent1 = new Intent(context, SettingActivity.class);\n        startActivity(intent1);\n*/\n        if (info != null &amp;&amp; info.isAvailable()) {\n            Toast.makeText(context, &quot;network is available&quot;, Toast.LENGTH_SHORT).show();\n        } else {\n            Toast.makeText(context, &quot;network is unavailable&quot;, Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n</code></pre></li>\n<li><p>注册广播，在onCreate中添加</p>\n<pre><code>IntentFilter intentFilter = new IntentFilter(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);\nregisterReceiver(receiver, intentFilter);\n</code></pre></li>\n<li><p>注意要在onDestroy函数中取消注册。</p>\n</li>\n</ol>\n<h2 id=\"自定义广播接收器\"><a href=\"#自定义广播接收器\" class=\"headerlink\" title=\"自定义广播接收器\"></a>自定义广播接收器</h2><ul>\n<li>与隐式intent类似，可以在intent-filter中添加自定义的action，发送广播时调用sendBroadCast(Intent intent)。此时发送的是标准广播，同时也可以发送一些数据，在intent当中。</li>\n<li><p>sendOrderedBroadCast() 发送有序广播</p>\n<h3 id=\"本地广播功能\"><a href=\"#本地广播功能\" class=\"headerlink\" title=\"本地广播功能\"></a>本地广播功能</h3><p>LocalBroadCastManager getInstance()方法</p>\n</li>\n<li><p>初始化localBroadCastManager</p>\n<blockquote>\n<p>localBroadCastManager = LocalBroadCastManager.getInstance(this);</p>\n</blockquote>\n</li>\n<li><p>注册</p>\n<blockquote>\n<p>localBroadCastManager.register…..</p>\n</blockquote>\n</li>\n<li><p>发送</p>\n<blockquote>\n<p>localBroadCastManager.send……</p>\n</blockquote>\n</li>\n<li><p>销毁</p>\n<blockquote>\n<p>localBroadCastManager .unregister…..</p>\n</blockquote>\n</li>\n<li><p>本地广播无法使用静态注册。 </p>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2></li>\n<li>在广播接收器里启动activity时，需要给Intent加入FLAG_ACTIVITY_NEW_TASK标志。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"广播机制\"><a href=\"#广播机制\" class=\"headerlink\" title=\"广播机制\"></a>广播机制</h2><ul>\n<li>标准广播<blockquote>\n<ul>\n<li>完全异步执行</li>\n<li>所有广播接收器几乎同时收到</li>\n</ul>\n</blockquote>\n</li>\n<li>有序广播<blockquote>\n<ul>\n<li>同步执行</li>\n<li>优先级高的先收到，可以截断。</li>\n</ul>\n</blockquote>\n<h2 id=\"系统广播\"><a href=\"#系统广播\" class=\"headerlink\" title=\"系统广播\"></a>系统广播</h2></li>\n</ul>\n<h2 id=\"broadcast-receiver\"><a href=\"#broadcast-receiver\" class=\"headerlink\" title=\"broadcast receiver\"></a>broadcast receiver</h2><ul>\n<li>不允许开启线程</li>\n<li><p>onReceive 中的context的来源，是谁在调用这个函数 // todo</p>\n<h3 id=\"静态注册\"><a href=\"#静态注册\" class=\"headerlink\" title=\"静态注册\"></a>静态注册</h3><blockquote>\n<p> manifest中注册</p>\n</blockquote>\n<p>  <receiver android:name=\"util.NetworkChangedReceiver\"></receiver></p>\n<pre><code>    &lt;intent-filter&gt;\n        &lt;action android:name=&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;&gt;&lt;/action&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt;\n</code></pre><h3 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h3><blockquote>\n<p>代码中注册</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><p>继承类</p>\n<pre><code>    class NetworkChangeReceiver extends BroadcastReceiver{\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        ConnectivityManager manager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);\n        NetworkInfo info = manager.getActiveNetworkInfo();\n/*\n        Intent intent1 = new Intent(context, SettingActivity.class);\n        startActivity(intent1);\n*/\n        if (info != null &amp;&amp; info.isAvailable()) {\n            Toast.makeText(context, &quot;network is available&quot;, Toast.LENGTH_SHORT).show();\n        } else {\n            Toast.makeText(context, &quot;network is unavailable&quot;, Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n</code></pre></li>\n<li><p>注册广播，在onCreate中添加</p>\n<pre><code>IntentFilter intentFilter = new IntentFilter(&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;);\nregisterReceiver(receiver, intentFilter);\n</code></pre></li>\n<li><p>注意要在onDestroy函数中取消注册。</p>\n</li>\n</ol>\n<h2 id=\"自定义广播接收器\"><a href=\"#自定义广播接收器\" class=\"headerlink\" title=\"自定义广播接收器\"></a>自定义广播接收器</h2><ul>\n<li>与隐式intent类似，可以在intent-filter中添加自定义的action，发送广播时调用sendBroadCast(Intent intent)。此时发送的是标准广播，同时也可以发送一些数据，在intent当中。</li>\n<li><p>sendOrderedBroadCast() 发送有序广播</p>\n<h3 id=\"本地广播功能\"><a href=\"#本地广播功能\" class=\"headerlink\" title=\"本地广播功能\"></a>本地广播功能</h3><p>LocalBroadCastManager getInstance()方法</p>\n</li>\n<li><p>初始化localBroadCastManager</p>\n<blockquote>\n<p>localBroadCastManager = LocalBroadCastManager.getInstance(this);</p>\n</blockquote>\n</li>\n<li><p>注册</p>\n<blockquote>\n<p>localBroadCastManager.register…..</p>\n</blockquote>\n</li>\n<li><p>发送</p>\n<blockquote>\n<p>localBroadCastManager.send……</p>\n</blockquote>\n</li>\n<li><p>销毁</p>\n<blockquote>\n<p>localBroadCastManager .unregister…..</p>\n</blockquote>\n</li>\n<li><p>本地广播无法使用静态注册。 </p>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2></li>\n<li>在广播接收器里启动activity时，需要给Intent加入FLAG_ACTIVITY_NEW_TASK标志。</li>\n</ul>\n"},{"title":"elasticsearch","date":"2018-07-21T06:57:05.000Z","_content":"\n# 索引与倒排索引\n\n## 索引\n\n在传统数据库中,可以在某个字段上面建立索引以提高对于该字段的检索效率.\n\n> [索引](https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95)是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。\n>\n> 例如这样一个查询：select * from table1 where id=10000。如果没有索引，必须遍历整个表，直到ID等于10000的这一行被找到为止；有了[索引](https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853)之后(必须是在ID这一列上建立的索引)，即可在索引中查找。由于索引是经过某种算法优化过的，因而查找次数要少的多。可见，索引是用来定位的。\n\n<!--more-->\n\n## 倒排索引(Inverted index)\n\n根据关键字来查找文档,一个简单的例子如下:\n\n| 文档id | 文档内容 |\n| :----- | -------- |\n| 1      | 倒排索引 |\n| 2      | 搜索模式 |\n\n经过倒排索引之后:\n\n| 关键字 | 文档id |\n| ------ | ------ |\n| 倒排   | 1      |\n| 索引   | 1      |\n| 搜索   | 2      |\n| 模式   | 2      |\n\n这样,当我们要进行关键字的搜索时就可以快速查找到包含词组的具体的某一条记录.\n\n# 搜索模式\n\n## 分词\n\n## term\n\n## match\n\n## match_phrase\n\n## range\n\n## 地理位置\n\n# _all字段\n\n# 逻辑关系\n\n## should\n\n## must\n\n## must_not\n\n# 聚合\n\n## 普通聚合\n\n## 时间聚合\n\n## 地理位置聚合\n\n\n\n","source":"_posts/elasticsearch.md","raw":"---\ntitle: elasticsearch\ndate: 2018-07-021 14:57:05\ntags:\n- java\n- elasticsearch\n\n---\n\n# 索引与倒排索引\n\n## 索引\n\n在传统数据库中,可以在某个字段上面建立索引以提高对于该字段的检索效率.\n\n> [索引](https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95)是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。\n>\n> 例如这样一个查询：select * from table1 where id=10000。如果没有索引，必须遍历整个表，直到ID等于10000的这一行被找到为止；有了[索引](https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853)之后(必须是在ID这一列上建立的索引)，即可在索引中查找。由于索引是经过某种算法优化过的，因而查找次数要少的多。可见，索引是用来定位的。\n\n<!--more-->\n\n## 倒排索引(Inverted index)\n\n根据关键字来查找文档,一个简单的例子如下:\n\n| 文档id | 文档内容 |\n| :----- | -------- |\n| 1      | 倒排索引 |\n| 2      | 搜索模式 |\n\n经过倒排索引之后:\n\n| 关键字 | 文档id |\n| ------ | ------ |\n| 倒排   | 1      |\n| 索引   | 1      |\n| 搜索   | 2      |\n| 模式   | 2      |\n\n这样,当我们要进行关键字的搜索时就可以快速查找到包含词组的具体的某一条记录.\n\n# 搜索模式\n\n## 分词\n\n## term\n\n## match\n\n## match_phrase\n\n## range\n\n## 地理位置\n\n# _all字段\n\n# 逻辑关系\n\n## should\n\n## must\n\n## must_not\n\n# 聚合\n\n## 普通聚合\n\n## 时间聚合\n\n## 地理位置聚合\n\n\n\n","slug":"elasticsearch","published":1,"updated":"2018-07-21T06:13:06.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r502001jlq0h7m26tk1g","content":"<h1 id=\"索引与倒排索引\"><a href=\"#索引与倒排索引\" class=\"headerlink\" title=\"索引与倒排索引\"></a>索引与倒排索引</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在传统数据库中,可以在某个字段上面建立索引以提高对于该字段的检索效率.</p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95\" target=\"_blank\" rel=\"noopener\">索引</a>是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。</p>\n<p>例如这样一个查询：select * from table1 where id=10000。如果没有索引，必须遍历整个表，直到ID等于10000的这一行被找到为止；有了<a href=\"https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853\" target=\"_blank\" rel=\"noopener\">索引</a>之后(必须是在ID这一列上建立的索引)，即可在索引中查找。由于索引是经过某种算法优化过的，因而查找次数要少的多。可见，索引是用来定位的。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"倒排索引-Inverted-index\"><a href=\"#倒排索引-Inverted-index\" class=\"headerlink\" title=\"倒排索引(Inverted index)\"></a>倒排索引(Inverted index)</h2><p>根据关键字来查找文档,一个简单的例子如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">文档id</th>\n<th>文档内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>倒排索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>搜索模式</td>\n</tr>\n</tbody>\n</table>\n<p>经过倒排索引之后:</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>文档id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>倒排</td>\n<td>1</td>\n</tr>\n<tr>\n<td>索引</td>\n<td>1</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>2</td>\n</tr>\n<tr>\n<td>模式</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>这样,当我们要进行关键字的搜索时就可以快速查找到包含词组的具体的某一条记录.</p>\n<h1 id=\"搜索模式\"><a href=\"#搜索模式\" class=\"headerlink\" title=\"搜索模式\"></a>搜索模式</h1><h2 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h2><h2 id=\"term\"><a href=\"#term\" class=\"headerlink\" title=\"term\"></a>term</h2><h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><h2 id=\"match-phrase\"><a href=\"#match-phrase\" class=\"headerlink\" title=\"match_phrase\"></a>match_phrase</h2><h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h2><h2 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h2><h1 id=\"all字段\"><a href=\"#all字段\" class=\"headerlink\" title=\"_all字段\"></a>_all字段</h1><h1 id=\"逻辑关系\"><a href=\"#逻辑关系\" class=\"headerlink\" title=\"逻辑关系\"></a>逻辑关系</h1><h2 id=\"should\"><a href=\"#should\" class=\"headerlink\" title=\"should\"></a>should</h2><h2 id=\"must\"><a href=\"#must\" class=\"headerlink\" title=\"must\"></a>must</h2><h2 id=\"must-not\"><a href=\"#must-not\" class=\"headerlink\" title=\"must_not\"></a>must_not</h2><h1 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h1><h2 id=\"普通聚合\"><a href=\"#普通聚合\" class=\"headerlink\" title=\"普通聚合\"></a>普通聚合</h2><h2 id=\"时间聚合\"><a href=\"#时间聚合\" class=\"headerlink\" title=\"时间聚合\"></a>时间聚合</h2><h2 id=\"地理位置聚合\"><a href=\"#地理位置聚合\" class=\"headerlink\" title=\"地理位置聚合\"></a>地理位置聚合</h2>","site":{"data":{}},"excerpt":"<h1 id=\"索引与倒排索引\"><a href=\"#索引与倒排索引\" class=\"headerlink\" title=\"索引与倒排索引\"></a>索引与倒排索引</h1><h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>在传统数据库中,可以在某个字段上面建立索引以提高对于该字段的检索效率.</p>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95\" target=\"_blank\" rel=\"noopener\">索引</a>是对数据库表中一个或多个列（例如，employee 表的姓名 (name) 列）的值进行排序的结构。</p>\n<p>例如这样一个查询：select * from table1 where id=10000。如果没有索引，必须遍历整个表，直到ID等于10000的这一行被找到为止；有了<a href=\"https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853\" target=\"_blank\" rel=\"noopener\">索引</a>之后(必须是在ID这一列上建立的索引)，即可在索引中查找。由于索引是经过某种算法优化过的，因而查找次数要少的多。可见，索引是用来定位的。</p>\n</blockquote>","more":"<h2 id=\"倒排索引-Inverted-index\"><a href=\"#倒排索引-Inverted-index\" class=\"headerlink\" title=\"倒排索引(Inverted index)\"></a>倒排索引(Inverted index)</h2><p>根据关键字来查找文档,一个简单的例子如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">文档id</th>\n<th>文档内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td>倒排索引</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td>搜索模式</td>\n</tr>\n</tbody>\n</table>\n<p>经过倒排索引之后:</p>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>文档id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>倒排</td>\n<td>1</td>\n</tr>\n<tr>\n<td>索引</td>\n<td>1</td>\n</tr>\n<tr>\n<td>搜索</td>\n<td>2</td>\n</tr>\n<tr>\n<td>模式</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p>这样,当我们要进行关键字的搜索时就可以快速查找到包含词组的具体的某一条记录.</p>\n<h1 id=\"搜索模式\"><a href=\"#搜索模式\" class=\"headerlink\" title=\"搜索模式\"></a>搜索模式</h1><h2 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h2><h2 id=\"term\"><a href=\"#term\" class=\"headerlink\" title=\"term\"></a>term</h2><h2 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h2><h2 id=\"match-phrase\"><a href=\"#match-phrase\" class=\"headerlink\" title=\"match_phrase\"></a>match_phrase</h2><h2 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h2><h2 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h2><h1 id=\"all字段\"><a href=\"#all字段\" class=\"headerlink\" title=\"_all字段\"></a>_all字段</h1><h1 id=\"逻辑关系\"><a href=\"#逻辑关系\" class=\"headerlink\" title=\"逻辑关系\"></a>逻辑关系</h1><h2 id=\"should\"><a href=\"#should\" class=\"headerlink\" title=\"should\"></a>should</h2><h2 id=\"must\"><a href=\"#must\" class=\"headerlink\" title=\"must\"></a>must</h2><h2 id=\"must-not\"><a href=\"#must-not\" class=\"headerlink\" title=\"must_not\"></a>must_not</h2><h1 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h1><h2 id=\"普通聚合\"><a href=\"#普通聚合\" class=\"headerlink\" title=\"普通聚合\"></a>普通聚合</h2><h2 id=\"时间聚合\"><a href=\"#时间聚合\" class=\"headerlink\" title=\"时间聚合\"></a>时间聚合</h2><h2 id=\"地理位置聚合\"><a href=\"#地理位置聚合\" class=\"headerlink\" title=\"地理位置聚合\"></a>地理位置聚合</h2>"},{"title":"hexo第三方服务添加","date":"2017-07-16T13:42:11.000Z","_content":"通常来讲为next主题添加第三方服务(例如添加评论系统,使用百度统计,腾讯分析等)的过程都是类似的:\n- 注册网站,获得相应的appID或者key\n- 在主题的配置文件中设置相应的appID或者key\n- 重新生成并部署hexo即可\n<!--more-->\n## leancloud\n[为next主题添加统计信息](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud)\n## 搜索功能添加\n- 采用了next主题提供的local search功能\n- ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/27339084.jpg)\n## 来必力评论系统添加\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/46095068.jpg)\n## 参考\n[next主题第三方服务添加](http://theme-next.iissnan.com/third-party-services.html)\n\n","source":"_posts/hexo第三方服务添加.md","raw":"---\ntitle: hexo第三方服务添加\ndate: 2017-07-16 21:42:11\ntags: \n- hexo\n\n---\n通常来讲为next主题添加第三方服务(例如添加评论系统,使用百度统计,腾讯分析等)的过程都是类似的:\n- 注册网站,获得相应的appID或者key\n- 在主题的配置文件中设置相应的appID或者key\n- 重新生成并部署hexo即可\n<!--more-->\n## leancloud\n[为next主题添加统计信息](https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud)\n## 搜索功能添加\n- 采用了next主题提供的local search功能\n- ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/27339084.jpg)\n## 来必力评论系统添加\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/46095068.jpg)\n## 参考\n[next主题第三方服务添加](http://theme-next.iissnan.com/third-party-services.html)\n\n","slug":"hexo第三方服务添加","published":1,"updated":"2017-07-16T13:54:24.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r504001llq0hs50vsup7","content":"<p>通常来讲为next主题添加第三方服务(例如添加评论系统,使用百度统计,腾讯分析等)的过程都是类似的:</p>\n<ul>\n<li>注册网站,获得相应的appID或者key</li>\n<li>在主题的配置文件中设置相应的appID或者key</li>\n<li>重新生成并部署hexo即可<a id=\"more\"></a>\n<h2 id=\"leancloud\"><a href=\"#leancloud\" class=\"headerlink\" title=\"leancloud\"></a>leancloud</h2><a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud\" target=\"_blank\" rel=\"noopener\">为next主题添加统计信息</a><h2 id=\"搜索功能添加\"><a href=\"#搜索功能添加\" class=\"headerlink\" title=\"搜索功能添加\"></a>搜索功能添加</h2></li>\n<li>采用了next主题提供的local search功能</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/27339084.jpg\" alt=\"\"><h2 id=\"来必力评论系统添加\"><a href=\"#来必力评论系统添加\" class=\"headerlink\" title=\"来必力评论系统添加\"></a>来必力评论系统添加</h2><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/46095068.jpg\" alt=\"\"><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next主题第三方服务添加</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>通常来讲为next主题添加第三方服务(例如添加评论系统,使用百度统计,腾讯分析等)的过程都是类似的:</p>\n<ul>\n<li>注册网站,获得相应的appID或者key</li>\n<li>在主题的配置文件中设置相应的appID或者key</li>\n<li>重新生成并部署hexo即可","more":"<h2 id=\"leancloud\"><a href=\"#leancloud\" class=\"headerlink\" title=\"leancloud\"></a>leancloud</h2><a href=\"https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud\" target=\"_blank\" rel=\"noopener\">为next主题添加统计信息</a><h2 id=\"搜索功能添加\"><a href=\"#搜索功能添加\" class=\"headerlink\" title=\"搜索功能添加\"></a>搜索功能添加</h2></li>\n<li>采用了next主题提供的local search功能</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/27339084.jpg\" alt=\"\"><h2 id=\"来必力评论系统添加\"><a href=\"#来必力评论系统添加\" class=\"headerlink\" title=\"来必力评论系统添加\"></a>来必力评论系统添加</h2><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-16/46095068.jpg\" alt=\"\"><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next主题第三方服务添加</a></li>\n</ul>"},{"title":"javascript高级程序设计笔记","date":"2017-07-18T13:12:05.000Z","_content":"1. 使用var定义的变量为局部变量\n* 省略var定义的变量为全局变量\n\t<!--more-->\n* 五种简单数据类型\n\t* Undefined\n\t\t* 声明变量但是未初始化时变量的值\n\t* Null\n\t\t* 表示一个空对象的指针,在变量还没有真正保存对象时,**应该明确让其保存null值**.\n\t* Boolean\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/49622837.jpg)\n\t\t* 任何非空字符串为真\n\t\t* 任何非零数字值为真,0和NaN为假\n\t* Number\n\t\t* isNaN() 函数确实一个值是否\"不是数值\",注意其判断的过程会检测其toString的值,例如isNaN('1')返回false(意思是'1'是一个数字)\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/6387097.jpg)\n\t\t* parseInt函数\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/20388342.jpg)\n\t* String\n* 复杂数据类型\n\t* Object\n* 变量,作用域和内存问题\n\t* 在if以及for语句中定义的变量在循环执行结束后依旧存在.\n* Array数组的使用//todo\n\t* 创建数组的几种不同方式\n\t\t* var colors = new Array()\n\t\t* var colors = new Array(3)\n\t\t* var colors = new Array('A', 'B')\n\t\t* var colors = []\n\t* 注意,数组的length属性的动态性,可以通过直接设置其值来达到动态调整数组长度的目的\n\t* Array.isArray(colors)方法判断是否是数组\n\t* concat方法拼接返回新的数组\n\t* slice方法\n\t\t* 一个参数时返回开始位置直至结束的数组\n\t\t* 两个参数时返回指定位置之间的数组(包含开始但不包含结束位置的项\n\t* splice方法\n\t\t* 参数一:删除的第一项的位置\n\t\t* 参数二:删除的项数\n\t\t* 参数三,四,...n:插入的值\n\t* indexOf方法,从头开始查找,不存在返回-1\n\t* lastIndexOf,从结尾开始查找,不存在返回-1\n\t* 迭代方法\n\t\t* every()\n\t\t* filter()\n\t\t* forEach()\n\t\t* map()\n\t\t* some()\n\t\t* 注意,迭代方法的参数均为一个函数,此函数的参数为(item,index,array)\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-23/56979653.jpg)\n\t* 缩小方法(进行数组的迭代求和等)\n\t\t* reduce(function(prev, cur, index, array) {})\n\t\t* reduceRight(function(prev, cur, index, array) {})\n* Date类型的使用 //todo","source":"_posts/javascript高级程序设计笔记.md","raw":"---\ntitle: javascript高级程序设计笔记\ndate: 2017-07-18 21:12:05\ntags:\n- JavaScript\n\n---\n1. 使用var定义的变量为局部变量\n* 省略var定义的变量为全局变量\n\t<!--more-->\n* 五种简单数据类型\n\t* Undefined\n\t\t* 声明变量但是未初始化时变量的值\n\t* Null\n\t\t* 表示一个空对象的指针,在变量还没有真正保存对象时,**应该明确让其保存null值**.\n\t* Boolean\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/49622837.jpg)\n\t\t* 任何非空字符串为真\n\t\t* 任何非零数字值为真,0和NaN为假\n\t* Number\n\t\t* isNaN() 函数确实一个值是否\"不是数值\",注意其判断的过程会检测其toString的值,例如isNaN('1')返回false(意思是'1'是一个数字)\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/6387097.jpg)\n\t\t* parseInt函数\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/20388342.jpg)\n\t* String\n* 复杂数据类型\n\t* Object\n* 变量,作用域和内存问题\n\t* 在if以及for语句中定义的变量在循环执行结束后依旧存在.\n* Array数组的使用//todo\n\t* 创建数组的几种不同方式\n\t\t* var colors = new Array()\n\t\t* var colors = new Array(3)\n\t\t* var colors = new Array('A', 'B')\n\t\t* var colors = []\n\t* 注意,数组的length属性的动态性,可以通过直接设置其值来达到动态调整数组长度的目的\n\t* Array.isArray(colors)方法判断是否是数组\n\t* concat方法拼接返回新的数组\n\t* slice方法\n\t\t* 一个参数时返回开始位置直至结束的数组\n\t\t* 两个参数时返回指定位置之间的数组(包含开始但不包含结束位置的项\n\t* splice方法\n\t\t* 参数一:删除的第一项的位置\n\t\t* 参数二:删除的项数\n\t\t* 参数三,四,...n:插入的值\n\t* indexOf方法,从头开始查找,不存在返回-1\n\t* lastIndexOf,从结尾开始查找,不存在返回-1\n\t* 迭代方法\n\t\t* every()\n\t\t* filter()\n\t\t* forEach()\n\t\t* map()\n\t\t* some()\n\t\t* 注意,迭代方法的参数均为一个函数,此函数的参数为(item,index,array)\n\t\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/17-7-23/56979653.jpg)\n\t* 缩小方法(进行数组的迭代求和等)\n\t\t* reduce(function(prev, cur, index, array) {})\n\t\t* reduceRight(function(prev, cur, index, array) {})\n* Date类型的使用 //todo","slug":"javascript高级程序设计笔记","published":1,"updated":"2017-07-23T14:40:25.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r505001olq0h46jkh0uo","content":"<ol>\n<li>使用var定义的变量为局部变量</li>\n</ol>\n<ul>\n<li>省略var定义的变量为全局变量  <a id=\"more\"></a></li>\n<li>五种简单数据类型<ul>\n<li>Undefined<ul>\n<li>声明变量但是未初始化时变量的值</li>\n</ul>\n</li>\n<li>Null<ul>\n<li>表示一个空对象的指针,在变量还没有真正保存对象时,<strong>应该明确让其保存null值</strong>.</li>\n</ul>\n</li>\n<li>Boolean<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/49622837.jpg\" alt=\"\"></li>\n<li>任何非空字符串为真</li>\n<li>任何非零数字值为真,0和NaN为假</li>\n</ul>\n</li>\n<li>Number<ul>\n<li>isNaN() 函数确实一个值是否”不是数值”,注意其判断的过程会检测其toString的值,例如isNaN(‘1’)返回false(意思是’1’是一个数字)</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/6387097.jpg\" alt=\"\"></li>\n<li>parseInt函数</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/20388342.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>String</li>\n</ul>\n</li>\n<li>复杂数据类型<ul>\n<li>Object</li>\n</ul>\n</li>\n<li>变量,作用域和内存问题<ul>\n<li>在if以及for语句中定义的变量在循环执行结束后依旧存在.</li>\n</ul>\n</li>\n<li>Array数组的使用//todo<ul>\n<li>创建数组的几种不同方式<ul>\n<li>var colors = new Array()</li>\n<li>var colors = new Array(3)</li>\n<li>var colors = new Array(‘A’, ‘B’)</li>\n<li>var colors = []</li>\n</ul>\n</li>\n<li>注意,数组的length属性的动态性,可以通过直接设置其值来达到动态调整数组长度的目的</li>\n<li>Array.isArray(colors)方法判断是否是数组</li>\n<li>concat方法拼接返回新的数组</li>\n<li>slice方法<ul>\n<li>一个参数时返回开始位置直至结束的数组</li>\n<li>两个参数时返回指定位置之间的数组(包含开始但不包含结束位置的项</li>\n</ul>\n</li>\n<li>splice方法<ul>\n<li>参数一:删除的第一项的位置</li>\n<li>参数二:删除的项数</li>\n<li>参数三,四,…n:插入的值</li>\n</ul>\n</li>\n<li>indexOf方法,从头开始查找,不存在返回-1</li>\n<li>lastIndexOf,从结尾开始查找,不存在返回-1</li>\n<li>迭代方法<ul>\n<li>every()</li>\n<li>filter()</li>\n<li>forEach()</li>\n<li>map()</li>\n<li>some()</li>\n<li>注意,迭代方法的参数均为一个函数,此函数的参数为(item,index,array)</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-23/56979653.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>缩小方法(进行数组的迭代求和等)<ul>\n<li>reduce(function(prev, cur, index, array) {})</li>\n<li>reduceRight(function(prev, cur, index, array) {})</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Date类型的使用 //todo</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ol>\n<li>使用var定义的变量为局部变量</li>\n</ol>\n<ul>\n<li>省略var定义的变量为全局变量","more":"</li>\n<li>五种简单数据类型<ul>\n<li>Undefined<ul>\n<li>声明变量但是未初始化时变量的值</li>\n</ul>\n</li>\n<li>Null<ul>\n<li>表示一个空对象的指针,在变量还没有真正保存对象时,<strong>应该明确让其保存null值</strong>.</li>\n</ul>\n</li>\n<li>Boolean<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/49622837.jpg\" alt=\"\"></li>\n<li>任何非空字符串为真</li>\n<li>任何非零数字值为真,0和NaN为假</li>\n</ul>\n</li>\n<li>Number<ul>\n<li>isNaN() 函数确实一个值是否”不是数值”,注意其判断的过程会检测其toString的值,例如isNaN(‘1’)返回false(意思是’1’是一个数字)</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/6387097.jpg\" alt=\"\"></li>\n<li>parseInt函数</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-20/20388342.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>String</li>\n</ul>\n</li>\n<li>复杂数据类型<ul>\n<li>Object</li>\n</ul>\n</li>\n<li>变量,作用域和内存问题<ul>\n<li>在if以及for语句中定义的变量在循环执行结束后依旧存在.</li>\n</ul>\n</li>\n<li>Array数组的使用//todo<ul>\n<li>创建数组的几种不同方式<ul>\n<li>var colors = new Array()</li>\n<li>var colors = new Array(3)</li>\n<li>var colors = new Array(‘A’, ‘B’)</li>\n<li>var colors = []</li>\n</ul>\n</li>\n<li>注意,数组的length属性的动态性,可以通过直接设置其值来达到动态调整数组长度的目的</li>\n<li>Array.isArray(colors)方法判断是否是数组</li>\n<li>concat方法拼接返回新的数组</li>\n<li>slice方法<ul>\n<li>一个参数时返回开始位置直至结束的数组</li>\n<li>两个参数时返回指定位置之间的数组(包含开始但不包含结束位置的项</li>\n</ul>\n</li>\n<li>splice方法<ul>\n<li>参数一:删除的第一项的位置</li>\n<li>参数二:删除的项数</li>\n<li>参数三,四,…n:插入的值</li>\n</ul>\n</li>\n<li>indexOf方法,从头开始查找,不存在返回-1</li>\n<li>lastIndexOf,从结尾开始查找,不存在返回-1</li>\n<li>迭代方法<ul>\n<li>every()</li>\n<li>filter()</li>\n<li>forEach()</li>\n<li>map()</li>\n<li>some()</li>\n<li>注意,迭代方法的参数均为一个函数,此函数的参数为(item,index,array)</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-7-23/56979653.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>缩小方法(进行数组的迭代求和等)<ul>\n<li>reduce(function(prev, cur, index, array) {})</li>\n<li>reduceRight(function(prev, cur, index, array) {})</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Date类型的使用 //todo</li>\n</ul>"},{"title":"mybatis入门以及整合spring","date":"2017-08-23T12:39:27.000Z","_content":"# mybatis入门\n## 什么是mybatis\n* MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来(from维基百科)\n## 准备工作\n* mybatis的jar包\n* 一个数据库(我采用的是mysql)\n## 具体如下\n### 数据库结构如下\n![](http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823210127.png)\n<!--more-->\n### my-batis文件\n* 配置文件,配置连接的数据库,账户名,密码等,同时指定使用到的mapper的位置\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<!DOCTYPE configuration\n\t\t        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\t\t        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\t\t<configuration>\n\t\t    <environments default=\"development\">\n\t\t        <environment id=\"development\">\n\t\t            <transactionManager type=\"JDBC\"/>\n\t\t            <dataSource type=\"POOLED\">\n\t\t                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n\t\t                <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/db_develop\" />\n\t\t                <property name=\"username\" value=\"root\"/>\n\t\t                <property name=\"password\" value=\"password\"/>\n\t\t            </dataSource>\n\t\t        </environment>\n\t\t    </environments>\n\t\t    <mappers>\n\t\t        <mapper url=\"file:///F:/IDEAProject/WebAppLearn/UserMapper.xml\"/>\n\t\t    </mappers>\n\t\t</configuration>\n* mapper文件\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<!DOCTYPE mapper\n\t\t        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\t\t        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\t\t<mapper namespace=\"com.wilbert.mapper.UserMapping\">\n\t\t    <select id=\"getUser\" resultType=\"com.wilbert.model.User\">\n\t\t        select * from tb_user where id = #{id}\n\t\t    </select>\n\t\t</mapper>\n\t* 注意其中的namespace,命名空间,可以将其认为是java中的包,而id则为java中具体的类,这样在下面的调用就比较好理解了.\n* 数据模型类,一个普通的java类,拥有getter,setter方法.\n![](http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823211026.png)\n* 测试类\n\n\t\tpublic class MyBatisLearn {\n\t\t    public static void main(String[] args) throws IOException {\n\t\t        String resource = \"src/main/java/com/wilbert/config/mybatis-config.xml\";\n\t\t        InputStream inputStream = new FileInputStream(resource);\n\t\t        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\t\t        SqlSession sqlSession = sqlSessionFactory.openSession();\n\t\t        String statement = \"com.wilbert.mapper.UserMapping.getUser\";\n\t\t        User user = sqlSession.selectOne(statement, \"5b6f8d5739834dddb785c5e909471e69\");\n\t\t    }\n\t\t}\n\n\t* 需要注意的是statement,statement是由namespace+id构成.\n* 运行结果\n\n\t\tid:5b6f8d5739834dddb785c5e909471e69,name:a,password:a\n### 后续\n* 从上面可以看到,其中至关重要的是mapper文件,在mapper文件中我们配置了各式各样的sql,而mybatis也提供了很强大的语法来实现复杂的查询或者插入,更新等.详情可以进一步查看[http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n\n### 参考资料:\n[http://www.mybatis.org/mybatis-3/zh/getting-started.html](http://www.mybatis.org/mybatis-3/zh/getting-started.html)\n\n\n","source":"_posts/mybatis入门以及整合spring.md","raw":"---\ntitle: mybatis入门以及整合spring\ndate: 2017-08-23 20:39:27\ntags:\n- mybatis\n- spring\n\n---\n# mybatis入门\n## 什么是mybatis\n* MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来(from维基百科)\n## 准备工作\n* mybatis的jar包\n* 一个数据库(我采用的是mysql)\n## 具体如下\n### 数据库结构如下\n![](http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823210127.png)\n<!--more-->\n### my-batis文件\n* 配置文件,配置连接的数据库,账户名,密码等,同时指定使用到的mapper的位置\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<!DOCTYPE configuration\n\t\t        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\t\t        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n\t\t<configuration>\n\t\t    <environments default=\"development\">\n\t\t        <environment id=\"development\">\n\t\t            <transactionManager type=\"JDBC\"/>\n\t\t            <dataSource type=\"POOLED\">\n\t\t                <property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n\t\t                <property name=\"url\" value=\"jdbc:mysql://127.0.0.1:3306/db_develop\" />\n\t\t                <property name=\"username\" value=\"root\"/>\n\t\t                <property name=\"password\" value=\"password\"/>\n\t\t            </dataSource>\n\t\t        </environment>\n\t\t    </environments>\n\t\t    <mappers>\n\t\t        <mapper url=\"file:///F:/IDEAProject/WebAppLearn/UserMapper.xml\"/>\n\t\t    </mappers>\n\t\t</configuration>\n* mapper文件\n\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\t\t<!DOCTYPE mapper\n\t\t        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\t\t        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\t\t<mapper namespace=\"com.wilbert.mapper.UserMapping\">\n\t\t    <select id=\"getUser\" resultType=\"com.wilbert.model.User\">\n\t\t        select * from tb_user where id = #{id}\n\t\t    </select>\n\t\t</mapper>\n\t* 注意其中的namespace,命名空间,可以将其认为是java中的包,而id则为java中具体的类,这样在下面的调用就比较好理解了.\n* 数据模型类,一个普通的java类,拥有getter,setter方法.\n![](http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823211026.png)\n* 测试类\n\n\t\tpublic class MyBatisLearn {\n\t\t    public static void main(String[] args) throws IOException {\n\t\t        String resource = \"src/main/java/com/wilbert/config/mybatis-config.xml\";\n\t\t        InputStream inputStream = new FileInputStream(resource);\n\t\t        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\t\t        SqlSession sqlSession = sqlSessionFactory.openSession();\n\t\t        String statement = \"com.wilbert.mapper.UserMapping.getUser\";\n\t\t        User user = sqlSession.selectOne(statement, \"5b6f8d5739834dddb785c5e909471e69\");\n\t\t    }\n\t\t}\n\n\t* 需要注意的是statement,statement是由namespace+id构成.\n* 运行结果\n\n\t\tid:5b6f8d5739834dddb785c5e909471e69,name:a,password:a\n### 后续\n* 从上面可以看到,其中至关重要的是mapper文件,在mapper文件中我们配置了各式各样的sql,而mybatis也提供了很强大的语法来实现复杂的查询或者插入,更新等.详情可以进一步查看[http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html](http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html)\n\n\n### 参考资料:\n[http://www.mybatis.org/mybatis-3/zh/getting-started.html](http://www.mybatis.org/mybatis-3/zh/getting-started.html)\n\n\n","slug":"mybatis入门以及整合spring","published":1,"updated":"2017-08-23T13:50:35.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r506001qlq0hiuiaumdf","content":"<h1 id=\"mybatis入门\"><a href=\"#mybatis入门\" class=\"headerlink\" title=\"mybatis入门\"></a>mybatis入门</h1><h2 id=\"什么是mybatis\"><a href=\"#什么是mybatis\" class=\"headerlink\" title=\"什么是mybatis\"></a>什么是mybatis</h2><ul>\n<li>MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来(from维基百科)<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2></li>\n<li>mybatis的jar包</li>\n<li>一个数据库(我采用的是mysql)<h2 id=\"具体如下\"><a href=\"#具体如下\" class=\"headerlink\" title=\"具体如下\"></a>具体如下</h2><h3 id=\"数据库结构如下\"><a href=\"#数据库结构如下\" class=\"headerlink\" title=\"数据库结构如下\"></a>数据库结构如下</h3><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823210127.png\" alt=\"\"><a id=\"more\"></a>\n<h3 id=\"my-batis文件\"><a href=\"#my-batis文件\" class=\"headerlink\" title=\"my-batis文件\"></a>my-batis文件</h3></li>\n<li><p>配置文件,配置连接的数据库,账户名,密码等,同时指定使用到的mapper的位置</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;environments default=&quot;development&quot;&gt;\n        &lt;environment id=&quot;development&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/db_develop&quot; /&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;password&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;mappers&gt;\n        &lt;mapper url=&quot;file:///F:/IDEAProject/WebAppLearn/UserMapper.xml&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre></li>\n<li><p>mapper文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.wilbert.mapper.UserMapping&quot;&gt;\n    &lt;select id=&quot;getUser&quot; resultType=&quot;com.wilbert.model.User&quot;&gt;\n        select * from tb_user where id = #{id}\n    &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre><ul>\n<li>注意其中的namespace,命名空间,可以将其认为是java中的包,而id则为java中具体的类,这样在下面的调用就比较好理解了.</li>\n</ul>\n</li>\n<li>数据模型类,一个普通的java类,拥有getter,setter方法.<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823211026.png\" alt=\"\"></li>\n<li><p>测试类</p>\n<pre><code>public class MyBatisLearn {\n    public static void main(String[] args) throws IOException {\n        String resource = &quot;src/main/java/com/wilbert/config/mybatis-config.xml&quot;;\n        InputStream inputStream = new FileInputStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        String statement = &quot;com.wilbert.mapper.UserMapping.getUser&quot;;\n        User user = sqlSession.selectOne(statement, &quot;5b6f8d5739834dddb785c5e909471e69&quot;);\n    }\n}\n</code></pre><ul>\n<li>需要注意的是statement,statement是由namespace+id构成.</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<pre><code>id:5b6f8d5739834dddb785c5e909471e69,name:a,password:a\n</code></pre><h3 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h3></li>\n<li>从上面可以看到,其中至关重要的是mapper文件,在mapper文件中我们配置了各式各样的sql,而mybatis也提供了很强大的语法来实现复杂的查询或者插入,更新等.详情可以进一步查看<a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html</a></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料:\"></a>参考资料:</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/getting-started.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"mybatis入门\"><a href=\"#mybatis入门\" class=\"headerlink\" title=\"mybatis入门\"></a>mybatis入门</h1><h2 id=\"什么是mybatis\"><a href=\"#什么是mybatis\" class=\"headerlink\" title=\"什么是mybatis\"></a>什么是mybatis</h2><ul>\n<li>MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来(from维基百科)<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2></li>\n<li>mybatis的jar包</li>\n<li>一个数据库(我采用的是mysql)<h2 id=\"具体如下\"><a href=\"#具体如下\" class=\"headerlink\" title=\"具体如下\"></a>具体如下</h2><h3 id=\"数据库结构如下\"><a href=\"#数据库结构如下\" class=\"headerlink\" title=\"数据库结构如下\"></a>数据库结构如下</h3><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823210127.png\" alt=\"\">","more":"<h3 id=\"my-batis文件\"><a href=\"#my-batis文件\" class=\"headerlink\" title=\"my-batis文件\"></a>my-batis文件</h3></li>\n<li><p>配置文件,配置连接的数据库,账户名,密码等,同时指定使用到的mapper的位置</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n    &lt;environments default=&quot;development&quot;&gt;\n        &lt;environment id=&quot;development&quot;&gt;\n            &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n            &lt;dataSource type=&quot;POOLED&quot;&gt;\n                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/db_develop&quot; /&gt;\n                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n                &lt;property name=&quot;password&quot; value=&quot;password&quot;/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;mappers&gt;\n        &lt;mapper url=&quot;file:///F:/IDEAProject/WebAppLearn/UserMapper.xml&quot;/&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre></li>\n<li><p>mapper文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.wilbert.mapper.UserMapping&quot;&gt;\n    &lt;select id=&quot;getUser&quot; resultType=&quot;com.wilbert.model.User&quot;&gt;\n        select * from tb_user where id = #{id}\n    &lt;/select&gt;\n&lt;/mapper&gt;\n</code></pre><ul>\n<li>注意其中的namespace,命名空间,可以将其认为是java中的包,而id则为java中具体的类,这样在下面的调用就比较好理解了.</li>\n</ul>\n</li>\n<li>数据模型类,一个普通的java类,拥有getter,setter方法.<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170823211026.png\" alt=\"\"></li>\n<li><p>测试类</p>\n<pre><code>public class MyBatisLearn {\n    public static void main(String[] args) throws IOException {\n        String resource = &quot;src/main/java/com/wilbert/config/mybatis-config.xml&quot;;\n        InputStream inputStream = new FileInputStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n        String statement = &quot;com.wilbert.mapper.UserMapping.getUser&quot;;\n        User user = sqlSession.selectOne(statement, &quot;5b6f8d5739834dddb785c5e909471e69&quot;);\n    }\n}\n</code></pre><ul>\n<li>需要注意的是statement,statement是由namespace+id构成.</li>\n</ul>\n</li>\n<li><p>运行结果</p>\n<pre><code>id:5b6f8d5739834dddb785c5e909471e69,name:a,password:a\n</code></pre><h3 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h3></li>\n<li>从上面可以看到,其中至关重要的是mapper文件,在mapper文件中我们配置了各式各样的sql,而mybatis也提供了很强大的语法来实现复杂的查询或者插入,更新等.详情可以进一步查看<a href=\"http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html</a></li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料:\"></a>参考资料:</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/getting-started.html\" target=\"_blank\" rel=\"noopener\">http://www.mybatis.org/mybatis-3/zh/getting-started.html</a></p>"},{"title":"python-scrapy","date":"2018-01-28T14:52:21.000Z","_content":"# scrapy爬虫框架\n## 入门\n* 安装\n* 开始项目以及创建爬虫(参照命令行工具)\n\n\t\tscrapy startproject myproject  //初始化项目\n\t\tcd myproject\n\t\tscrapy genspider mydomain mydomain.com  //创建spider\n<!--more-->\n* 项目的文件目录以及功能\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/20686924.jpg)\n\t* item.py: 数据格式的定义\n\t* (爬虫名称).py: 具体的爬虫逻辑\n\t* pipelines.py: 对爬虫得到的数据(item进行处理)\n\t* settings.py: 对爬虫的一些定义(比如指定pipelines等)\n* 除此之外,比较实用的命令还有\n\t* 以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell,运行之后你可以在命令行中使用response选择器,这样就可以进行网页页面的分析而不用每次都启动spider\n\n\t\t\tscrapy shell \"url\"\n\t\t\t....略过执行代码\n\t\t\tresponse.xpath(\"//h1[@class='post-title']/a\") //选择器\n\n\t* 运行指定的spider\n\n\n\t\t\tscrapy crawl <spider>  -o 输出的文件\n\n\t* 更多的命令可以查看[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html)\n\n* 自定义爬虫item(items.py)\n\t\n\t\timport scrapy\n\t\tclass TutorialItem(scrapy.Item):\n\t\t    # define the fields for your item here like:\n\t\t    # name = scrapy.Field()\n\t\t    title = scrapy.Field()\n\t\t    link = scrapy.Field()\n    \t\t# pass\n* 定义爬虫逻辑(爬虫名称.py)\n\n\t\tclass WuweizhaoSpider(scrapy.Spider):\n\t\t    name = 'wuweizhao'\n\t\t    allowed_domains = ['wuweizhao.com']\n\t\t    start_urls = ['http://wuweizhao.com/']\n\t\t\n\t\t    def parse(self, response):\n\t\t        list = response.xpath(\"//h1[@class='post-title']/a\")\n\t\t        url = \"http://wuweizhao.com/\"\n\t\t        for a in list:\n\t\t            yield scrapy.Request(url + a.xpath(\"./@href\")[0].extract(), callback=self.parse_contents)\n\t\t        next_page = response.xpath(\"//nav/a[@class='extend next']/@href\").extract_first()\n\t\t        if next_page is not None:\n\t\t            next_page = url + next_page\n\t\t            print(next_page)\n\t\t            next_page = response.urljoin(next_page)\n\t\t            yield scrapy.Request(next_page, callback=self.parse)\n\t\t    def parse_contents(self, response):\n\t\t        item = TutorialItem()\n\t\t        item[\"title\"] = response.xpath(\"//h1[@class='post-title']/text()\").extract_first().replace(\"\\n\", \"\").strip()\n\t\t        item[\"link\"] = response.request.url\n\t\t        yield item\n\n\t* start_urls爬虫启动时访问的url\n\t* yield关键字:\n\t\t* 新的Request:会将url加入到访问队列当中\n\t\t* item(继承scrapy.Item的类):输出到命令行或者相应的文件当中(根据启动参数而定)\n\n* 自定义item处理(如果有需要的话)\n\t* 修改settings.py中的选项ITEM_PIPELINES\n\t* 修改pipelines.py\n\n\t\t\tclass TutorialPipeline(object):\n\t\t\t    def __init__(self):\n\t\t\t        pass\n\t\t\t    def process_item(self, item, spider):\n\t\t\t        return item\n\n## 参考\n[http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html)\n[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html)\n","source":"_posts/python-scrapy.md","raw":"---\ntitle: python-scrapy\ndate: 2018-01-28 22:52:21\ntags:\n- python\n- 爬虫\n\n\n---\n# scrapy爬虫框架\n## 入门\n* 安装\n* 开始项目以及创建爬虫(参照命令行工具)\n\n\t\tscrapy startproject myproject  //初始化项目\n\t\tcd myproject\n\t\tscrapy genspider mydomain mydomain.com  //创建spider\n<!--more-->\n* 项目的文件目录以及功能\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/20686924.jpg)\n\t* item.py: 数据格式的定义\n\t* (爬虫名称).py: 具体的爬虫逻辑\n\t* pipelines.py: 对爬虫得到的数据(item进行处理)\n\t* settings.py: 对爬虫的一些定义(比如指定pipelines等)\n* 除此之外,比较实用的命令还有\n\t* 以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell,运行之后你可以在命令行中使用response选择器,这样就可以进行网页页面的分析而不用每次都启动spider\n\n\t\t\tscrapy shell \"url\"\n\t\t\t....略过执行代码\n\t\t\tresponse.xpath(\"//h1[@class='post-title']/a\") //选择器\n\n\t* 运行指定的spider\n\n\n\t\t\tscrapy crawl <spider>  -o 输出的文件\n\n\t* 更多的命令可以查看[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html)\n\n* 自定义爬虫item(items.py)\n\t\n\t\timport scrapy\n\t\tclass TutorialItem(scrapy.Item):\n\t\t    # define the fields for your item here like:\n\t\t    # name = scrapy.Field()\n\t\t    title = scrapy.Field()\n\t\t    link = scrapy.Field()\n    \t\t# pass\n* 定义爬虫逻辑(爬虫名称.py)\n\n\t\tclass WuweizhaoSpider(scrapy.Spider):\n\t\t    name = 'wuweizhao'\n\t\t    allowed_domains = ['wuweizhao.com']\n\t\t    start_urls = ['http://wuweizhao.com/']\n\t\t\n\t\t    def parse(self, response):\n\t\t        list = response.xpath(\"//h1[@class='post-title']/a\")\n\t\t        url = \"http://wuweizhao.com/\"\n\t\t        for a in list:\n\t\t            yield scrapy.Request(url + a.xpath(\"./@href\")[0].extract(), callback=self.parse_contents)\n\t\t        next_page = response.xpath(\"//nav/a[@class='extend next']/@href\").extract_first()\n\t\t        if next_page is not None:\n\t\t            next_page = url + next_page\n\t\t            print(next_page)\n\t\t            next_page = response.urljoin(next_page)\n\t\t            yield scrapy.Request(next_page, callback=self.parse)\n\t\t    def parse_contents(self, response):\n\t\t        item = TutorialItem()\n\t\t        item[\"title\"] = response.xpath(\"//h1[@class='post-title']/text()\").extract_first().replace(\"\\n\", \"\").strip()\n\t\t        item[\"link\"] = response.request.url\n\t\t        yield item\n\n\t* start_urls爬虫启动时访问的url\n\t* yield关键字:\n\t\t* 新的Request:会将url加入到访问队列当中\n\t\t* item(继承scrapy.Item的类):输出到命令行或者相应的文件当中(根据启动参数而定)\n\n* 自定义item处理(如果有需要的话)\n\t* 修改settings.py中的选项ITEM_PIPELINES\n\t* 修改pipelines.py\n\n\t\t\tclass TutorialPipeline(object):\n\t\t\t    def __init__(self):\n\t\t\t        pass\n\t\t\t    def process_item(self, item, spider):\n\t\t\t        return item\n\n## 参考\n[http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html)\n[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html)\n","slug":"python-scrapy","published":1,"updated":"2018-03-03T14:04:22.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r508001tlq0hay9gbcsw","content":"<h1 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h1><h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><ul>\n<li>安装</li>\n<li><p>开始项目以及创建爬虫(参照命令行工具)</p>\n<pre><code>scrapy startproject myproject  //初始化项目\ncd myproject\nscrapy genspider mydomain mydomain.com  //创建spider\n</code></pre><a id=\"more\"></a></li>\n<li>项目的文件目录以及功能<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/20686924.jpg\" alt=\"\"></li>\n<li>item.py: 数据格式的定义</li>\n<li>(爬虫名称).py: 具体的爬虫逻辑</li>\n<li>pipelines.py: 对爬虫得到的数据(item进行处理)</li>\n<li>settings.py: 对爬虫的一些定义(比如指定pipelines等)</li>\n</ul>\n</li>\n<li><p>除此之外,比较实用的命令还有</p>\n<ul>\n<li><p>以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell,运行之后你可以在命令行中使用response选择器,这样就可以进行网页页面的分析而不用每次都启动spider</p>\n<pre><code>scrapy shell &quot;url&quot;\n....略过执行代码\nresponse.xpath(&quot;//h1[@class=&apos;post-title&apos;]/a&quot;) //选择器\n</code></pre></li>\n<li><p>运行指定的spider</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>        scrapy crawl &lt;spider&gt;  -o 输出的文件\n\n* 更多的命令可以查看[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html)\n</code></pre><ul>\n<li><p>自定义爬虫item(items.py)</p>\n<pre><code>import scrapy\nclass TutorialItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    link = scrapy.Field()\n    # pass\n</code></pre></li>\n<li><p>定义爬虫逻辑(爬虫名称.py)</p>\n<pre><code>class WuweizhaoSpider(scrapy.Spider):\n    name = &apos;wuweizhao&apos;\n    allowed_domains = [&apos;wuweizhao.com&apos;]\n    start_urls = [&apos;http://wuweizhao.com/&apos;]\n\n    def parse(self, response):\n        list = response.xpath(&quot;//h1[@class=&apos;post-title&apos;]/a&quot;)\n        url = &quot;http://wuweizhao.com/&quot;\n        for a in list:\n            yield scrapy.Request(url + a.xpath(&quot;./@href&quot;)[0].extract(), callback=self.parse_contents)\n        next_page = response.xpath(&quot;//nav/a[@class=&apos;extend next&apos;]/@href&quot;).extract_first()\n        if next_page is not None:\n            next_page = url + next_page\n            print(next_page)\n            next_page = response.urljoin(next_page)\n            yield scrapy.Request(next_page, callback=self.parse)\n    def parse_contents(self, response):\n        item = TutorialItem()\n        item[&quot;title&quot;] = response.xpath(&quot;//h1[@class=&apos;post-title&apos;]/text()&quot;).extract_first().replace(&quot;\\n&quot;, &quot;&quot;).strip()\n        item[&quot;link&quot;] = response.request.url\n        yield item\n</code></pre><ul>\n<li>start_urls爬虫启动时访问的url</li>\n<li>yield关键字:<ul>\n<li>新的Request:会将url加入到访问队列当中</li>\n<li>item(继承scrapy.Item的类):输出到命令行或者相应的文件当中(根据启动参数而定)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>自定义item处理(如果有需要的话)</p>\n<ul>\n<li>修改settings.py中的选项ITEM_PIPELINES</li>\n<li><p>修改pipelines.py</p>\n<pre><code>class TutorialPipeline(object):\n    def __init__(self):\n        pass\n    def process_item(self, item, spider):\n        return item\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html\" target=\"_blank\" rel=\"noopener\">http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html</a><br><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html\" target=\"_blank\" rel=\"noopener\">http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"scrapy爬虫框架\"><a href=\"#scrapy爬虫框架\" class=\"headerlink\" title=\"scrapy爬虫框架\"></a>scrapy爬虫框架</h1><h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><ul>\n<li>安装</li>\n<li><p>开始项目以及创建爬虫(参照命令行工具)</p>\n<pre><code>scrapy startproject myproject  //初始化项目\ncd myproject\nscrapy genspider mydomain mydomain.com  //创建spider\n</code></pre>","more":"</li>\n<li>项目的文件目录以及功能<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/20686924.jpg\" alt=\"\"></li>\n<li>item.py: 数据格式的定义</li>\n<li>(爬虫名称).py: 具体的爬虫逻辑</li>\n<li>pipelines.py: 对爬虫得到的数据(item进行处理)</li>\n<li>settings.py: 对爬虫的一些定义(比如指定pipelines等)</li>\n</ul>\n</li>\n<li><p>除此之外,比较实用的命令还有</p>\n<ul>\n<li><p>以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell,运行之后你可以在命令行中使用response选择器,这样就可以进行网页页面的分析而不用每次都启动spider</p>\n<pre><code>scrapy shell &quot;url&quot;\n....略过执行代码\nresponse.xpath(&quot;//h1[@class=&apos;post-title&apos;]/a&quot;) //选择器\n</code></pre></li>\n<li><p>运行指定的spider</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>        scrapy crawl &lt;spider&gt;  -o 输出的文件\n\n* 更多的命令可以查看[http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html](http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html)\n</code></pre><ul>\n<li><p>自定义爬虫item(items.py)</p>\n<pre><code>import scrapy\nclass TutorialItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    title = scrapy.Field()\n    link = scrapy.Field()\n    # pass\n</code></pre></li>\n<li><p>定义爬虫逻辑(爬虫名称.py)</p>\n<pre><code>class WuweizhaoSpider(scrapy.Spider):\n    name = &apos;wuweizhao&apos;\n    allowed_domains = [&apos;wuweizhao.com&apos;]\n    start_urls = [&apos;http://wuweizhao.com/&apos;]\n\n    def parse(self, response):\n        list = response.xpath(&quot;//h1[@class=&apos;post-title&apos;]/a&quot;)\n        url = &quot;http://wuweizhao.com/&quot;\n        for a in list:\n            yield scrapy.Request(url + a.xpath(&quot;./@href&quot;)[0].extract(), callback=self.parse_contents)\n        next_page = response.xpath(&quot;//nav/a[@class=&apos;extend next&apos;]/@href&quot;).extract_first()\n        if next_page is not None:\n            next_page = url + next_page\n            print(next_page)\n            next_page = response.urljoin(next_page)\n            yield scrapy.Request(next_page, callback=self.parse)\n    def parse_contents(self, response):\n        item = TutorialItem()\n        item[&quot;title&quot;] = response.xpath(&quot;//h1[@class=&apos;post-title&apos;]/text()&quot;).extract_first().replace(&quot;\\n&quot;, &quot;&quot;).strip()\n        item[&quot;link&quot;] = response.request.url\n        yield item\n</code></pre><ul>\n<li>start_urls爬虫启动时访问的url</li>\n<li>yield关键字:<ul>\n<li>新的Request:会将url加入到访问队列当中</li>\n<li>item(继承scrapy.Item的类):输出到命令行或者相应的文件当中(根据启动参数而定)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>自定义item处理(如果有需要的话)</p>\n<ul>\n<li>修改settings.py中的选项ITEM_PIPELINES</li>\n<li><p>修改pipelines.py</p>\n<pre><code>class TutorialPipeline(object):\n    def __init__(self):\n        pass\n    def process_item(self, item, spider):\n        return item\n</code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html\" target=\"_blank\" rel=\"noopener\">http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html</a><br><a href=\"http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html\" target=\"_blank\" rel=\"noopener\">http://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/selectors.html</a></p>"},{"title":"python-tips","date":"2018-01-28T14:11:30.000Z","_content":"# python-tips\n## 列表生成式\n<!--more-->\n* Python内置的非常简单却强大的可以用来**创建list**的生成式\n* 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/37747048.jpg)\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/79156020.jpg)\n\n## 生成器\n* 当我们需要创建100万个元素的列表的时候,如果这些元素可以按照一定的规则去生成,那么我们就不需要在内存中同时维护这100万个元素,而是通过在迭代中边去生成元素来实现.\n* 把一个列表生成式的[]改成()，就创建了一个generator\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/48319854.jpg)\n* 需要注意的是,我们一般不会显式调用next方法,而是使用for in迭代\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/22622518.jpg)\n* 如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/80097627.jpg)\n\t* generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。\n\n","source":"_posts/python-tips.md","raw":"---\ntitle: python-tips\ndate: 2018-01-28 22:11:30\ntags:\n- python\n- tips\n\n\n---\n# python-tips\n## 列表生成式\n<!--more-->\n* Python内置的非常简单却强大的可以用来**创建list**的生成式\n* 写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/37747048.jpg)\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/79156020.jpg)\n\n## 生成器\n* 当我们需要创建100万个元素的列表的时候,如果这些元素可以按照一定的规则去生成,那么我们就不需要在内存中同时维护这100万个元素,而是通过在迭代中边去生成元素来实现.\n* 把一个列表生成式的[]改成()，就创建了一个generator\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/48319854.jpg)\n* 需要注意的是,我们一般不会显式调用next方法,而是使用for in迭代\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/22622518.jpg)\n* 如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。\n\t* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/80097627.jpg)\n\t* generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。\n\n","slug":"python-tips","published":1,"updated":"2018-03-03T14:05:10.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50e001vlq0h0q3q7k83","content":"<h1 id=\"python-tips\"><a href=\"#python-tips\" class=\"headerlink\" title=\"python-tips\"></a>python-tips</h1><h2 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h2><a id=\"more\"></a>\n<ul>\n<li>Python内置的非常简单却强大的可以用来<strong>创建list</strong>的生成式</li>\n<li>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/37747048.jpg\" alt=\"\"></li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/79156020.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><ul>\n<li>当我们需要创建100万个元素的列表的时候,如果这些元素可以按照一定的规则去生成,那么我们就不需要在内存中同时维护这100万个元素,而是通过在迭代中边去生成元素来实现.</li>\n<li>把一个列表生成式的[]改成()，就创建了一个generator<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/48319854.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>需要注意的是,我们一般不会显式调用next方法,而是使用for in迭代<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/22622518.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/80097627.jpg\" alt=\"\"></li>\n<li>generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"python-tips\"><a href=\"#python-tips\" class=\"headerlink\" title=\"python-tips\"></a>python-tips</h1><h2 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h2>","more":"<ul>\n<li>Python内置的非常简单却强大的可以用来<strong>创建list</strong>的生成式</li>\n<li>写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/37747048.jpg\" alt=\"\"></li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/79156020.jpg\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h2><ul>\n<li>当我们需要创建100万个元素的列表的时候,如果这些元素可以按照一定的规则去生成,那么我们就不需要在内存中同时维护这100万个元素,而是通过在迭代中边去生成元素来实现.</li>\n<li>把一个列表生成式的[]改成()，就创建了一个generator<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/48319854.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>需要注意的是,我们一般不会显式调用next方法,而是使用for in迭代<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/22622518.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。<ul>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-28/80097627.jpg\" alt=\"\"></li>\n<li>generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。</li>\n</ul>\n</li>\n</ul>"},{"title":"servletRequest中读取body的问题","date":"2018-01-26T08:55:07.000Z","_content":"\n# ServletRequest中读取body的数据\n\t\n\t InputStream body = request.getInputStream();\n## 问题\n* 数据流仅仅能够读取一次,如果你想要多次读取(在多个调用链中)(比如说在多个过滤器中),例如\n\n\t\tchain.doFilter(request, response);\n这样后面的调用中request将读取不到body的数据.\n<!--more-->\n## 解决\n* 继承实现HttpServletRequest接口的HttpServletRequestWrapper,重载getInputStream方法.\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-26/37804903.jpg)\n\n## 具体实现\n### BufferedServletRequestWrapper类\n\n\tpublic class BufferedServletRequestWrapper extends HttpServletRequestWrapper {\n\t    private byte[] buffer;\n\t    public BufferedServletRequestWrapper(HttpServletRequest request) throws IOException {\n\t        super(request);\n\t        InputStream is = request.getInputStream();\n\t        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t        byte buff[] = new byte[ 1024 ];\n\t        int read;\n\t        while( ( read = is.read( buff ) ) > 0 ) {\n\t            baos.write( buff, 0, read );\n\t        }\n\t        this.buffer = baos.toByteArray();\n\t    }\n\t    @Override\n\t    public ServletInputStream getInputStream() throws IOException {\n\t        return new BufferedServletInputStream( this.buffer );\n\t    }\n\t}\n### 在过滤器中\n\n\tServletRequest requestWrapper = new BufferedServletRequestWrapper(req);\n\tInputStream inputStream = requestWrapper.getInputStream();\n\tString content = IOUtils.toString(inputStream, req\n\t\t\t.getCharacterEncoding());\n\t/**对内容进行处理**/\n\tchain.doFilter(requestWrapper, response);\n\t/**由于我们在初始化时保存了byte,重载了getInputStream方法,所以后续调用时可以获得body中的数据**/","source":"_posts/servletRequest中读取body的问题.md","raw":"---\ntitle: servletRequest中读取body的问题\ndate: 2018-01-26 16:55:07\ntags:\n- java web\n- servlet\n---\n\n# ServletRequest中读取body的数据\n\t\n\t InputStream body = request.getInputStream();\n## 问题\n* 数据流仅仅能够读取一次,如果你想要多次读取(在多个调用链中)(比如说在多个过滤器中),例如\n\n\t\tchain.doFilter(request, response);\n这样后面的调用中request将读取不到body的数据.\n<!--more-->\n## 解决\n* 继承实现HttpServletRequest接口的HttpServletRequestWrapper,重载getInputStream方法.\n* ![](http://7xkzud.com1.z0.glb.clouddn.com/18-1-26/37804903.jpg)\n\n## 具体实现\n### BufferedServletRequestWrapper类\n\n\tpublic class BufferedServletRequestWrapper extends HttpServletRequestWrapper {\n\t    private byte[] buffer;\n\t    public BufferedServletRequestWrapper(HttpServletRequest request) throws IOException {\n\t        super(request);\n\t        InputStream is = request.getInputStream();\n\t        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t        byte buff[] = new byte[ 1024 ];\n\t        int read;\n\t        while( ( read = is.read( buff ) ) > 0 ) {\n\t            baos.write( buff, 0, read );\n\t        }\n\t        this.buffer = baos.toByteArray();\n\t    }\n\t    @Override\n\t    public ServletInputStream getInputStream() throws IOException {\n\t        return new BufferedServletInputStream( this.buffer );\n\t    }\n\t}\n### 在过滤器中\n\n\tServletRequest requestWrapper = new BufferedServletRequestWrapper(req);\n\tInputStream inputStream = requestWrapper.getInputStream();\n\tString content = IOUtils.toString(inputStream, req\n\t\t\t.getCharacterEncoding());\n\t/**对内容进行处理**/\n\tchain.doFilter(requestWrapper, response);\n\t/**由于我们在初始化时保存了byte,重载了getInputStream方法,所以后续调用时可以获得body中的数据**/","slug":"servletRequest中读取body的问题","published":1,"updated":"2018-01-26T09:06:12.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50f001ylq0hir2hxg93","content":"<h1 id=\"ServletRequest中读取body的数据\"><a href=\"#ServletRequest中读取body的数据\" class=\"headerlink\" title=\"ServletRequest中读取body的数据\"></a>ServletRequest中读取body的数据</h1><pre><code>InputStream body = request.getInputStream();\n</code></pre><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li><p>数据流仅仅能够读取一次,如果你想要多次读取(在多个调用链中)(比如说在多个过滤器中),例如</p>\n<pre><code>chain.doFilter(request, response);\n</code></pre><p>这样后面的调用中request将读取不到body的数据.</p>\n<a id=\"more\"></a>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2></li>\n<li>继承实现HttpServletRequest接口的HttpServletRequestWrapper,重载getInputStream方法.</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-26/37804903.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"BufferedServletRequestWrapper类\"><a href=\"#BufferedServletRequestWrapper类\" class=\"headerlink\" title=\"BufferedServletRequestWrapper类\"></a>BufferedServletRequestWrapper类</h3><pre><code>public class BufferedServletRequestWrapper extends HttpServletRequestWrapper {\n    private byte[] buffer;\n    public BufferedServletRequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n        InputStream is = request.getInputStream();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte buff[] = new byte[ 1024 ];\n        int read;\n        while( ( read = is.read( buff ) ) &gt; 0 ) {\n            baos.write( buff, 0, read );\n        }\n        this.buffer = baos.toByteArray();\n    }\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        return new BufferedServletInputStream( this.buffer );\n    }\n}\n</code></pre><h3 id=\"在过滤器中\"><a href=\"#在过滤器中\" class=\"headerlink\" title=\"在过滤器中\"></a>在过滤器中</h3><pre><code>ServletRequest requestWrapper = new BufferedServletRequestWrapper(req);\nInputStream inputStream = requestWrapper.getInputStream();\nString content = IOUtils.toString(inputStream, req\n        .getCharacterEncoding());\n/**对内容进行处理**/\nchain.doFilter(requestWrapper, response);\n/**由于我们在初始化时保存了byte,重载了getInputStream方法,所以后续调用时可以获得body中的数据**/\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"ServletRequest中读取body的数据\"><a href=\"#ServletRequest中读取body的数据\" class=\"headerlink\" title=\"ServletRequest中读取body的数据\"></a>ServletRequest中读取body的数据</h1><pre><code>InputStream body = request.getInputStream();\n</code></pre><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li><p>数据流仅仅能够读取一次,如果你想要多次读取(在多个调用链中)(比如说在多个过滤器中),例如</p>\n<pre><code>chain.doFilter(request, response);\n</code></pre><p>这样后面的调用中request将读取不到body的数据.</p>","more":"<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2></li>\n<li>继承实现HttpServletRequest接口的HttpServletRequestWrapper,重载getInputStream方法.</li>\n<li><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/18-1-26/37804903.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"BufferedServletRequestWrapper类\"><a href=\"#BufferedServletRequestWrapper类\" class=\"headerlink\" title=\"BufferedServletRequestWrapper类\"></a>BufferedServletRequestWrapper类</h3><pre><code>public class BufferedServletRequestWrapper extends HttpServletRequestWrapper {\n    private byte[] buffer;\n    public BufferedServletRequestWrapper(HttpServletRequest request) throws IOException {\n        super(request);\n        InputStream is = request.getInputStream();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        byte buff[] = new byte[ 1024 ];\n        int read;\n        while( ( read = is.read( buff ) ) &gt; 0 ) {\n            baos.write( buff, 0, read );\n        }\n        this.buffer = baos.toByteArray();\n    }\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        return new BufferedServletInputStream( this.buffer );\n    }\n}\n</code></pre><h3 id=\"在过滤器中\"><a href=\"#在过滤器中\" class=\"headerlink\" title=\"在过滤器中\"></a>在过滤器中</h3><pre><code>ServletRequest requestWrapper = new BufferedServletRequestWrapper(req);\nInputStream inputStream = requestWrapper.getInputStream();\nString content = IOUtils.toString(inputStream, req\n        .getCharacterEncoding());\n/**对内容进行处理**/\nchain.doFilter(requestWrapper, response);\n/**由于我们在初始化时保存了byte,重载了getInputStream方法,所以后续调用时可以获得body中的数据**/\n</code></pre>"},{"title":"session与cookie","date":"2018-02-07T05:42:52.000Z","_content":"# session与cookie\n## cookie\n* 在服务端中设置,在前端中需要看情况\n\t* 当设置了httponly时,仅能在服务端设置,js端既不能读取也不能够设置.\n\t* 无设置httponly时,前端也可以设置和读取cookie的值\n\n<!--more-->\n## session\n* 需要注意的是,session指的是\"对话\"\n\n\t\treq.getSession().setAttribute(\"session\", \"value\");\n* 按照如上的代码,\n\n\t\treq.getSession().getAttribute(\"session\")\n* 就可以获得value值\n* 可以想象成服务器维持了一个map,map的key是sessionID,而值则是一个个的键值对,而sessionID的传递方式则是通过cookie来实现的(在初始化session时会生成并且设置cookie,而之后cookie的提交则会带上sessionID)\n* 除此之外,在禁用cookie的情况下,还能通过url重写的方式来实现sessionID的传递\n* 在分布式部署的情况下,session的同步是一个问题,比较简单的解决方式是使用spring session+redis实现.\n\n\n","source":"_posts/session与cookie.md","raw":"---\ntitle: session与cookie\ndate: 2018-02-07 13:42:52\ntags:\n- session\n- cookie\n- java\n- java web\n\n\n---\n# session与cookie\n## cookie\n* 在服务端中设置,在前端中需要看情况\n\t* 当设置了httponly时,仅能在服务端设置,js端既不能读取也不能够设置.\n\t* 无设置httponly时,前端也可以设置和读取cookie的值\n\n<!--more-->\n## session\n* 需要注意的是,session指的是\"对话\"\n\n\t\treq.getSession().setAttribute(\"session\", \"value\");\n* 按照如上的代码,\n\n\t\treq.getSession().getAttribute(\"session\")\n* 就可以获得value值\n* 可以想象成服务器维持了一个map,map的key是sessionID,而值则是一个个的键值对,而sessionID的传递方式则是通过cookie来实现的(在初始化session时会生成并且设置cookie,而之后cookie的提交则会带上sessionID)\n* 除此之外,在禁用cookie的情况下,还能通过url重写的方式来实现sessionID的传递\n* 在分布式部署的情况下,session的同步是一个问题,比较简单的解决方式是使用spring session+redis实现.\n\n\n","slug":"session与cookie","published":1,"updated":"2018-05-12T12:33:29.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50g0020lq0hmve3plbn","content":"<h1 id=\"session与cookie\"><a href=\"#session与cookie\" class=\"headerlink\" title=\"session与cookie\"></a>session与cookie</h1><h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><ul>\n<li>在服务端中设置,在前端中需要看情况<ul>\n<li>当设置了httponly时,仅能在服务端设置,js端既不能读取也不能够设置.</li>\n<li>无设置httponly时,前端也可以设置和读取cookie的值</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><ul>\n<li><p>需要注意的是,session指的是”对话”</p>\n<pre><code>req.getSession().setAttribute(&quot;session&quot;, &quot;value&quot;);\n</code></pre></li>\n<li><p>按照如上的代码,</p>\n<pre><code>req.getSession().getAttribute(&quot;session&quot;)\n</code></pre></li>\n<li>就可以获得value值</li>\n<li>可以想象成服务器维持了一个map,map的key是sessionID,而值则是一个个的键值对,而sessionID的传递方式则是通过cookie来实现的(在初始化session时会生成并且设置cookie,而之后cookie的提交则会带上sessionID)</li>\n<li>除此之外,在禁用cookie的情况下,还能通过url重写的方式来实现sessionID的传递</li>\n<li>在分布式部署的情况下,session的同步是一个问题,比较简单的解决方式是使用spring session+redis实现.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"session与cookie\"><a href=\"#session与cookie\" class=\"headerlink\" title=\"session与cookie\"></a>session与cookie</h1><h2 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h2><ul>\n<li>在服务端中设置,在前端中需要看情况<ul>\n<li>当设置了httponly时,仅能在服务端设置,js端既不能读取也不能够设置.</li>\n<li>无设置httponly时,前端也可以设置和读取cookie的值</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><ul>\n<li><p>需要注意的是,session指的是”对话”</p>\n<pre><code>req.getSession().setAttribute(&quot;session&quot;, &quot;value&quot;);\n</code></pre></li>\n<li><p>按照如上的代码,</p>\n<pre><code>req.getSession().getAttribute(&quot;session&quot;)\n</code></pre></li>\n<li>就可以获得value值</li>\n<li>可以想象成服务器维持了一个map,map的key是sessionID,而值则是一个个的键值对,而sessionID的传递方式则是通过cookie来实现的(在初始化session时会生成并且设置cookie,而之后cookie的提交则会带上sessionID)</li>\n<li>除此之外,在禁用cookie的情况下,还能通过url重写的方式来实现sessionID的传递</li>\n<li>在分布式部署的情况下,session的同步是一个问题,比较简单的解决方式是使用spring session+redis实现.</li>\n</ul>"},{"title":"by以及having的使用","date":"2016-10-28T07:25:31.000Z","_content":"## group by 与 having\n* 分组:将表格中的数据按照某一列进行分组,通常会搭配聚合函数使用,常见的聚合函数有如下几种\n\t* sum\n\t* avg\n\t* count\n\t* min max\n<!--more-->\n* eg\n\t* 存在一个表格,结构如下\n\t\t* ![](http://i.imgur.com/dLaEmbM.png)\n\t\t* [http://www.sqlcourse2.com/items_ordered.html](http://www.sqlcourse2.com/items_ordered.html)\n\t* 将订单按照customerid进行分组,并且算出每一个客户对应的订单总价\n\t\t\n\t\t\tselect i.customerid, sum(price) \n\t\t\tfrom items_ordered i\n\t\t\tgroup by i.customerid\n\t\t\thaving sum(price) > 100;\n\t* tips:\n\t\t* 假设存在另外一个表:存放customerid以及相应的客户信息.当你想要联合查询时,一般是先join之后再进行group by的操作\n\t\t* having是在分组之后上面进行的操作,而where的操作是在原来的每一条记录上面进行操作.\n\t\t\n\t\t\t\tselect i.customerid, avg(price) from items_ordered i\n\t\t\t\twhere i.price > 10\n\t\t\t\tand i.price < 100\n\t\t\t\tgroup by i.customerid\n\t\t\t\thaving sum(price) > 100;\n\t\t* 这个查询语句的意思是:在表中先找出price在10和100之间的项,将其按照customerid进行分组,在每个分组中找出总价值大于100的分组,打印出其customerid以及平均价值.","source":"_posts/sql中group by以及having的使用.md","raw":"---\ntitle: by以及having的使用\ndate: 2016-10-28 15:25:31\ntags:\n- sql\n\n---\n## group by 与 having\n* 分组:将表格中的数据按照某一列进行分组,通常会搭配聚合函数使用,常见的聚合函数有如下几种\n\t* sum\n\t* avg\n\t* count\n\t* min max\n<!--more-->\n* eg\n\t* 存在一个表格,结构如下\n\t\t* ![](http://i.imgur.com/dLaEmbM.png)\n\t\t* [http://www.sqlcourse2.com/items_ordered.html](http://www.sqlcourse2.com/items_ordered.html)\n\t* 将订单按照customerid进行分组,并且算出每一个客户对应的订单总价\n\t\t\n\t\t\tselect i.customerid, sum(price) \n\t\t\tfrom items_ordered i\n\t\t\tgroup by i.customerid\n\t\t\thaving sum(price) > 100;\n\t* tips:\n\t\t* 假设存在另外一个表:存放customerid以及相应的客户信息.当你想要联合查询时,一般是先join之后再进行group by的操作\n\t\t* having是在分组之后上面进行的操作,而where的操作是在原来的每一条记录上面进行操作.\n\t\t\n\t\t\t\tselect i.customerid, avg(price) from items_ordered i\n\t\t\t\twhere i.price > 10\n\t\t\t\tand i.price < 100\n\t\t\t\tgroup by i.customerid\n\t\t\t\thaving sum(price) > 100;\n\t\t* 这个查询语句的意思是:在表中先找出price在10和100之间的项,将其按照customerid进行分组,在每个分组中找出总价值大于100的分组,打印出其customerid以及平均价值.","slug":"sql中group by以及having的使用","published":1,"updated":"2016-10-28T07:43:55.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50i0023lq0hd7a9fc1m","content":"<h2 id=\"group-by-与-having\"><a href=\"#group-by-与-having\" class=\"headerlink\" title=\"group by 与 having\"></a>group by 与 having</h2><ul>\n<li>分组:将表格中的数据按照某一列进行分组,通常会搭配聚合函数使用,常见的聚合函数有如下几种<ul>\n<li>sum</li>\n<li>avg</li>\n<li>count</li>\n<li>min max<a id=\"more\"></a></li>\n</ul>\n</li>\n<li><p>eg</p>\n<ul>\n<li>存在一个表格,结构如下<ul>\n<li><img src=\"http://i.imgur.com/dLaEmbM.png\" alt=\"\"></li>\n<li><a href=\"http://www.sqlcourse2.com/items_ordered.html\" target=\"_blank\" rel=\"noopener\">http://www.sqlcourse2.com/items_ordered.html</a></li>\n</ul>\n</li>\n<li><p>将订单按照customerid进行分组,并且算出每一个客户对应的订单总价</p>\n<pre><code>select i.customerid, sum(price) \nfrom items_ordered i\ngroup by i.customerid\nhaving sum(price) &gt; 100;\n</code></pre></li>\n<li><p>tips:</p>\n<ul>\n<li>假设存在另外一个表:存放customerid以及相应的客户信息.当你想要联合查询时,一般是先join之后再进行group by的操作</li>\n<li><p>having是在分组之后上面进行的操作,而where的操作是在原来的每一条记录上面进行操作.</p>\n<pre><code>select i.customerid, avg(price) from items_ordered i\nwhere i.price &gt; 10\nand i.price &lt; 100\ngroup by i.customerid\nhaving sum(price) &gt; 100;\n</code></pre></li>\n<li>这个查询语句的意思是:在表中先找出price在10和100之间的项,将其按照customerid进行分组,在每个分组中找出总价值大于100的分组,打印出其customerid以及平均价值.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"group-by-与-having\"><a href=\"#group-by-与-having\" class=\"headerlink\" title=\"group by 与 having\"></a>group by 与 having</h2><ul>\n<li>分组:将表格中的数据按照某一列进行分组,通常会搭配聚合函数使用,常见的聚合函数有如下几种<ul>\n<li>sum</li>\n<li>avg</li>\n<li>count</li>\n<li>min max","more":"</li>\n</ul>\n</li>\n<li><p>eg</p>\n<ul>\n<li>存在一个表格,结构如下<ul>\n<li><img src=\"http://i.imgur.com/dLaEmbM.png\" alt=\"\"></li>\n<li><a href=\"http://www.sqlcourse2.com/items_ordered.html\" target=\"_blank\" rel=\"noopener\">http://www.sqlcourse2.com/items_ordered.html</a></li>\n</ul>\n</li>\n<li><p>将订单按照customerid进行分组,并且算出每一个客户对应的订单总价</p>\n<pre><code>select i.customerid, sum(price) \nfrom items_ordered i\ngroup by i.customerid\nhaving sum(price) &gt; 100;\n</code></pre></li>\n<li><p>tips:</p>\n<ul>\n<li>假设存在另外一个表:存放customerid以及相应的客户信息.当你想要联合查询时,一般是先join之后再进行group by的操作</li>\n<li><p>having是在分组之后上面进行的操作,而where的操作是在原来的每一条记录上面进行操作.</p>\n<pre><code>select i.customerid, avg(price) from items_ordered i\nwhere i.price &gt; 10\nand i.price &lt; 100\ngroup by i.customerid\nhaving sum(price) &gt; 100;\n</code></pre></li>\n<li>这个查询语句的意思是:在表中先找出price在10和100之间的项,将其按照customerid进行分组,在每个分组中找出总价值大于100的分组,打印出其customerid以及平均价值.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"常见布局","date":"2016-10-10T11:21:54.000Z","_content":"### LinearLayout\n* **线性布局**\n* 分为水平（horizontal）布局以及垂直布局（vertical）\n* 一般使用layout-weight来分隔页面，使用layout-weight时，推荐将height（垂直布局时）或者weight（水平布局时）设置为0.\n### RelativeLayout\n<!--more__>\n\n* **相对布局**\n* 可以相对其他控件，也可以相对父控件\n### TableLayout\n* **表格布局**\n* 每一行TableRow\n### FrameLayout \n* **帧布局**\n### AbsoluteLayout \n* **绝对布局**\n* 基本不用\n","source":"_posts/todo常见布局.md","raw":"---\ntitle: 常见布局\ndate: 2016-10-10 19:21:54\ntags:\n- android\n\n---\n### LinearLayout\n* **线性布局**\n* 分为水平（horizontal）布局以及垂直布局（vertical）\n* 一般使用layout-weight来分隔页面，使用layout-weight时，推荐将height（垂直布局时）或者weight（水平布局时）设置为0.\n### RelativeLayout\n<!--more__>\n\n* **相对布局**\n* 可以相对其他控件，也可以相对父控件\n### TableLayout\n* **表格布局**\n* 每一行TableRow\n### FrameLayout \n* **帧布局**\n### AbsoluteLayout \n* **绝对布局**\n* 基本不用\n","slug":"todo常见布局","published":1,"updated":"2016-10-10T11:35:11.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50j0025lq0hsowqz0di","content":"<h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h3><ul>\n<li><strong>线性布局</strong></li>\n<li>分为水平（horizontal）布局以及垂直布局（vertical）</li>\n<li><p>一般使用layout-weight来分隔页面，使用layout-weight时，推荐将height（垂直布局时）或者weight（水平布局时）设置为0.</p>\n<h3 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a>RelativeLayout</h3><p>&lt;!–more__&gt;</p>\n</li>\n<li><p><strong>相对布局</strong></p>\n</li>\n<li>可以相对其他控件，也可以相对父控件<h3 id=\"TableLayout\"><a href=\"#TableLayout\" class=\"headerlink\" title=\"TableLayout\"></a>TableLayout</h3></li>\n<li><strong>表格布局</strong></li>\n<li>每一行TableRow<h3 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h3></li>\n<li><strong>帧布局</strong><h3 id=\"AbsoluteLayout\"><a href=\"#AbsoluteLayout\" class=\"headerlink\" title=\"AbsoluteLayout\"></a>AbsoluteLayout</h3></li>\n<li><strong>绝对布局</strong></li>\n<li>基本不用</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h3><ul>\n<li><strong>线性布局</strong></li>\n<li>分为水平（horizontal）布局以及垂直布局（vertical）</li>\n<li><p>一般使用layout-weight来分隔页面，使用layout-weight时，推荐将height（垂直布局时）或者weight（水平布局时）设置为0.</p>\n<h3 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a>RelativeLayout</h3><p>&lt;!–more__&gt;</p>\n</li>\n<li><p><strong>相对布局</strong></p>\n</li>\n<li>可以相对其他控件，也可以相对父控件<h3 id=\"TableLayout\"><a href=\"#TableLayout\" class=\"headerlink\" title=\"TableLayout\"></a>TableLayout</h3></li>\n<li><strong>表格布局</strong></li>\n<li>每一行TableRow<h3 id=\"FrameLayout\"><a href=\"#FrameLayout\" class=\"headerlink\" title=\"FrameLayout\"></a>FrameLayout</h3></li>\n<li><strong>帧布局</strong><h3 id=\"AbsoluteLayout\"><a href=\"#AbsoluteLayout\" class=\"headerlink\" title=\"AbsoluteLayout\"></a>AbsoluteLayout</h3></li>\n<li><strong>绝对布局</strong></li>\n<li>基本不用</li>\n</ul>\n"},{"title":"TravelMap","date":"2016-10-08T13:15:00.000Z","_content":"\n<font style=\"font-family:微软雅黑\">\n## Activity通知更新Fragment：\n通过Fragment的onAttach()函数以及使用handler：  \n在Fragment类中定义handler成员并且重载handleMessage()函数，在handlerMessage函数中进行根据Message的信息来进行相应的操作来更新Fragment，那么怎么将Activity怎么使用这个handler呢？因为他们并不是在同一个类中，所以我在Activity中也有一个handler，在OnAttach的时候将其赋值为handler，一开始有考虑将这个handler设置为fragment类的静态成员变量，但是考虑到这样会带来其他的问题（静态成员变量就与具体的对象无关而与类相关了）。\n## Fragment通知更新Activity数据\n由Activity来实现一个接口，在Fragment的onAttach函数中可以将这个接口传递给Fragment，再通过这个接口来调用我们想要更新的Activity的数据。\n## Bitmap oom\n其实这个问题我们一开始也没有想到。因为我负责的那一块在显示一些图片的时候一直会有问题，经常是整个黑色的什么都没有，但是队友做的那部分却一切正常。所以也是被这个问题坑了很久。\n知道问题后解决其实就不麻烦了，通过使用BitmapFactory的一些选项设置可以达到获得缩略图片的效果，自然问题也就迎刃而解了。\n## 同一个界面，判断是否是不同的使用类型\n因为在同一个界面上，我们可能是想要新建一个项，也可能是想要编辑一个项，那怎么判断比较好呢？最后我们的解决方法是使用一个布尔值得成员变量来帮助判断，而在其他界面跳转过来时根据携带的信息来确定这个成员变量的布尔值。\n## 拍照很坑的地方\n当时是使用一个startActivityForResult的方法来启动相机并且传入了相应的Uri，因为需要保存文件，同时也需要将拍到的照片在界面上面显示出来，所以，坑的地方就出现了，在返回的data里面获得的图片是空的，本来还想着说能够很方便地把结果给显示出来，没想到还是得根据uri自己去把图片加载出来。\n## ListView的优化\n## 架构\n每个Activity均实现同一个接口，实现接口函数。新建一个继承自Handler的类，重载handlerMessage函数，在函数中调用上述提到的接口函数，。然后我们再在Thread中调用使用handler就可以了。\n## 使用ViewPager时滑动冲突\n新建一个类继承自ViewPager，直接将其滑动事件禁用掉。","source":"_posts/travelMap.md","raw":"title: TravelMap\ndate: 2016-10-08 21:15:00\ntags:\n- android\n \n---\n\n<font style=\"font-family:微软雅黑\">\n## Activity通知更新Fragment：\n通过Fragment的onAttach()函数以及使用handler：  \n在Fragment类中定义handler成员并且重载handleMessage()函数，在handlerMessage函数中进行根据Message的信息来进行相应的操作来更新Fragment，那么怎么将Activity怎么使用这个handler呢？因为他们并不是在同一个类中，所以我在Activity中也有一个handler，在OnAttach的时候将其赋值为handler，一开始有考虑将这个handler设置为fragment类的静态成员变量，但是考虑到这样会带来其他的问题（静态成员变量就与具体的对象无关而与类相关了）。\n## Fragment通知更新Activity数据\n由Activity来实现一个接口，在Fragment的onAttach函数中可以将这个接口传递给Fragment，再通过这个接口来调用我们想要更新的Activity的数据。\n## Bitmap oom\n其实这个问题我们一开始也没有想到。因为我负责的那一块在显示一些图片的时候一直会有问题，经常是整个黑色的什么都没有，但是队友做的那部分却一切正常。所以也是被这个问题坑了很久。\n知道问题后解决其实就不麻烦了，通过使用BitmapFactory的一些选项设置可以达到获得缩略图片的效果，自然问题也就迎刃而解了。\n## 同一个界面，判断是否是不同的使用类型\n因为在同一个界面上，我们可能是想要新建一个项，也可能是想要编辑一个项，那怎么判断比较好呢？最后我们的解决方法是使用一个布尔值得成员变量来帮助判断，而在其他界面跳转过来时根据携带的信息来确定这个成员变量的布尔值。\n## 拍照很坑的地方\n当时是使用一个startActivityForResult的方法来启动相机并且传入了相应的Uri，因为需要保存文件，同时也需要将拍到的照片在界面上面显示出来，所以，坑的地方就出现了，在返回的data里面获得的图片是空的，本来还想着说能够很方便地把结果给显示出来，没想到还是得根据uri自己去把图片加载出来。\n## ListView的优化\n## 架构\n每个Activity均实现同一个接口，实现接口函数。新建一个继承自Handler的类，重载handlerMessage函数，在函数中调用上述提到的接口函数，。然后我们再在Thread中调用使用handler就可以了。\n## 使用ViewPager时滑动冲突\n新建一个类继承自ViewPager，直接将其滑动事件禁用掉。","slug":"travelMap","published":1,"updated":"2016-10-08T13:15:51.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50j0027lq0h0ium1dkz","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Activity通知更新Fragment：\"><a href=\"#Activity通知更新Fragment：\" class=\"headerlink\" title=\"Activity通知更新Fragment：\"></a>Activity通知更新Fragment：</h2><p>通过Fragment的onAttach()函数以及使用handler：<br>在Fragment类中定义handler成员并且重载handleMessage()函数，在handlerMessage函数中进行根据Message的信息来进行相应的操作来更新Fragment，那么怎么将Activity怎么使用这个handler呢？因为他们并不是在同一个类中，所以我在Activity中也有一个handler，在OnAttach的时候将其赋值为handler，一开始有考虑将这个handler设置为fragment类的静态成员变量，但是考虑到这样会带来其他的问题（静态成员变量就与具体的对象无关而与类相关了）。</p>\n<h2 id=\"Fragment通知更新Activity数据\"><a href=\"#Fragment通知更新Activity数据\" class=\"headerlink\" title=\"Fragment通知更新Activity数据\"></a>Fragment通知更新Activity数据</h2><p>由Activity来实现一个接口，在Fragment的onAttach函数中可以将这个接口传递给Fragment，再通过这个接口来调用我们想要更新的Activity的数据。</p>\n<h2 id=\"Bitmap-oom\"><a href=\"#Bitmap-oom\" class=\"headerlink\" title=\"Bitmap oom\"></a>Bitmap oom</h2><p>其实这个问题我们一开始也没有想到。因为我负责的那一块在显示一些图片的时候一直会有问题，经常是整个黑色的什么都没有，但是队友做的那部分却一切正常。所以也是被这个问题坑了很久。<br>知道问题后解决其实就不麻烦了，通过使用BitmapFactory的一些选项设置可以达到获得缩略图片的效果，自然问题也就迎刃而解了。</p>\n<h2 id=\"同一个界面，判断是否是不同的使用类型\"><a href=\"#同一个界面，判断是否是不同的使用类型\" class=\"headerlink\" title=\"同一个界面，判断是否是不同的使用类型\"></a>同一个界面，判断是否是不同的使用类型</h2><p>因为在同一个界面上，我们可能是想要新建一个项，也可能是想要编辑一个项，那怎么判断比较好呢？最后我们的解决方法是使用一个布尔值得成员变量来帮助判断，而在其他界面跳转过来时根据携带的信息来确定这个成员变量的布尔值。</p>\n<h2 id=\"拍照很坑的地方\"><a href=\"#拍照很坑的地方\" class=\"headerlink\" title=\"拍照很坑的地方\"></a>拍照很坑的地方</h2><p>当时是使用一个startActivityForResult的方法来启动相机并且传入了相应的Uri，因为需要保存文件，同时也需要将拍到的照片在界面上面显示出来，所以，坑的地方就出现了，在返回的data里面获得的图片是空的，本来还想着说能够很方便地把结果给显示出来，没想到还是得根据uri自己去把图片加载出来。</p>\n<h2 id=\"ListView的优化\"><a href=\"#ListView的优化\" class=\"headerlink\" title=\"ListView的优化\"></a>ListView的优化</h2><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>每个Activity均实现同一个接口，实现接口函数。新建一个继承自Handler的类，重载handlerMessage函数，在函数中调用上述提到的接口函数，。然后我们再在Thread中调用使用handler就可以了。</p>\n<h2 id=\"使用ViewPager时滑动冲突\"><a href=\"#使用ViewPager时滑动冲突\" class=\"headerlink\" title=\"使用ViewPager时滑动冲突\"></a>使用ViewPager时滑动冲突</h2><p>新建一个类继承自ViewPager，直接将其滑动事件禁用掉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"Activity通知更新Fragment：\"><a href=\"#Activity通知更新Fragment：\" class=\"headerlink\" title=\"Activity通知更新Fragment：\"></a>Activity通知更新Fragment：</h2><p>通过Fragment的onAttach()函数以及使用handler：<br>在Fragment类中定义handler成员并且重载handleMessage()函数，在handlerMessage函数中进行根据Message的信息来进行相应的操作来更新Fragment，那么怎么将Activity怎么使用这个handler呢？因为他们并不是在同一个类中，所以我在Activity中也有一个handler，在OnAttach的时候将其赋值为handler，一开始有考虑将这个handler设置为fragment类的静态成员变量，但是考虑到这样会带来其他的问题（静态成员变量就与具体的对象无关而与类相关了）。</p>\n<h2 id=\"Fragment通知更新Activity数据\"><a href=\"#Fragment通知更新Activity数据\" class=\"headerlink\" title=\"Fragment通知更新Activity数据\"></a>Fragment通知更新Activity数据</h2><p>由Activity来实现一个接口，在Fragment的onAttach函数中可以将这个接口传递给Fragment，再通过这个接口来调用我们想要更新的Activity的数据。</p>\n<h2 id=\"Bitmap-oom\"><a href=\"#Bitmap-oom\" class=\"headerlink\" title=\"Bitmap oom\"></a>Bitmap oom</h2><p>其实这个问题我们一开始也没有想到。因为我负责的那一块在显示一些图片的时候一直会有问题，经常是整个黑色的什么都没有，但是队友做的那部分却一切正常。所以也是被这个问题坑了很久。<br>知道问题后解决其实就不麻烦了，通过使用BitmapFactory的一些选项设置可以达到获得缩略图片的效果，自然问题也就迎刃而解了。</p>\n<h2 id=\"同一个界面，判断是否是不同的使用类型\"><a href=\"#同一个界面，判断是否是不同的使用类型\" class=\"headerlink\" title=\"同一个界面，判断是否是不同的使用类型\"></a>同一个界面，判断是否是不同的使用类型</h2><p>因为在同一个界面上，我们可能是想要新建一个项，也可能是想要编辑一个项，那怎么判断比较好呢？最后我们的解决方法是使用一个布尔值得成员变量来帮助判断，而在其他界面跳转过来时根据携带的信息来确定这个成员变量的布尔值。</p>\n<h2 id=\"拍照很坑的地方\"><a href=\"#拍照很坑的地方\" class=\"headerlink\" title=\"拍照很坑的地方\"></a>拍照很坑的地方</h2><p>当时是使用一个startActivityForResult的方法来启动相机并且传入了相应的Uri，因为需要保存文件，同时也需要将拍到的照片在界面上面显示出来，所以，坑的地方就出现了，在返回的data里面获得的图片是空的，本来还想着说能够很方便地把结果给显示出来，没想到还是得根据uri自己去把图片加载出来。</p>\n<h2 id=\"ListView的优化\"><a href=\"#ListView的优化\" class=\"headerlink\" title=\"ListView的优化\"></a>ListView的优化</h2><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>每个Activity均实现同一个接口，实现接口函数。新建一个继承自Handler的类，重载handlerMessage函数，在函数中调用上述提到的接口函数，。然后我们再在Thread中调用使用handler就可以了。</p>\n<h2 id=\"使用ViewPager时滑动冲突\"><a href=\"#使用ViewPager时滑动冲突\" class=\"headerlink\" title=\"使用ViewPager时滑动冲突\"></a>使用ViewPager时滑动冲突</h2><p>新建一个类继承自ViewPager，直接将其滑动事件禁用掉。</p>\n"},{"title":"ubuntu下编译安装nginx","date":"2017-04-13T06:14:12.000Z","_content":"\n# Ubuntu下编译安装nginx\n\n* 参考[这里](http://www.cnblogs.com/xiongmaolinux/p/5345117.html)\n\n* 安装完成之后，编辑修改nginx.conf， 路径是\n\t\t/usr/local/nginx/conf/nginx.conf\n\n* 启动nginx \n\t\tsudo /usr/local/nginx/sbin/nginx\t\n\n* 关闭nginx\n\t    sudo /usr/local/nginx/sbin/nginx -s stop\n\n* 重读nginx配置文件\n    \tsudo /usr/local/nginx/sbin/nginx -s reload","source":"_posts/ubuntu下编译安装nginx.md","raw":"---\ntitle: ubuntu下编译安装nginx\ndate: 2017-04-13 14:14:12\ntags:\n- ubuntu\n- vps\n- nginx\n\n---\n\n# Ubuntu下编译安装nginx\n\n* 参考[这里](http://www.cnblogs.com/xiongmaolinux/p/5345117.html)\n\n* 安装完成之后，编辑修改nginx.conf， 路径是\n\t\t/usr/local/nginx/conf/nginx.conf\n\n* 启动nginx \n\t\tsudo /usr/local/nginx/sbin/nginx\t\n\n* 关闭nginx\n\t    sudo /usr/local/nginx/sbin/nginx -s stop\n\n* 重读nginx配置文件\n    \tsudo /usr/local/nginx/sbin/nginx -s reload","slug":"ubuntu下编译安装nginx","published":1,"updated":"2017-04-13T06:23:08.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50l002alq0ha2sztd2c","content":"<h1 id=\"Ubuntu下编译安装nginx\"><a href=\"#Ubuntu下编译安装nginx\" class=\"headerlink\" title=\"Ubuntu下编译安装nginx\"></a>Ubuntu下编译安装nginx</h1><ul>\n<li><p>参考<a href=\"http://www.cnblogs.com/xiongmaolinux/p/5345117.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</li>\n<li><p>安装完成之后，编辑修改nginx.conf， 路径是</p>\n<pre><code>/usr/local/nginx/conf/nginx.conf\n</code></pre></li>\n<li><p>启动nginx </p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx    \n</code></pre></li>\n<li><p>关闭nginx</p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx -s stop\n</code></pre></li>\n<li><p>重读nginx配置文件</p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx -s reload\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Ubuntu下编译安装nginx\"><a href=\"#Ubuntu下编译安装nginx\" class=\"headerlink\" title=\"Ubuntu下编译安装nginx\"></a>Ubuntu下编译安装nginx</h1><ul>\n<li><p>参考<a href=\"http://www.cnblogs.com/xiongmaolinux/p/5345117.html\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n</li>\n<li><p>安装完成之后，编辑修改nginx.conf， 路径是</p>\n<pre><code>/usr/local/nginx/conf/nginx.conf\n</code></pre></li>\n<li><p>启动nginx </p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx    \n</code></pre></li>\n<li><p>关闭nginx</p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx -s stop\n</code></pre></li>\n<li><p>重读nginx配置文件</p>\n<pre><code>sudo /usr/local/nginx/sbin/nginx -s reload\n</code></pre></li>\n</ul>\n"},{"title":"vps+git+hexo+nginx搭建博客网站","date":"2017-04-13T04:52:29.000Z","_content":"# vps+git+hexo+nginx搭建博客网站\n由于科学上网的需要，买了一个vps，想着单单用来ss似乎不太值，所以就想说搭建一个简单的博客系统，wordpress比较繁杂，所以就采用了这样的一个方式来搭建博客：git+hexo（主题：next）+nginx，实现思路大概是这样子的：\n- 在本地windows上搭建hexo，编写博客之后hexo generate，生成html文件\n- 在vps上搭建git服务器，nginx服务\n- 将本地html文件更新到服务器上\n- 使用git hook功能将服务器git目录更新到网页文件上\n<!--more-->\n## windows上搭建hexo\n[官方文档](https://hexo.io/zh-cn/docs/index.html)\n![](http://i2.muimg.com/567571/05606b0fdd51bb41.png)\n安装完成。\n## vps安装git服务\n### 安装git\n        sudo apt-get install git\n### 创建git用户\n        sudo adduser git\n### 初始化git仓库，存放目录 /var/repo/\n        sudo mkdir /var/repo\n        cd /var/repo\n        sudo git init --bare blog.git\n### 创建git hooks\n创建自定义钩子,指定特定的重要动作发生时触发自定义脚本,创建的是服务端钩子 post-receive，具体内容可以[查看这里](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90)\n\n        cd /var/repo/blog.git/hooks\n        vim post-receive\n在post-receive加入如下内容\n    \n        #!/bin/sh\n        git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f\n* 注意，其中/var/www/hexo目录是您的nginx的网站目录，请根据需要进行修改  \n* 修改文件的可执行权限  \n\n        chmod +x post-receive    \n### 改变 blog.git 目录的拥有者为 git 用户：\n        sudo chown -R git:git blog.git\n\n## vps安装nginx服务\n[见这里](http://weizhaowu.me/2017/04/13/ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/)\n## windows本地配置\n修改hexo目录下的_config.yml文件中的deploy\n\n    deploy:\n    type: git\n    repo: git@weizhaowu.me:/var/repo/blog.git\n    branch: master\n## 具体的使用\n    hexo new \"new-post\"\n    hexo clean && hexo generate --deploy\n这样博客就会自动更新到网站上面了。\n## 参考\n[使用 Git Hook 自动部署 Hexo 到个人 VPS](http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/)\n\n\n\n","source":"_posts/vps-git-hexo-nginx搭建博客网站.md","raw":"---\ntitle: vps+git+hexo+nginx搭建博客网站\ndate: 2017-04-13 12:52:29\ntags:\n- vps\n- git\n- hexo\n- nginx\n- blog\n---\n# vps+git+hexo+nginx搭建博客网站\n由于科学上网的需要，买了一个vps，想着单单用来ss似乎不太值，所以就想说搭建一个简单的博客系统，wordpress比较繁杂，所以就采用了这样的一个方式来搭建博客：git+hexo（主题：next）+nginx，实现思路大概是这样子的：\n- 在本地windows上搭建hexo，编写博客之后hexo generate，生成html文件\n- 在vps上搭建git服务器，nginx服务\n- 将本地html文件更新到服务器上\n- 使用git hook功能将服务器git目录更新到网页文件上\n<!--more-->\n## windows上搭建hexo\n[官方文档](https://hexo.io/zh-cn/docs/index.html)\n![](http://i2.muimg.com/567571/05606b0fdd51bb41.png)\n安装完成。\n## vps安装git服务\n### 安装git\n        sudo apt-get install git\n### 创建git用户\n        sudo adduser git\n### 初始化git仓库，存放目录 /var/repo/\n        sudo mkdir /var/repo\n        cd /var/repo\n        sudo git init --bare blog.git\n### 创建git hooks\n创建自定义钩子,指定特定的重要动作发生时触发自定义脚本,创建的是服务端钩子 post-receive，具体内容可以[查看这里](https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90)\n\n        cd /var/repo/blog.git/hooks\n        vim post-receive\n在post-receive加入如下内容\n    \n        #!/bin/sh\n        git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f\n* 注意，其中/var/www/hexo目录是您的nginx的网站目录，请根据需要进行修改  \n* 修改文件的可执行权限  \n\n        chmod +x post-receive    \n### 改变 blog.git 目录的拥有者为 git 用户：\n        sudo chown -R git:git blog.git\n\n## vps安装nginx服务\n[见这里](http://weizhaowu.me/2017/04/13/ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/)\n## windows本地配置\n修改hexo目录下的_config.yml文件中的deploy\n\n    deploy:\n    type: git\n    repo: git@weizhaowu.me:/var/repo/blog.git\n    branch: master\n## 具体的使用\n    hexo new \"new-post\"\n    hexo clean && hexo generate --deploy\n这样博客就会自动更新到网站上面了。\n## 参考\n[使用 Git Hook 自动部署 Hexo 到个人 VPS](http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/)\n\n\n\n","slug":"vps-git-hexo-nginx搭建博客网站","published":1,"updated":"2017-04-20T03:17:41.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50m002clq0h8hf03ozd","content":"<h1 id=\"vps-git-hexo-nginx搭建博客网站\"><a href=\"#vps-git-hexo-nginx搭建博客网站\" class=\"headerlink\" title=\"vps+git+hexo+nginx搭建博客网站\"></a>vps+git+hexo+nginx搭建博客网站</h1><p>由于科学上网的需要，买了一个vps，想着单单用来ss似乎不太值，所以就想说搭建一个简单的博客系统，wordpress比较繁杂，所以就采用了这样的一个方式来搭建博客：git+hexo（主题：next）+nginx，实现思路大概是这样子的：</p>\n<ul>\n<li>在本地windows上搭建hexo，编写博客之后hexo generate，生成html文件</li>\n<li>在vps上搭建git服务器，nginx服务</li>\n<li>将本地html文件更新到服务器上</li>\n<li><p>使用git hook功能将服务器git目录更新到网页文件上</p>\n<a id=\"more\"></a>\n<h2 id=\"windows上搭建hexo\"><a href=\"#windows上搭建hexo\" class=\"headerlink\" title=\"windows上搭建hexo\"></a>windows上搭建hexo</h2><p><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><img src=\"http://i2.muimg.com/567571/05606b0fdd51bb41.png\" alt=\"\"><br>安装完成。</p>\n<h2 id=\"vps安装git服务\"><a href=\"#vps安装git服务\" class=\"headerlink\" title=\"vps安装git服务\"></a>vps安装git服务</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><pre><code>sudo apt-get install git\n</code></pre><h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><pre><code>sudo adduser git\n</code></pre><h3 id=\"初始化git仓库，存放目录-var-repo\"><a href=\"#初始化git仓库，存放目录-var-repo\" class=\"headerlink\" title=\"初始化git仓库，存放目录 /var/repo/\"></a>初始化git仓库，存放目录 /var/repo/</h3><pre><code>sudo mkdir /var/repo\ncd /var/repo\nsudo git init --bare blog.git\n</code></pre><h3 id=\"创建git-hooks\"><a href=\"#创建git-hooks\" class=\"headerlink\" title=\"创建git hooks\"></a>创建git hooks</h3><p>创建自定义钩子,指定特定的重要动作发生时触发自定义脚本,创建的是服务端钩子 post-receive，具体内容可以<a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\" target=\"_blank\" rel=\"noopener\">查看这里</a></p>\n<pre><code>cd /var/repo/blog.git/hooks\nvim post-receive\n</code></pre><p>在post-receive加入如下内容</p>\n<pre><code>#!/bin/sh\ngit --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f\n</code></pre></li>\n</ul>\n<ul>\n<li>注意，其中/var/www/hexo目录是您的nginx的网站目录，请根据需要进行修改  </li>\n<li><p>修改文件的可执行权限  </p>\n<pre><code>chmod +x post-receive    \n</code></pre><h3 id=\"改变-blog-git-目录的拥有者为-git-用户：\"><a href=\"#改变-blog-git-目录的拥有者为-git-用户：\" class=\"headerlink\" title=\"改变 blog.git 目录的拥有者为 git 用户：\"></a>改变 blog.git 目录的拥有者为 git 用户：</h3><pre><code>sudo chown -R git:git blog.git\n</code></pre></li>\n</ul>\n<h2 id=\"vps安装nginx服务\"><a href=\"#vps安装nginx服务\" class=\"headerlink\" title=\"vps安装nginx服务\"></a>vps安装nginx服务</h2><p><a href=\"http://weizhaowu.me/2017/04/13/ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/\" target=\"_blank\" rel=\"noopener\">见这里</a></p>\n<h2 id=\"windows本地配置\"><a href=\"#windows本地配置\" class=\"headerlink\" title=\"windows本地配置\"></a>windows本地配置</h2><p>修改hexo目录下的_config.yml文件中的deploy</p>\n<pre><code>deploy:\ntype: git\nrepo: git@weizhaowu.me:/var/repo/blog.git\nbranch: master\n</code></pre><h2 id=\"具体的使用\"><a href=\"#具体的使用\" class=\"headerlink\" title=\"具体的使用\"></a>具体的使用</h2><pre><code>hexo new &quot;new-post&quot;\nhexo clean &amp;&amp; hexo generate --deploy\n</code></pre><p>这样博客就会自动更新到网站上面了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/\" target=\"_blank\" rel=\"noopener\">使用 Git Hook 自动部署 Hexo 到个人 VPS</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"vps-git-hexo-nginx搭建博客网站\"><a href=\"#vps-git-hexo-nginx搭建博客网站\" class=\"headerlink\" title=\"vps+git+hexo+nginx搭建博客网站\"></a>vps+git+hexo+nginx搭建博客网站</h1><p>由于科学上网的需要，买了一个vps，想着单单用来ss似乎不太值，所以就想说搭建一个简单的博客系统，wordpress比较繁杂，所以就采用了这样的一个方式来搭建博客：git+hexo（主题：next）+nginx，实现思路大概是这样子的：</p>\n<ul>\n<li>在本地windows上搭建hexo，编写博客之后hexo generate，生成html文件</li>\n<li>在vps上搭建git服务器，nginx服务</li>\n<li>将本地html文件更新到服务器上</li>\n<li><p>使用git hook功能将服务器git目录更新到网页文件上</p>","more":"<h2 id=\"windows上搭建hexo\"><a href=\"#windows上搭建hexo\" class=\"headerlink\" title=\"windows上搭建hexo\"></a>windows上搭建hexo</h2><p><a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">官方文档</a><br><img src=\"http://i2.muimg.com/567571/05606b0fdd51bb41.png\" alt=\"\"><br>安装完成。</p>\n<h2 id=\"vps安装git服务\"><a href=\"#vps安装git服务\" class=\"headerlink\" title=\"vps安装git服务\"></a>vps安装git服务</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><pre><code>sudo apt-get install git\n</code></pre><h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><pre><code>sudo adduser git\n</code></pre><h3 id=\"初始化git仓库，存放目录-var-repo\"><a href=\"#初始化git仓库，存放目录-var-repo\" class=\"headerlink\" title=\"初始化git仓库，存放目录 /var/repo/\"></a>初始化git仓库，存放目录 /var/repo/</h3><pre><code>sudo mkdir /var/repo\ncd /var/repo\nsudo git init --bare blog.git\n</code></pre><h3 id=\"创建git-hooks\"><a href=\"#创建git-hooks\" class=\"headerlink\" title=\"创建git hooks\"></a>创建git hooks</h3><p>创建自定义钩子,指定特定的重要动作发生时触发自定义脚本,创建的是服务端钩子 post-receive，具体内容可以<a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\" target=\"_blank\" rel=\"noopener\">查看这里</a></p>\n<pre><code>cd /var/repo/blog.git/hooks\nvim post-receive\n</code></pre><p>在post-receive加入如下内容</p>\n<pre><code>#!/bin/sh\ngit --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f\n</code></pre></li>\n</ul>\n<ul>\n<li>注意，其中/var/www/hexo目录是您的nginx的网站目录，请根据需要进行修改  </li>\n<li><p>修改文件的可执行权限  </p>\n<pre><code>chmod +x post-receive    \n</code></pre><h3 id=\"改变-blog-git-目录的拥有者为-git-用户：\"><a href=\"#改变-blog-git-目录的拥有者为-git-用户：\" class=\"headerlink\" title=\"改变 blog.git 目录的拥有者为 git 用户：\"></a>改变 blog.git 目录的拥有者为 git 用户：</h3><pre><code>sudo chown -R git:git blog.git\n</code></pre></li>\n</ul>\n<h2 id=\"vps安装nginx服务\"><a href=\"#vps安装nginx服务\" class=\"headerlink\" title=\"vps安装nginx服务\"></a>vps安装nginx服务</h2><p><a href=\"http://weizhaowu.me/2017/04/13/ubuntu%E4%B8%8B%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx/\" target=\"_blank\" rel=\"noopener\">见这里</a></p>\n<h2 id=\"windows本地配置\"><a href=\"#windows本地配置\" class=\"headerlink\" title=\"windows本地配置\"></a>windows本地配置</h2><p>修改hexo目录下的_config.yml文件中的deploy</p>\n<pre><code>deploy:\ntype: git\nrepo: git@weizhaowu.me:/var/repo/blog.git\nbranch: master\n</code></pre><h2 id=\"具体的使用\"><a href=\"#具体的使用\" class=\"headerlink\" title=\"具体的使用\"></a>具体的使用</h2><pre><code>hexo new &quot;new-post&quot;\nhexo clean &amp;&amp; hexo generate --deploy\n</code></pre><p>这样博客就会自动更新到网站上面了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/\" target=\"_blank\" rel=\"noopener\">使用 Git Hook 自动部署 Hexo 到个人 VPS</a></p>"},{"title":"web线程安全","date":"2018-01-24T02:34:17.000Z","_content":"\n# java web中的线程安全问题\n## 问题描述:\n### 伪代码:\n\n\t判断redis是否有相应的键值对:\n\t\t有:\n\t\t\t读取redis\n\t\t没有:\n\t\t\t读取数据库\n\t\t\t插入redis(列表的插入)\n\t返回\n### 问题\n当请求并发时,第一个请求redis未插入而第二个请求也进入了判断,此时第二个请求的判断条件也是\"否\",所以就会出现redis数据重复的情况.\n### 原因\n虽然说对于每一个单独的请求,spring都是新建一个单独的线程来进行处理,但是这并不能够解决上面的问题,究其原因,则是访问了同一个全局数据(可以认为是redis)\n## 解决:\n增加一个全局变量,使用synchronize同步方法,伪代码如下\n### 伪代码\n\t全局变量 lock\n\t判断redis是否有相应的键值对:\n\t\t有:\n\t\t\t读取redis\n\t\t没有:\n\t\t\tsynchronize(lock)\n\t\t\t\t再次判断redis是否有相应的键值对\n\t\t\t\t\t有:\n\t\t\t\t\t\t读取redis\n\t\t\t\t\t没有:\n\t\t\t\t\t\t读取数据库\n\t\t\t\t\t\t插入redis\n* 再次判断的原因:加锁只是阻塞了第二个请求的读取数据库/插入redis操作,如果没有再次判断的话,那么当第一个请求释放锁之后第二个请求依旧会再次读取数据库/插入redis,问题依旧存在\n\n## 参考\n[http://www.cnblogs.com/doit8791/p/4093808.html](http://www.cnblogs.com/doit8791/p/4093808.html \"Spring单例与线程安全小结\")","source":"_posts/web线程安全.md","raw":"---\ntitle: web线程安全\ndate: 2018-01-24 10:34:17\ntags:\n- java\n- spring\n- 线程安全\n---\n\n# java web中的线程安全问题\n## 问题描述:\n### 伪代码:\n\n\t判断redis是否有相应的键值对:\n\t\t有:\n\t\t\t读取redis\n\t\t没有:\n\t\t\t读取数据库\n\t\t\t插入redis(列表的插入)\n\t返回\n### 问题\n当请求并发时,第一个请求redis未插入而第二个请求也进入了判断,此时第二个请求的判断条件也是\"否\",所以就会出现redis数据重复的情况.\n### 原因\n虽然说对于每一个单独的请求,spring都是新建一个单独的线程来进行处理,但是这并不能够解决上面的问题,究其原因,则是访问了同一个全局数据(可以认为是redis)\n## 解决:\n增加一个全局变量,使用synchronize同步方法,伪代码如下\n### 伪代码\n\t全局变量 lock\n\t判断redis是否有相应的键值对:\n\t\t有:\n\t\t\t读取redis\n\t\t没有:\n\t\t\tsynchronize(lock)\n\t\t\t\t再次判断redis是否有相应的键值对\n\t\t\t\t\t有:\n\t\t\t\t\t\t读取redis\n\t\t\t\t\t没有:\n\t\t\t\t\t\t读取数据库\n\t\t\t\t\t\t插入redis\n* 再次判断的原因:加锁只是阻塞了第二个请求的读取数据库/插入redis操作,如果没有再次判断的话,那么当第一个请求释放锁之后第二个请求依旧会再次读取数据库/插入redis,问题依旧存在\n\n## 参考\n[http://www.cnblogs.com/doit8791/p/4093808.html](http://www.cnblogs.com/doit8791/p/4093808.html \"Spring单例与线程安全小结\")","slug":"web线程安全","published":1,"updated":"2018-01-24T02:54:43.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50o002flq0hoxgdk5zr","content":"<h1 id=\"java-web中的线程安全问题\"><a href=\"#java-web中的线程安全问题\" class=\"headerlink\" title=\"java web中的线程安全问题\"></a>java web中的线程安全问题</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述:\"></a>问题描述:</h2><h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码:\"></a>伪代码:</h3><pre><code>判断redis是否有相应的键值对:\n    有:\n        读取redis\n    没有:\n        读取数据库\n        插入redis(列表的插入)\n返回\n</code></pre><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当请求并发时,第一个请求redis未插入而第二个请求也进入了判断,此时第二个请求的判断条件也是”否”,所以就会出现redis数据重复的情况.</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>虽然说对于每一个单独的请求,spring都是新建一个单独的线程来进行处理,但是这并不能够解决上面的问题,究其原因,则是访问了同一个全局数据(可以认为是redis)</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h2><p>增加一个全局变量,使用synchronize同步方法,伪代码如下</p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><pre><code>全局变量 lock\n判断redis是否有相应的键值对:\n    有:\n        读取redis\n    没有:\n        synchronize(lock)\n            再次判断redis是否有相应的键值对\n                有:\n                    读取redis\n                没有:\n                    读取数据库\n                    插入redis\n</code></pre><ul>\n<li>再次判断的原因:加锁只是阻塞了第二个请求的读取数据库/插入redis操作,如果没有再次判断的话,那么当第一个请求释放锁之后第二个请求依旧会再次读取数据库/插入redis,问题依旧存在</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/doit8791/p/4093808.html\" title=\"Spring单例与线程安全小结\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/doit8791/p/4093808.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"java-web中的线程安全问题\"><a href=\"#java-web中的线程安全问题\" class=\"headerlink\" title=\"java web中的线程安全问题\"></a>java web中的线程安全问题</h1><h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述:\"></a>问题描述:</h2><h3 id=\"伪代码\"><a href=\"#伪代码\" class=\"headerlink\" title=\"伪代码:\"></a>伪代码:</h3><pre><code>判断redis是否有相应的键值对:\n    有:\n        读取redis\n    没有:\n        读取数据库\n        插入redis(列表的插入)\n返回\n</code></pre><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>当请求并发时,第一个请求redis未插入而第二个请求也进入了判断,此时第二个请求的判断条件也是”否”,所以就会出现redis数据重复的情况.</p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>虽然说对于每一个单独的请求,spring都是新建一个单独的线程来进行处理,但是这并不能够解决上面的问题,究其原因,则是访问了同一个全局数据(可以认为是redis)</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h2><p>增加一个全局变量,使用synchronize同步方法,伪代码如下</p>\n<h3 id=\"伪代码-1\"><a href=\"#伪代码-1\" class=\"headerlink\" title=\"伪代码\"></a>伪代码</h3><pre><code>全局变量 lock\n判断redis是否有相应的键值对:\n    有:\n        读取redis\n    没有:\n        synchronize(lock)\n            再次判断redis是否有相应的键值对\n                有:\n                    读取redis\n                没有:\n                    读取数据库\n                    插入redis\n</code></pre><ul>\n<li>再次判断的原因:加锁只是阻塞了第二个请求的读取数据库/插入redis操作,如果没有再次判断的话,那么当第一个请求释放锁之后第二个请求依旧会再次读取数据库/插入redis,问题依旧存在</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.cnblogs.com/doit8791/p/4093808.html\" title=\"Spring单例与线程安全小结\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/doit8791/p/4093808.html</a></p>\n"},{"title":"关于RecyclerView以及ListView中的图像加载问题","date":"2016-10-07T10:55:32.000Z","_content":"<font style=\"font-family:微软雅黑\">\n### ListView 中出现错位，重复的图片\n* 原因：为了性能的提升，我们一般会采取重复使用item的方式，应用仅仅需要inflate n（屏幕所能显示的item总数）个view而非数据的size个view，这样可以极大地提高效率，如下\n\n        public View getView(int position, View convertView, ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView != null) {\n                holder = (ViewHolder)convertView.getTag();\n            } else {\n                convertView = mInflater.inflate(R.layout.item_list_view, parent, false);\n                holder = new ViewHolder();\n                holder.imageView = (ImageView)convertView.findViewById(R.id.image_view_list_view);\n                holder.textView = (TextView)convertView.findViewById(R.id.text_view_list_view);\n                convertView.setTag(holder);\n            }\n\t\t......\n\t\t}\n<!--more-->\n但是，随之而来的问题是：图片异步加载时可能会导致的错乱问题。当第一个图片在后台线程进行加载时（可能是网络下载），在还没有下载完成的时候，我们对listview进行滚动，这个时候的item的view是复用的，所以当图片加载完成后，会将图片设置到后面的某个item里。\n  \n* 解决方法：通过给imageView设置tag（将tag设置为uri），在设置图片时，进行比较，不等的设置为默认值。\n\n            ImageView imageView = holder.imageView;\n            String tag = (String) imageView.getTag();\n            String url = items.get(position).getUrl();\n            if (!url.equals(tag)) {\n                imageView.setImageDrawable(mDefaultBitmapDrawable);\n            }\n            imageView.setTag(url);\n            imageLoader.bindBitmap(url, imageView, 100, 100);\n\n### RecyclerView\n类似的\n\n        public void onBindViewHolder(ViewHolder holder, int position) {\n            String tag = (String) holder.imageView.getTag();\n            if (!items.get(position).getUrl().equals(tag)) {\n\n            }\n            holder.imageView.setTag(items.get(position).getUrl());\n            imageLoader.bindBitmap(items.get(position).getUrl(), holder.imageView, 500, 500);\n        }","source":"_posts/关于RecyclerView以及ListView中的图像加载问题.md","raw":"---\ntitle: 关于RecyclerView以及ListView中的图像加载问题\ndate: 2016-10-07 18:55:32\ntags:\n- android\n\n---\n<font style=\"font-family:微软雅黑\">\n### ListView 中出现错位，重复的图片\n* 原因：为了性能的提升，我们一般会采取重复使用item的方式，应用仅仅需要inflate n（屏幕所能显示的item总数）个view而非数据的size个view，这样可以极大地提高效率，如下\n\n        public View getView(int position, View convertView, ViewGroup parent) {\n            ViewHolder holder = null;\n            if (convertView != null) {\n                holder = (ViewHolder)convertView.getTag();\n            } else {\n                convertView = mInflater.inflate(R.layout.item_list_view, parent, false);\n                holder = new ViewHolder();\n                holder.imageView = (ImageView)convertView.findViewById(R.id.image_view_list_view);\n                holder.textView = (TextView)convertView.findViewById(R.id.text_view_list_view);\n                convertView.setTag(holder);\n            }\n\t\t......\n\t\t}\n<!--more-->\n但是，随之而来的问题是：图片异步加载时可能会导致的错乱问题。当第一个图片在后台线程进行加载时（可能是网络下载），在还没有下载完成的时候，我们对listview进行滚动，这个时候的item的view是复用的，所以当图片加载完成后，会将图片设置到后面的某个item里。\n  \n* 解决方法：通过给imageView设置tag（将tag设置为uri），在设置图片时，进行比较，不等的设置为默认值。\n\n            ImageView imageView = holder.imageView;\n            String tag = (String) imageView.getTag();\n            String url = items.get(position).getUrl();\n            if (!url.equals(tag)) {\n                imageView.setImageDrawable(mDefaultBitmapDrawable);\n            }\n            imageView.setTag(url);\n            imageLoader.bindBitmap(url, imageView, 100, 100);\n\n### RecyclerView\n类似的\n\n        public void onBindViewHolder(ViewHolder holder, int position) {\n            String tag = (String) holder.imageView.getTag();\n            if (!items.get(position).getUrl().equals(tag)) {\n\n            }\n            holder.imageView.setTag(items.get(position).getUrl());\n            imageLoader.bindBitmap(items.get(position).getUrl(), holder.imageView, 500, 500);\n        }","slug":"关于RecyclerView以及ListView中的图像加载问题","published":1,"updated":"2016-10-07T11:19:59.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50p002hlq0hznv0fmtp","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"ListView-中出现错位，重复的图片\"><a href=\"#ListView-中出现错位，重复的图片\" class=\"headerlink\" title=\"ListView 中出现错位，重复的图片\"></a>ListView 中出现错位，重复的图片</h3><ul>\n<li><p>原因：为了性能的提升，我们一般会采取重复使用item的方式，应用仅仅需要inflate n（屏幕所能显示的item总数）个view而非数据的size个view，这样可以极大地提高效率，如下</p>\n<pre><code>public View getView(int position, View convertView, ViewGroup parent) {\n    ViewHolder holder = null;\n    if (convertView != null) {\n        holder = (ViewHolder)convertView.getTag();\n    } else {\n        convertView = mInflater.inflate(R.layout.item_list_view, parent, false);\n        holder = new ViewHolder();\n        holder.imageView = (ImageView)convertView.findViewById(R.id.image_view_list_view);\n        holder.textView = (TextView)convertView.findViewById(R.id.text_view_list_view);\n        convertView.setTag(holder);\n    }\n......\n}\n</code></pre><a id=\"more\"></a>\n<p>但是，随之而来的问题是：图片异步加载时可能会导致的错乱问题。当第一个图片在后台线程进行加载时（可能是网络下载），在还没有下载完成的时候，我们对listview进行滚动，这个时候的item的view是复用的，所以当图片加载完成后，会将图片设置到后面的某个item里。</p>\n</li>\n<li><p>解决方法：通过给imageView设置tag（将tag设置为uri），在设置图片时，进行比较，不等的设置为默认值。</p>\n<pre><code>ImageView imageView = holder.imageView;\nString tag = (String) imageView.getTag();\nString url = items.get(position).getUrl();\nif (!url.equals(tag)) {\n    imageView.setImageDrawable(mDefaultBitmapDrawable);\n}\nimageView.setTag(url);\nimageLoader.bindBitmap(url, imageView, 100, 100);\n</code></pre></li>\n</ul>\n<h3 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h3><p>类似的</p>\n<pre><code>public void onBindViewHolder(ViewHolder holder, int position) {\n    String tag = (String) holder.imageView.getTag();\n    if (!items.get(position).getUrl().equals(tag)) {\n\n    }\n    holder.imageView.setTag(items.get(position).getUrl());\n    imageLoader.bindBitmap(items.get(position).getUrl(), holder.imageView, 500, 500);\n}\n</code></pre>","site":{"data":{}},"excerpt":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h3 id=\"ListView-中出现错位，重复的图片\"><a href=\"#ListView-中出现错位，重复的图片\" class=\"headerlink\" title=\"ListView 中出现错位，重复的图片\"></a>ListView 中出现错位，重复的图片</h3><ul>\n<li><p>原因：为了性能的提升，我们一般会采取重复使用item的方式，应用仅仅需要inflate n（屏幕所能显示的item总数）个view而非数据的size个view，这样可以极大地提高效率，如下</p>\n<pre><code>public View getView(int position, View convertView, ViewGroup parent) {\n    ViewHolder holder = null;\n    if (convertView != null) {\n        holder = (ViewHolder)convertView.getTag();\n    } else {\n        convertView = mInflater.inflate(R.layout.item_list_view, parent, false);\n        holder = new ViewHolder();\n        holder.imageView = (ImageView)convertView.findViewById(R.id.image_view_list_view);\n        holder.textView = (TextView)convertView.findViewById(R.id.text_view_list_view);\n        convertView.setTag(holder);\n    }\n......\n}\n</code></pre>","more":"<p>但是，随之而来的问题是：图片异步加载时可能会导致的错乱问题。当第一个图片在后台线程进行加载时（可能是网络下载），在还没有下载完成的时候，我们对listview进行滚动，这个时候的item的view是复用的，所以当图片加载完成后，会将图片设置到后面的某个item里。</p>\n</li>\n<li><p>解决方法：通过给imageView设置tag（将tag设置为uri），在设置图片时，进行比较，不等的设置为默认值。</p>\n<pre><code>ImageView imageView = holder.imageView;\nString tag = (String) imageView.getTag();\nString url = items.get(position).getUrl();\nif (!url.equals(tag)) {\n    imageView.setImageDrawable(mDefaultBitmapDrawable);\n}\nimageView.setTag(url);\nimageLoader.bindBitmap(url, imageView, 100, 100);\n</code></pre></li>\n</ul>\n<h3 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h3><p>类似的</p>\n<pre><code>public void onBindViewHolder(ViewHolder holder, int position) {\n    String tag = (String) holder.imageView.getTag();\n    if (!items.get(position).getUrl().equals(tag)) {\n\n    }\n    holder.imageView.setTag(items.get(position).getUrl());\n    imageLoader.bindBitmap(items.get(position).getUrl(), holder.imageView, 500, 500);\n}\n</code></pre>"},{"title":"关于handler以及一些回调的思考","date":"2016-06-23T10:30:21.000Z","_content":"\n \n---\n<font style=\"font-family:微软雅黑\">\n有线程如下：\n\n\tpublic class SetTextThread extends Thread {\n\t    private IIsetText iIsetText;\n\t    private  Handler handler;\n\t    private  MyNum myNum;\n\t    public SetTextThread(IIsetText iIsetText) {\n\t        this.iIsetText = iIsetText;\n\t    }\n\t    public SetTextThread(Handler handler) {\n\t        this.handler = handler;\n\t    }\n\t    public SetTextThread(MyNum myNum) {\n\t        print(\"constructor:\" + Thread.currentThread());\n\t        this.myNum = myNum;\n\t    }\n\t    @Override\n\t    public void run() {\n\t        print(\"run:\" + Thread.currentThread());\n\t//        iIsetText.setText();\n\t//        handler.sendMessage(new Message());\n\t        myNum.i = 9999;\n\t    }\n\t\n\t    public void print(String s) {\n\t        System.out.println(s);\n\t    }\n\t}\n\n* 多线程中，变量虽然相同，但是其实他们指向的是不同的内存区域，所以修改是不会影响到互相的值的。//此处有待确认正确与否，待查看thinking in java后再行确定。\n* handler中，首先要先了解handler的消息机制\n\t\n\t\tMessageQueue：消息队列\n\t\tLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n\t\tHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n所以，当我们在子线程中用handler发送消息时，虽然说此时的handler是另外线程中主线程handler的复制品，但是内容是完全一样的，亦即其Looper与消息队列依然是主线程的，所以，当发送消息时，插入的MessageQueue依旧是主线程，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n","source":"_posts/关于handler以及一些回调的思考.md","raw":"---\ntitle: 关于handler以及一些回调的思考\ndate: 2016-06-23 18:30:21\ntags: android\n---\n\n \n---\n<font style=\"font-family:微软雅黑\">\n有线程如下：\n\n\tpublic class SetTextThread extends Thread {\n\t    private IIsetText iIsetText;\n\t    private  Handler handler;\n\t    private  MyNum myNum;\n\t    public SetTextThread(IIsetText iIsetText) {\n\t        this.iIsetText = iIsetText;\n\t    }\n\t    public SetTextThread(Handler handler) {\n\t        this.handler = handler;\n\t    }\n\t    public SetTextThread(MyNum myNum) {\n\t        print(\"constructor:\" + Thread.currentThread());\n\t        this.myNum = myNum;\n\t    }\n\t    @Override\n\t    public void run() {\n\t        print(\"run:\" + Thread.currentThread());\n\t//        iIsetText.setText();\n\t//        handler.sendMessage(new Message());\n\t        myNum.i = 9999;\n\t    }\n\t\n\t    public void print(String s) {\n\t        System.out.println(s);\n\t    }\n\t}\n\n* 多线程中，变量虽然相同，但是其实他们指向的是不同的内存区域，所以修改是不会影响到互相的值的。//此处有待确认正确与否，待查看thinking in java后再行确定。\n* handler中，首先要先了解handler的消息机制\n\t\n\t\tMessageQueue：消息队列\n\t\tLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\n\t\tHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n所以，当我们在子线程中用handler发送消息时，虽然说此时的handler是另外线程中主线程handler的复制品，但是内容是完全一样的，亦即其Looper与消息队列依然是主线程的，所以，当发送消息时，插入的MessageQueue依旧是主线程，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。\n","slug":"关于handler以及一些回调的思考","published":1,"updated":"2018-07-01T08:32:28.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50q002klq0h59h1q8bu","content":"<hr>\n<p><font style=\"font-family:微软雅黑\"><br>有线程如下：</font></p>\n<pre><code>public class SetTextThread extends Thread {\n    private IIsetText iIsetText;\n    private  Handler handler;\n    private  MyNum myNum;\n    public SetTextThread(IIsetText iIsetText) {\n        this.iIsetText = iIsetText;\n    }\n    public SetTextThread(Handler handler) {\n        this.handler = handler;\n    }\n    public SetTextThread(MyNum myNum) {\n        print(&quot;constructor:&quot; + Thread.currentThread());\n        this.myNum = myNum;\n    }\n    @Override\n    public void run() {\n        print(&quot;run:&quot; + Thread.currentThread());\n//        iIsetText.setText();\n//        handler.sendMessage(new Message());\n        myNum.i = 9999;\n    }\n\n    public void print(String s) {\n        System.out.println(s);\n    }\n}\n</code></pre><ul>\n<li>多线程中，变量虽然相同，但是其实他们指向的是不同的内存区域，所以修改是不会影响到互相的值的。//此处有待确认正确与否，待查看thinking in java后再行确定。</li>\n<li><p>handler中，首先要先了解handler的消息机制</p>\n<pre><code>MessageQueue：消息队列\nLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\nHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n</code></pre><p>所以，当我们在子线程中用handler发送消息时，虽然说此时的handler是另外线程中主线程handler的复制品，但是内容是完全一样的，亦即其Looper与消息队列依然是主线程的，所以，当发送消息时，插入的MessageQueue依旧是主线程，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p><font style=\"font-family:微软雅黑\"><br>有线程如下：</font></p>\n<pre><code>public class SetTextThread extends Thread {\n    private IIsetText iIsetText;\n    private  Handler handler;\n    private  MyNum myNum;\n    public SetTextThread(IIsetText iIsetText) {\n        this.iIsetText = iIsetText;\n    }\n    public SetTextThread(Handler handler) {\n        this.handler = handler;\n    }\n    public SetTextThread(MyNum myNum) {\n        print(&quot;constructor:&quot; + Thread.currentThread());\n        this.myNum = myNum;\n    }\n    @Override\n    public void run() {\n        print(&quot;run:&quot; + Thread.currentThread());\n//        iIsetText.setText();\n//        handler.sendMessage(new Message());\n        myNum.i = 9999;\n    }\n\n    public void print(String s) {\n        System.out.println(s);\n    }\n}\n</code></pre><ul>\n<li>多线程中，变量虽然相同，但是其实他们指向的是不同的内存区域，所以修改是不会影响到互相的值的。//此处有待确认正确与否，待查看thinking in java后再行确定。</li>\n<li><p>handler中，首先要先了解handler的消息机制</p>\n<pre><code>MessageQueue：消息队列\nLooper：循环，一直从消息队列中获得消息，如果没有消息则一直循环。成员变量有MessageQueue。ThreadLocal变量，每个线程唯一且相同。\nHandler：成员变量有Looper，亦即也拥有MessageQueue，发送消息时向消息队列插入消息，有Looper负责发现消息并且根据Message的target（亦即handler）来负责处理消息。\n</code></pre><p>所以，当我们在子线程中用handler发送消息时，虽然说此时的handler是另外线程中主线程handler的复制品，但是内容是完全一样的，亦即其Looper与消息队列依然是主线程的，所以，当发送消息时，插入的MessageQueue依旧是主线程，此时由handler的操作便变成了主线程的操作而非在子线程中操作界面。</p>\n</li>\n</ul>\n"},{"title":"测试https图床","date":"2018-06-23T10:30:21.000Z","_content":"# https图床\n* 在给网站添加了https之后,发现访问的时候依然处于不安全的状态,查看提示之后才知道是七牛图床的协议导致的\n\t* 在页面上存在http的链接的时候,浏览器仍然会提示不安全.\n* 为了访问页面时的小绿锁,势必得寻找一个https的图床了.\n\t* 七牛云是有提供https支持的,只是需要在七牛云添加备案后的域名,由于网站并不打算备案,所以这条路就行不通了\n\t* 国内的其他一些有提供https图床的服务又有点不靠谱,说不定哪天就跑路了呢\n\t* 微博的图床服务似乎也不是很稳定\n\t* imgur,这个又有被墙的风险\n\t* 腾讯云对象存储,这个似乎比较靠谱一些,只是没有一些比较趁手的工具\n* 估计还是得用imgur吧,或者用腾讯云,再或者就是尽量采用代码以及描述性的文字来写博客吧(┓( ´∀` )┏) \n## imgur图片测试\n* ![Imgur](https://i.imgur.com/KrpH5ds.png)\n\n## 腾讯云对象存储\n![](https://wuweizhao-1256078486.cos.ap-guangzhou.myqcloud.com/wuweizhao.com-pic/TIM20180303223306.jpg)\n","source":"_posts/测试https图床imgur.md","raw":"---\ntitle: 测试https图床\ndate: 2018-06-23 18:30:21\ntags:\n---\n# https图床\n* 在给网站添加了https之后,发现访问的时候依然处于不安全的状态,查看提示之后才知道是七牛图床的协议导致的\n\t* 在页面上存在http的链接的时候,浏览器仍然会提示不安全.\n* 为了访问页面时的小绿锁,势必得寻找一个https的图床了.\n\t* 七牛云是有提供https支持的,只是需要在七牛云添加备案后的域名,由于网站并不打算备案,所以这条路就行不通了\n\t* 国内的其他一些有提供https图床的服务又有点不靠谱,说不定哪天就跑路了呢\n\t* 微博的图床服务似乎也不是很稳定\n\t* imgur,这个又有被墙的风险\n\t* 腾讯云对象存储,这个似乎比较靠谱一些,只是没有一些比较趁手的工具\n* 估计还是得用imgur吧,或者用腾讯云,再或者就是尽量采用代码以及描述性的文字来写博客吧(┓( ´∀` )┏) \n## imgur图片测试\n* ![Imgur](https://i.imgur.com/KrpH5ds.png)\n\n## 腾讯云对象存储\n![](https://wuweizhao-1256078486.cos.ap-guangzhou.myqcloud.com/wuweizhao.com-pic/TIM20180303223306.jpg)\n","slug":"测试https图床imgur","published":1,"updated":"2018-06-23T10:33:10.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50r002mlq0h45ggc9cf","content":"<h1 id=\"https图床\"><a href=\"#https图床\" class=\"headerlink\" title=\"https图床\"></a>https图床</h1><ul>\n<li>在给网站添加了https之后,发现访问的时候依然处于不安全的状态,查看提示之后才知道是七牛图床的协议导致的<ul>\n<li>在页面上存在http的链接的时候,浏览器仍然会提示不安全.</li>\n</ul>\n</li>\n<li>为了访问页面时的小绿锁,势必得寻找一个https的图床了.<ul>\n<li>七牛云是有提供https支持的,只是需要在七牛云添加备案后的域名,由于网站并不打算备案,所以这条路就行不通了</li>\n<li>国内的其他一些有提供https图床的服务又有点不靠谱,说不定哪天就跑路了呢</li>\n<li>微博的图床服务似乎也不是很稳定</li>\n<li>imgur,这个又有被墙的风险</li>\n<li>腾讯云对象存储,这个似乎比较靠谱一些,只是没有一些比较趁手的工具</li>\n</ul>\n</li>\n<li>估计还是得用imgur吧,或者用腾讯云,再或者就是尽量采用代码以及描述性的文字来写博客吧(┓( ´∀` )┏) <h2 id=\"imgur图片测试\"><a href=\"#imgur图片测试\" class=\"headerlink\" title=\"imgur图片测试\"></a>imgur图片测试</h2></li>\n<li><img src=\"https://i.imgur.com/KrpH5ds.png\" alt=\"Imgur\"></li>\n</ul>\n<h2 id=\"腾讯云对象存储\"><a href=\"#腾讯云对象存储\" class=\"headerlink\" title=\"腾讯云对象存储\"></a>腾讯云对象存储</h2><p><img src=\"https://wuweizhao-1256078486.cos.ap-guangzhou.myqcloud.com/wuweizhao.com-pic/TIM20180303223306.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"https图床\"><a href=\"#https图床\" class=\"headerlink\" title=\"https图床\"></a>https图床</h1><ul>\n<li>在给网站添加了https之后,发现访问的时候依然处于不安全的状态,查看提示之后才知道是七牛图床的协议导致的<ul>\n<li>在页面上存在http的链接的时候,浏览器仍然会提示不安全.</li>\n</ul>\n</li>\n<li>为了访问页面时的小绿锁,势必得寻找一个https的图床了.<ul>\n<li>七牛云是有提供https支持的,只是需要在七牛云添加备案后的域名,由于网站并不打算备案,所以这条路就行不通了</li>\n<li>国内的其他一些有提供https图床的服务又有点不靠谱,说不定哪天就跑路了呢</li>\n<li>微博的图床服务似乎也不是很稳定</li>\n<li>imgur,这个又有被墙的风险</li>\n<li>腾讯云对象存储,这个似乎比较靠谱一些,只是没有一些比较趁手的工具</li>\n</ul>\n</li>\n<li>估计还是得用imgur吧,或者用腾讯云,再或者就是尽量采用代码以及描述性的文字来写博客吧(┓( ´∀` )┏) <h2 id=\"imgur图片测试\"><a href=\"#imgur图片测试\" class=\"headerlink\" title=\"imgur图片测试\"></a>imgur图片测试</h2></li>\n<li><img src=\"https://i.imgur.com/KrpH5ds.png\" alt=\"Imgur\"></li>\n</ul>\n<h2 id=\"腾讯云对象存储\"><a href=\"#腾讯云对象存储\" class=\"headerlink\" title=\"腾讯云对象存储\"></a>腾讯云对象存储</h2><p><img src=\"https://wuweizhao-1256078486.cos.ap-guangzhou.myqcloud.com/wuweizhao.com-pic/TIM20180303223306.jpg\" alt=\"\"></p>\n"},{"title":"深入剖析tomcat笔记","date":"2017-10-30T12:33:52.000Z","_content":"\n* servlet\n* reponse\n* request\n* 启动连接器->等待连接->调用container容器->解析header,调用servlet\n\n","source":"_posts/深入剖析tomcat笔记.md","raw":"---\ntitle: 深入剖析tomcat笔记\ndate: 2017-10-30 20:33:52\ntags:\n---\n\n* servlet\n* reponse\n* request\n* 启动连接器->等待连接->调用container容器->解析header,调用servlet\n\n","slug":"深入剖析tomcat笔记","published":1,"updated":"2017-10-30T14:51:00.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50s002plq0h4f14971p","content":"<ul>\n<li>servlet</li>\n<li>reponse</li>\n<li>request</li>\n<li>启动连接器-&gt;等待连接-&gt;调用container容器-&gt;解析header,调用servlet</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>servlet</li>\n<li>reponse</li>\n<li>request</li>\n<li>启动连接器-&gt;等待连接-&gt;调用container容器-&gt;解析header,调用servlet</li>\n</ul>\n"},{"title":"跨域请求","date":"2017-11-14T12:35:48.000Z","_content":"\n# 跨域资源请求CORS\n## 1.什么是跨域资源请求\n* 通常情况下,我们访问一个网站的过程如下:\n\t* 访问页面example.com,加载页面html以及js\n\t* 对页面进行一些操作,由js通过ajax访问后台,进行页面的更新.\n* 一般情况下,通过ajax调用后台是同源的,同源指的是:\n\t* **协议相同**\n\t* **端口号相同**\n\t* **地址相同**\n* 但是有时候通过js请求非同源的后台服务,这个时候就是属于跨域资源请求了\n\n<!--more-->\n## 2.问题\n* 由于Ajax的同源设置策略,所以如果我们直接请求非同源的地址的话,会出现错误\n\n## 3.解决方法\n### 1. 作为用户\n* 安装chrome插件Allow-Control-Allow-Origin后启用即可.\n### 2.作为开发者\n* 当浏览器发现ajax请求是跨域请求时,会在请求头上面添加origin字段,这个字段将作为服务器指定是否允许同源请求的地址\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/61942626.jpg)\n* 在服务器上,我们需要配置web.xml中SpringServlet的初始化参数,如下\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/92714587.jpg)\n* 其中,CrosbyFilter代码如下:\n<pre>\npublic class CrosFilter implements ContainerResponseFilter {\n\t  \n    @Override\n    public ContainerResponse filter(ContainerRequest creq, ContainerResponse cres) {\n    \tcres.getHttpHeaders().add(\"Access-Control-Allow-Origin\", \"*\");\n        cres.getHttpHeaders().add(\"Access-Control-Allow-Headers\", \n        \t\t\"Content-Type, msgversion\");\n        cres.getHttpHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n        return cres;\n    }\n}\n</pre>\n* 需要注意的是头部添加的三个值:\n\t* Access-Control-Allow-Origin:其值为允许跨域访问的源地址,可以为*匹配所有或者具体的源地址\n\t* Access-Control-Allow-Headers:CORS请求时,XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定,如上面代码所示,在返回里面添加了msgversion的头部信息,如果不需要额外信息此项可不写\n\t* Access-Control-Allow-Credentials:表示是否允许发送Cookie,这个值也只能设为true，如果服务器不要浏览器发送Cookie，不要添加该字段即可\n* 修改之后,跨域访问时可以看到返回的内容为:\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/34546538.jpg)\n### 3.总结\n* 总的来说,简单跨域请求主要的操作是还是在服务器端进行操作,大部分浏览器都能够自动地进行跨域的访问,上面所提到的也仅仅是简单的跨域资源请求,更多的资料可以去查看[http://www.ruanyifeng.com/blog/2016/04/cors.html](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n----\n### jQuery中ajax请求的跨域问题\n最近用到了百度地图的web api,想要通过ajax get来获得内容,没想到都跨域了.解决方法如下(其中success的值为自定义的回调函数)\n\n        var options = {\n            type: \"get\",\n            dataType:\"jsonp\",\n            jsonp:\"callback\",\n            url: serviceURL,\n            //dataType: 'json',\n            timeout: timeout || 20000,//超时时间设置，单位毫秒\n            success: callBack\n    \t};\n        $.ajax(options);\n#### 原理JSONP\n参考[http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html \"浏览器同源政策及其规避方法\")中JSONP部分内容\n#### 局限\njsonp只能是解决get方法的跨域问题,如果是post的话,还是需要修改服务器的相关内容(参照上面解决方法中开发者的部分)\n\n\n","source":"_posts/跨域请求.md","raw":"---\ntitle: 跨域请求\ndate: 2017-11-14 20:35:48\ntags:\n- http\n- 网络\n---\n\n# 跨域资源请求CORS\n## 1.什么是跨域资源请求\n* 通常情况下,我们访问一个网站的过程如下:\n\t* 访问页面example.com,加载页面html以及js\n\t* 对页面进行一些操作,由js通过ajax访问后台,进行页面的更新.\n* 一般情况下,通过ajax调用后台是同源的,同源指的是:\n\t* **协议相同**\n\t* **端口号相同**\n\t* **地址相同**\n* 但是有时候通过js请求非同源的后台服务,这个时候就是属于跨域资源请求了\n\n<!--more-->\n## 2.问题\n* 由于Ajax的同源设置策略,所以如果我们直接请求非同源的地址的话,会出现错误\n\n## 3.解决方法\n### 1. 作为用户\n* 安装chrome插件Allow-Control-Allow-Origin后启用即可.\n### 2.作为开发者\n* 当浏览器发现ajax请求是跨域请求时,会在请求头上面添加origin字段,这个字段将作为服务器指定是否允许同源请求的地址\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/61942626.jpg)\n* 在服务器上,我们需要配置web.xml中SpringServlet的初始化参数,如下\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/92714587.jpg)\n* 其中,CrosbyFilter代码如下:\n<pre>\npublic class CrosFilter implements ContainerResponseFilter {\n\t  \n    @Override\n    public ContainerResponse filter(ContainerRequest creq, ContainerResponse cres) {\n    \tcres.getHttpHeaders().add(\"Access-Control-Allow-Origin\", \"*\");\n        cres.getHttpHeaders().add(\"Access-Control-Allow-Headers\", \n        \t\t\"Content-Type, msgversion\");\n        cres.getHttpHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n        return cres;\n    }\n}\n</pre>\n* 需要注意的是头部添加的三个值:\n\t* Access-Control-Allow-Origin:其值为允许跨域访问的源地址,可以为*匹配所有或者具体的源地址\n\t* Access-Control-Allow-Headers:CORS请求时,XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定,如上面代码所示,在返回里面添加了msgversion的头部信息,如果不需要额外信息此项可不写\n\t* Access-Control-Allow-Credentials:表示是否允许发送Cookie,这个值也只能设为true，如果服务器不要浏览器发送Cookie，不要添加该字段即可\n* 修改之后,跨域访问时可以看到返回的内容为:\n![](http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/34546538.jpg)\n### 3.总结\n* 总的来说,简单跨域请求主要的操作是还是在服务器端进行操作,大部分浏览器都能够自动地进行跨域的访问,上面所提到的也仅仅是简单的跨域资源请求,更多的资料可以去查看[http://www.ruanyifeng.com/blog/2016/04/cors.html](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n----\n### jQuery中ajax请求的跨域问题\n最近用到了百度地图的web api,想要通过ajax get来获得内容,没想到都跨域了.解决方法如下(其中success的值为自定义的回调函数)\n\n        var options = {\n            type: \"get\",\n            dataType:\"jsonp\",\n            jsonp:\"callback\",\n            url: serviceURL,\n            //dataType: 'json',\n            timeout: timeout || 20000,//超时时间设置，单位毫秒\n            success: callBack\n    \t};\n        $.ajax(options);\n#### 原理JSONP\n参考[http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html \"浏览器同源政策及其规避方法\")中JSONP部分内容\n#### 局限\njsonp只能是解决get方法的跨域问题,如果是post的话,还是需要修改服务器的相关内容(参照上面解决方法中开发者的部分)\n\n\n","slug":"跨域请求","published":1,"updated":"2018-01-24T03:33:06.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50t002rlq0h2m73zo1x","content":"<h1 id=\"跨域资源请求CORS\"><a href=\"#跨域资源请求CORS\" class=\"headerlink\" title=\"跨域资源请求CORS\"></a>跨域资源请求CORS</h1><h2 id=\"1-什么是跨域资源请求\"><a href=\"#1-什么是跨域资源请求\" class=\"headerlink\" title=\"1.什么是跨域资源请求\"></a>1.什么是跨域资源请求</h2><ul>\n<li>通常情况下,我们访问一个网站的过程如下:<ul>\n<li>访问页面example.com,加载页面html以及js</li>\n<li>对页面进行一些操作,由js通过ajax访问后台,进行页面的更新.</li>\n</ul>\n</li>\n<li>一般情况下,通过ajax调用后台是同源的,同源指的是:<ul>\n<li><strong>协议相同</strong></li>\n<li><strong>端口号相同</strong></li>\n<li><strong>地址相同</strong></li>\n</ul>\n</li>\n<li>但是有时候通过js请求非同源的后台服务,这个时候就是属于跨域资源请求了</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"2-问题\"><a href=\"#2-问题\" class=\"headerlink\" title=\"2.问题\"></a>2.问题</h2><ul>\n<li>由于Ajax的同源设置策略,所以如果我们直接请求非同源的地址的话,会出现错误</li>\n</ul>\n<h2 id=\"3-解决方法\"><a href=\"#3-解决方法\" class=\"headerlink\" title=\"3.解决方法\"></a>3.解决方法</h2><h3 id=\"1-作为用户\"><a href=\"#1-作为用户\" class=\"headerlink\" title=\"1. 作为用户\"></a>1. 作为用户</h3><ul>\n<li>安装chrome插件Allow-Control-Allow-Origin后启用即可.<h3 id=\"2-作为开发者\"><a href=\"#2-作为开发者\" class=\"headerlink\" title=\"2.作为开发者\"></a>2.作为开发者</h3></li>\n<li>当浏览器发现ajax请求是跨域请求时,会在请求头上面添加origin字段,这个字段将作为服务器指定是否允许同源请求的地址<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/61942626.jpg\" alt=\"\"></li>\n<li>在服务器上,我们需要配置web.xml中SpringServlet的初始化参数,如下<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/92714587.jpg\" alt=\"\"></li>\n<li><p>其中,CrosbyFilter代码如下:</p>\n<pre>\npublic class CrosFilter implements ContainerResponseFilter {\n\n  @Override\n  public ContainerResponse filter(ContainerRequest creq, ContainerResponse cres) {\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Origin\", \"*\");\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Headers\", \n              \"Content-Type, msgversion\");\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n      return cres;\n  }\n}\n</pre></li>\n<li>需要注意的是头部添加的三个值:<ul>\n<li>Access-Control-Allow-Origin:其值为允许跨域访问的源地址,可以为*匹配所有或者具体的源地址</li>\n<li>Access-Control-Allow-Headers:CORS请求时,XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定,如上面代码所示,在返回里面添加了msgversion的头部信息,如果不需要额外信息此项可不写</li>\n<li>Access-Control-Allow-Credentials:表示是否允许发送Cookie,这个值也只能设为true，如果服务器不要浏览器发送Cookie，不要添加该字段即可</li>\n</ul>\n</li>\n<li>修改之后,跨域访问时可以看到返回的内容为:<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/34546538.jpg\" alt=\"\"><h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3></li>\n<li>总的来说,简单跨域请求主要的操作是还是在服务器端进行操作,大部分浏览器都能够自动地进行跨域的访问,上面所提到的也仅仅是简单的跨域资源请求,更多的资料可以去查看<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>\n</ul>\n<hr>\n<h3 id=\"jQuery中ajax请求的跨域问题\"><a href=\"#jQuery中ajax请求的跨域问题\" class=\"headerlink\" title=\"jQuery中ajax请求的跨域问题\"></a>jQuery中ajax请求的跨域问题</h3><p>最近用到了百度地图的web api,想要通过ajax get来获得内容,没想到都跨域了.解决方法如下(其中success的值为自定义的回调函数)</p>\n<pre><code>var options = {\n    type: &quot;get&quot;,\n    dataType:&quot;jsonp&quot;,\n    jsonp:&quot;callback&quot;,\n    url: serviceURL,\n    //dataType: &apos;json&apos;,\n    timeout: timeout || 20000,//超时时间设置，单位毫秒\n    success: callBack\n};\n$.ajax(options);\n</code></pre><h4 id=\"原理JSONP\"><a href=\"#原理JSONP\" class=\"headerlink\" title=\"原理JSONP\"></a>原理JSONP</h4><p>参考<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" title=\"浏览器同源政策及其规避方法\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a>中JSONP部分内容</p>\n<h4 id=\"局限\"><a href=\"#局限\" class=\"headerlink\" title=\"局限\"></a>局限</h4><p>jsonp只能是解决get方法的跨域问题,如果是post的话,还是需要修改服务器的相关内容(参照上面解决方法中开发者的部分)</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"跨域资源请求CORS\"><a href=\"#跨域资源请求CORS\" class=\"headerlink\" title=\"跨域资源请求CORS\"></a>跨域资源请求CORS</h1><h2 id=\"1-什么是跨域资源请求\"><a href=\"#1-什么是跨域资源请求\" class=\"headerlink\" title=\"1.什么是跨域资源请求\"></a>1.什么是跨域资源请求</h2><ul>\n<li>通常情况下,我们访问一个网站的过程如下:<ul>\n<li>访问页面example.com,加载页面html以及js</li>\n<li>对页面进行一些操作,由js通过ajax访问后台,进行页面的更新.</li>\n</ul>\n</li>\n<li>一般情况下,通过ajax调用后台是同源的,同源指的是:<ul>\n<li><strong>协议相同</strong></li>\n<li><strong>端口号相同</strong></li>\n<li><strong>地址相同</strong></li>\n</ul>\n</li>\n<li>但是有时候通过js请求非同源的后台服务,这个时候就是属于跨域资源请求了</li>\n</ul>","more":"<h2 id=\"2-问题\"><a href=\"#2-问题\" class=\"headerlink\" title=\"2.问题\"></a>2.问题</h2><ul>\n<li>由于Ajax的同源设置策略,所以如果我们直接请求非同源的地址的话,会出现错误</li>\n</ul>\n<h2 id=\"3-解决方法\"><a href=\"#3-解决方法\" class=\"headerlink\" title=\"3.解决方法\"></a>3.解决方法</h2><h3 id=\"1-作为用户\"><a href=\"#1-作为用户\" class=\"headerlink\" title=\"1. 作为用户\"></a>1. 作为用户</h3><ul>\n<li>安装chrome插件Allow-Control-Allow-Origin后启用即可.<h3 id=\"2-作为开发者\"><a href=\"#2-作为开发者\" class=\"headerlink\" title=\"2.作为开发者\"></a>2.作为开发者</h3></li>\n<li>当浏览器发现ajax请求是跨域请求时,会在请求头上面添加origin字段,这个字段将作为服务器指定是否允许同源请求的地址<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/61942626.jpg\" alt=\"\"></li>\n<li>在服务器上,我们需要配置web.xml中SpringServlet的初始化参数,如下<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/92714587.jpg\" alt=\"\"></li>\n<li><p>其中,CrosbyFilter代码如下:</p>\n<pre>\npublic class CrosFilter implements ContainerResponseFilter {\n\n  @Override\n  public ContainerResponse filter(ContainerRequest creq, ContainerResponse cres) {\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Origin\", \"*\");\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Headers\", \n              \"Content-Type, msgversion\");\n      cres.getHttpHeaders().add(\"Access-Control-Allow-Credentials\", \"true\");\n      return cres;\n  }\n}\n</pre></li>\n<li>需要注意的是头部添加的三个值:<ul>\n<li>Access-Control-Allow-Origin:其值为允许跨域访问的源地址,可以为*匹配所有或者具体的源地址</li>\n<li>Access-Control-Allow-Headers:CORS请求时,XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定,如上面代码所示,在返回里面添加了msgversion的头部信息,如果不需要额外信息此项可不写</li>\n<li>Access-Control-Allow-Credentials:表示是否允许发送Cookie,这个值也只能设为true，如果服务器不要浏览器发送Cookie，不要添加该字段即可</li>\n</ul>\n</li>\n<li>修改之后,跨域访问时可以看到返回的内容为:<br><img src=\"http://7xkzud.com1.z0.glb.clouddn.com/17-11-14/34546538.jpg\" alt=\"\"><h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3></li>\n<li>总的来说,简单跨域请求主要的操作是还是在服务器端进行操作,大部分浏览器都能够自动地进行跨域的访问,上面所提到的也仅仅是简单的跨域资源请求,更多的资料可以去查看<a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></li>\n</ul>\n<hr>\n<h3 id=\"jQuery中ajax请求的跨域问题\"><a href=\"#jQuery中ajax请求的跨域问题\" class=\"headerlink\" title=\"jQuery中ajax请求的跨域问题\"></a>jQuery中ajax请求的跨域问题</h3><p>最近用到了百度地图的web api,想要通过ajax get来获得内容,没想到都跨域了.解决方法如下(其中success的值为自定义的回调函数)</p>\n<pre><code>var options = {\n    type: &quot;get&quot;,\n    dataType:&quot;jsonp&quot;,\n    jsonp:&quot;callback&quot;,\n    url: serviceURL,\n    //dataType: &apos;json&apos;,\n    timeout: timeout || 20000,//超时时间设置，单位毫秒\n    success: callBack\n};\n$.ajax(options);\n</code></pre><h4 id=\"原理JSONP\"><a href=\"#原理JSONP\" class=\"headerlink\" title=\"原理JSONP\"></a>原理JSONP</h4><p>参考<a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\" title=\"浏览器同源政策及其规避方法\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html</a>中JSONP部分内容</p>\n<h4 id=\"局限\"><a href=\"#局限\" class=\"headerlink\" title=\"局限\"></a>局限</h4><p>jsonp只能是解决get方法的跨域问题,如果是post的话,还是需要修改服务器的相关内容(参照上面解决方法中开发者的部分)</p>"},{"title":"面试一些知识点","date":"2016-10-02T16:00:00.000Z","_content":"<font style=\"font-family:微软雅黑\">\n\n","source":"_posts/面试一些知识点记录.md","raw":"title: 面试一些知识点\ndate: 2016-10-03\ntag:\n- android\n- 面试\n\n---\n<font style=\"font-family:微软雅黑\">\n\n","slug":"面试一些知识点记录","published":1,"updated":"2016-10-03T05:30:38.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50v002ulq0hub1jql7r","content":"<font style=\"font-family:微软雅黑\">\n\n</font>","site":{"data":{}},"excerpt":"","more":"<font style=\"font-family:微软雅黑\">\n\n</font>"},{"title":"helloworld","date":"2016-06-23T10:30:21.000Z","_content":"<font style=\"font-family:微软雅黑\">\n## android面试题目\n### Service\n* Activity中\n\t\n\n\t\tvoid initData() {\n\t\t        mConnection = new ServiceConnection() {\n\t\t            @Override\n\t\t            public void onServiceConnected(ComponentName name, IBinder service) {\n\t\t                myBinder = (MyBinder)service;\n\t\t                myBinder.showMessage();\n\t\t            }\n\t\t\n\t\t            @Override\n\t\t            public void onServiceDisconnected(ComponentName name) {\n\t\t                SomeMethod.makeToast(ServiceActivity.this, \"service disconnected\");\n\t\t            }\n\t\t        };\n\t\t    }\n\n\t\tpublic void onClick(View v) {\n\t        Intent intent = null;\n\t        switch (v.getId()) {\n\t            case R.id.startSerBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                startService(intent);\n\t                break;\n\t            case R.id.endSerBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                stopService(intent);\n\t                break;\n\t            case R.id.bindBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                bindService(intent, mConnection, BIND_AUTO_CREATE);\n\t                isBind = true;\n\t                break;\n\t            case R.id.unBinBtn:\n\t                if (isBind) {\n\t                    unbindService(mConnection);\n\t                    isBind = false;\n\t                }\n\t                break;\n\t        }\n\t    }\n\t\t}\n* MyBinder类\n \t\n\t\tpublic class MyBinder extends Binder {\n\t\t    Context mContext;\n\t\t    public MyBinder(Context context) {\n\t\t        mContext = context;\n\t\t    }\n\t\t\n\t\t    public void showMessage() {\n\t\t        SomeMethod.makeToast(mContext, \"in myBinder\");\n\t\t    }\n\t\t}\n\n* MyService类\n\t\t\n\t\tpublic class MyService extends Service {\n\t\t    public static final String w = \"wilbert\";\n\t\t    @Override\n\t\t    public void onCreate() {\n\t\t        super.onCreate();\n\t\t        SomeMethod.makeToast(this, \"onCreate\");\n\t\t        Log.d(w, \"onCreate\");\n\t\t        myBinder = new MyBinder(this);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int onStartCommand(Intent intent, int flags, int startId) {\n\t\t        Log.d(w, \"onStartCommand\");\n\t\t        SomeMethod.makeToast(this, \"onStartCommand\");\n\t\t        return super.onStartCommand(intent, flags, startId);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onDestroy() {\n\t\t        SomeMethod.makeToast(this, \"onDestroy\");\n\t\t        Log.d(w, \"onDestroy\");\n\t\t        super.onDestroy();\n\t\t    }\n\t\t\n\t\t    MyBinder myBinder;\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public IBinder onBind(Intent intent) {\n\t\t        Log.d(w, \"onBind\");\n\t\t        return myBinder;\n\t\t    }\n\t\t}\n\n### 数据库\n* OpenHelper\n\n\t\tpackage com.wilbert.firstlinecode.DB;\n\t\t\n\t\timport android.content.Context;\n\t\timport android.database.sqlite.SQLiteDatabase;\n\t\timport android.database.sqlite.SQLiteOpenHelper;\n\t\timport android.widget.Toast;\n\t\t\n\t\t/**\n\t\t * Created by wilbert on 2016/4/15.\n\t\t */\n\t\tpublic class DbOpenHelper extends SQLiteOpenHelper {\n\t\t    public static final String CREATE_BOOK = \"create table book (\"\n\t\t            + \"id integer primary key autoincrement, \"\n\t\t            + \"author text, \"\n\t\t            + \"price real, \"\n\t\t            + \"pages integer, \"\n\t\t            + \"name text)\";\n\t\t    public static final String CREATE_CATEGORY = \"create table Category (\"\n\t\t            + \"id integer primary key autoincrement, \"\n\t\t            + \"category_name text, \"\n\t\t            + \"category_code integer)\";\n\t\t    private Context mContext;\n\t\t    public DbOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n\t\t        super(context, name, factory, version);\n\t\t        mContext = context;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onCreate(SQLiteDatabase db) {\n\t\t        db.execSQL(CREATE_BOOK);\n\t\t        db.execSQL(CREATE_CATEGORY);\n\t\t        Toast.makeText(mContext, \"create db successfully\", Toast.LENGTH_SHORT).show();\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\t\t\n\t\t    }\n\t\t}\n\n* SqlActivity\n\n\t\tpublic class SqlActivity extends BaseActivity {\n\t\t    Button createDbBtn;\n\t\t    Button insertBtn;\n\t\t    Button updateBtn;\n\t\t    Button deleteBtn;\n\t\t    ListView sqlListview;\n\t\t\n\t\t    DbOpenHelper dbOpenHelper;\n\t\t    SQLiteDatabase sqLiteDatabase;\n\t\t    List<String> stringList = new ArrayList<String>();\n\t\t    ArrayAdapter<String> arrayAdapter;\n\t\t    @Override\n\t\t    public void onCreate(Bundle savedInstanceState) {\n\t\t        super.onCreate(savedInstanceState);\n\t\t        setContentView(R.layout.activity_sql);\n\t\t        initView();\n\t\t        initData();\n\t\t        Log.v(\"w\", \"onCreate\");\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    void initView() {\n\t\t        createDbBtn = (Button)findViewById(R.id.createDbBtn);\n\t\t        createDbBtn.setOnClickListener(this);\n\t\t\n\t\t        insertBtn = (Button)findViewById(R.id.insertBtn);\n\t\t        insertBtn.setOnClickListener(this);\n\t\t\n\t\t        updateBtn = (Button)findViewById(R.id.updateBtn);\n\t\t        updateBtn.setOnClickListener(this);\n\t\t\n\t\t        deleteBtn = (Button)findViewById(R.id.deleteBtn);\n\t\t        deleteBtn.setOnClickListener(this);\n\t\t\n\t\t        sqlListview = (ListView)findViewById(R.id.dbListview);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    void initData() {\n\t\t        dbOpenHelper = new DbOpenHelper(this, \"BookStore\", null, 1);\n\t\t        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n\t\t        readDataFromSql();\n\t\t        arrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1\n\t\t                                        , stringList);\n\t\t        sqlListview.setAdapter(arrayAdapter);\n\t\t    }\n\t\t\n\t\t    private void readDataFromSql() {\n\t\t        stringList.clear();\n\t\t        Cursor cursor = sqLiteDatabase.query(Book.TABLE_NAME, null, null, null, null, null, null);\n\t\t        if (cursor.moveToFirst()) {\n\t\t            do {\n\t\t                stringList.add(Book.getBookFromCursor(cursor).toString());\n\t\t            } while (cursor.moveToNext());\n\t\t        }\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onClick(View v) {\n\t\t        switch (v.getId()) {\n\t\t            case R.id.createDbBtn:\n\t\t                dbOpenHelper.getWritableDatabase();\n\t\t                break;\n\t\t            case R.id.insertBtn:\n\t\t                Book book = new Book(\"wilbert\", \"mybook\", 99, 100);\n\t\t                long id = sqLiteDatabase.insert(Book.TABLE_NAME, null, book.makeContenValues());\n\t\t                if (id != -1) {\n\t\t                    Toast.makeText(this, \"insert successfully\", Toast.LENGTH_SHORT).show();\n\t\t                }\n\t\t                break;\n\t\t            case R.id.updateBtn:\n\t\t                Book book2 = new Book(\"wilbert\", \"mybook\", 50, 100);\n\t\t                int effects = sqLiteDatabase.update(Book.TABLE_NAME, book2.makeContenValues(), \"name = ?\",\n\t\t                        new String[]{\"mybook\"});\n\t\t                if (effects != 0) {\n\t\t                    Toast.makeText(this, \"update successfully\", Toast.LENGTH_SHORT).show();\n\t\t                }\n\t\t                break;\n\t\t            case R.id.deleteBtn:\n\t\t//                sqLiteDatabase.beginTransaction();\n\t\t                int i = sqLiteDatabase.delete(Book.TABLE_NAME, \"pages > ? OR name = ?\",\n\t\t                        new String[]{\"10\", \"wilbert\"});\n\t\t                if (i != 0) {\n\t\t                    showToasts(i + \" delete successfully\");\n\t\t                }\n\t\t//                sqLiteDatabase.endTransaction();\n\t\t                break;\n\t\t        }\n\t\t        readDataFromSql();\n\t\t        arrayAdapter.notifyDataSetChanged();\n\t\t    }\n\t\t\n\t\t    private void showToasts(String s) {\n\t\t        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();\n\t\t    }\n\t\t}\n\n\n### ContentProvider\n* contentProvider类\n\n\t\tpackage com.wilbert.firstlinecode.model;\n\t\t\n\t\timport android.content.ContentProvider;\n\t\timport android.content.ContentValues;\n\t\timport android.content.UriMatcher;\n\t\timport android.database.Cursor;\n\t\timport android.database.sqlite.SQLiteDatabase;\n\t\timport android.net.Uri;\n\t\timport android.support.annotation.Nullable;\n\t\t\n\t\timport com.wilbert.firstlinecode.DB.DbOpenHelper;\n\t\t\n\t\timport java.net.Inet4Address;\n\t\t\n\t\t/**\n\t\t * Created by wilbert on 2016/4/15.\n\t\t */\n\t\tpublic class BookProvider extends ContentProvider {\n\t\t\n\t\t    public static final int BOOK_DIR = 0;\n\t\t    public static final int BOOK_ITEM = 1;\n\t\t    public static final String AUTHORITY = \"com.example.databasetest.provider\";\n\t\t    private static UriMatcher uriMatcher;\n\t\t    private DbOpenHelper dbOpenHelper;\n\t\t    private SQLiteDatabase sqLiteDatabase;\n\t\t\n\t\t    static {\n\t\t        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n\t\t        uriMatcher.addURI(AUTHORITY, \"book\", BOOK_DIR);\n\t\t        uriMatcher.addURI(AUTHORITY, \"book/# \", BOOK_ITEM);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public boolean onCreate() {\n\t\t        dbOpenHelper = new DbOpenHelper(getContext(), \"BookStore\", null, 1);\n\t\t        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n\t\t        return true;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n\t\t        Cursor cursor = null;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                cursor = sqLiteDatabase.query(\"Book\", projection, selection, selectionArgs,\n\t\t                        null, null, sortOrder);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                cursor = sqLiteDatabase.query(\"Book\", projection, \"id = ?\", new String[]\n\t\t                        {bookId}, null, null, sortOrder);\n\t\t                break;\n\t\t        }\n\t\t        return cursor;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public String getType(Uri uri) {\n\t\t            switch (uriMatcher.match(uri)) {\n\t\t                case BOOK_DIR:\n\t\t                    return \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book\";\n\t\t                case BOOK_ITEM:\n\t\t                    return \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.book\";\n\t\t            }\n\t\t        return null;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public Uri insert(Uri uri, ContentValues values) {\n\t\t        Uri returnUri = null;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t            case BOOK_ITEM:\n\t\t                long newBookId = sqLiteDatabase.insert(\"Book\", null, values);\n\t\t                returnUri = Uri.parse(\"content://\" + AUTHORITY + \"/book/\" +\n\t\t                        newBookId);\n\t\t                break;\n\t\t        }\n\t\t        return returnUri;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int delete(Uri uri, String selection, String[] selectionArgs) {\n\t\t        int deletedRows = 0;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                deletedRows = sqLiteDatabase.delete(\"Book\", selection, selectionArgs);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                deletedRows = sqLiteDatabase.delete(\"Book\", \"id = ?\", new String[] { bookId });\n\t\t                break;\n\t\t        }\n\t\t        return deletedRows;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n\t\t        int updatedRows = 0;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                updatedRows = sqLiteDatabase.update(\"Book\", values, selection, selectionArgs);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                updatedRows = sqLiteDatabase.update(\"Book\", values, \"id = ?\", new String[]\n\t\t                        {bookId});\n\t\t                break;\n\t\t        }\n\t\t        return updatedRows;\n\t\t    }\n\t\t}\n\n* provider activity \n\n\n\t    public void onClick(View v) {\n\t        // TODO: 2016/4/15 query operation cursor\n\t        String newId;\n\t        switch (v.getId()) {\n\t            case R.id.queryBtn:\n\t                Uri uri2 = Uri.parse(\"content://com.example.databasetest.provider/book/1\");\n\t                Cursor cursor = getContentResolver().query(uri2, null, null, null, null);\n\t                if (cursor != null) {\n\t                    Book book = Book.getBookFromCursor(cursor);\n\t                    stringList.add(book.toString());\n\t                    arrayAdapter.notifyDataSetChanged();\n\t                }\n\t\n\t                break;\n\t            case R.id.insertBtn:\n\t                Uri uri = Uri.parse(\"content://com.example.databasetest.provider/book\");\n\t                Book book = new Book(\"wilbdd\", \"nae\", 100, 100);\n\t                Uri newUri = getContentResolver().insert(uri, book.makeContenValues());\n\t\n\t                //newId = newUri.getPathSegments().get(1);\n\t                makeToast(\"  \" + \"insert\");\n\t                makeToast(newUri.toString());\n\t                break;\n\t        }\n\t    }","source":"_posts/面试.md","raw":"---\ntitle: helloworld\ndate: 2016-06-23 18:30:21\ntags: android面试题目\n---\n<font style=\"font-family:微软雅黑\">\n## android面试题目\n### Service\n* Activity中\n\t\n\n\t\tvoid initData() {\n\t\t        mConnection = new ServiceConnection() {\n\t\t            @Override\n\t\t            public void onServiceConnected(ComponentName name, IBinder service) {\n\t\t                myBinder = (MyBinder)service;\n\t\t                myBinder.showMessage();\n\t\t            }\n\t\t\n\t\t            @Override\n\t\t            public void onServiceDisconnected(ComponentName name) {\n\t\t                SomeMethod.makeToast(ServiceActivity.this, \"service disconnected\");\n\t\t            }\n\t\t        };\n\t\t    }\n\n\t\tpublic void onClick(View v) {\n\t        Intent intent = null;\n\t        switch (v.getId()) {\n\t            case R.id.startSerBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                startService(intent);\n\t                break;\n\t            case R.id.endSerBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                stopService(intent);\n\t                break;\n\t            case R.id.bindBtn:\n\t                intent = new Intent(this, MyService.class);\n\t                bindService(intent, mConnection, BIND_AUTO_CREATE);\n\t                isBind = true;\n\t                break;\n\t            case R.id.unBinBtn:\n\t                if (isBind) {\n\t                    unbindService(mConnection);\n\t                    isBind = false;\n\t                }\n\t                break;\n\t        }\n\t    }\n\t\t}\n* MyBinder类\n \t\n\t\tpublic class MyBinder extends Binder {\n\t\t    Context mContext;\n\t\t    public MyBinder(Context context) {\n\t\t        mContext = context;\n\t\t    }\n\t\t\n\t\t    public void showMessage() {\n\t\t        SomeMethod.makeToast(mContext, \"in myBinder\");\n\t\t    }\n\t\t}\n\n* MyService类\n\t\t\n\t\tpublic class MyService extends Service {\n\t\t    public static final String w = \"wilbert\";\n\t\t    @Override\n\t\t    public void onCreate() {\n\t\t        super.onCreate();\n\t\t        SomeMethod.makeToast(this, \"onCreate\");\n\t\t        Log.d(w, \"onCreate\");\n\t\t        myBinder = new MyBinder(this);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int onStartCommand(Intent intent, int flags, int startId) {\n\t\t        Log.d(w, \"onStartCommand\");\n\t\t        SomeMethod.makeToast(this, \"onStartCommand\");\n\t\t        return super.onStartCommand(intent, flags, startId);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onDestroy() {\n\t\t        SomeMethod.makeToast(this, \"onDestroy\");\n\t\t        Log.d(w, \"onDestroy\");\n\t\t        super.onDestroy();\n\t\t    }\n\t\t\n\t\t    MyBinder myBinder;\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public IBinder onBind(Intent intent) {\n\t\t        Log.d(w, \"onBind\");\n\t\t        return myBinder;\n\t\t    }\n\t\t}\n\n### 数据库\n* OpenHelper\n\n\t\tpackage com.wilbert.firstlinecode.DB;\n\t\t\n\t\timport android.content.Context;\n\t\timport android.database.sqlite.SQLiteDatabase;\n\t\timport android.database.sqlite.SQLiteOpenHelper;\n\t\timport android.widget.Toast;\n\t\t\n\t\t/**\n\t\t * Created by wilbert on 2016/4/15.\n\t\t */\n\t\tpublic class DbOpenHelper extends SQLiteOpenHelper {\n\t\t    public static final String CREATE_BOOK = \"create table book (\"\n\t\t            + \"id integer primary key autoincrement, \"\n\t\t            + \"author text, \"\n\t\t            + \"price real, \"\n\t\t            + \"pages integer, \"\n\t\t            + \"name text)\";\n\t\t    public static final String CREATE_CATEGORY = \"create table Category (\"\n\t\t            + \"id integer primary key autoincrement, \"\n\t\t            + \"category_name text, \"\n\t\t            + \"category_code integer)\";\n\t\t    private Context mContext;\n\t\t    public DbOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n\t\t        super(context, name, factory, version);\n\t\t        mContext = context;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onCreate(SQLiteDatabase db) {\n\t\t        db.execSQL(CREATE_BOOK);\n\t\t        db.execSQL(CREATE_CATEGORY);\n\t\t        Toast.makeText(mContext, \"create db successfully\", Toast.LENGTH_SHORT).show();\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\t\t\n\t\t    }\n\t\t}\n\n* SqlActivity\n\n\t\tpublic class SqlActivity extends BaseActivity {\n\t\t    Button createDbBtn;\n\t\t    Button insertBtn;\n\t\t    Button updateBtn;\n\t\t    Button deleteBtn;\n\t\t    ListView sqlListview;\n\t\t\n\t\t    DbOpenHelper dbOpenHelper;\n\t\t    SQLiteDatabase sqLiteDatabase;\n\t\t    List<String> stringList = new ArrayList<String>();\n\t\t    ArrayAdapter<String> arrayAdapter;\n\t\t    @Override\n\t\t    public void onCreate(Bundle savedInstanceState) {\n\t\t        super.onCreate(savedInstanceState);\n\t\t        setContentView(R.layout.activity_sql);\n\t\t        initView();\n\t\t        initData();\n\t\t        Log.v(\"w\", \"onCreate\");\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    void initView() {\n\t\t        createDbBtn = (Button)findViewById(R.id.createDbBtn);\n\t\t        createDbBtn.setOnClickListener(this);\n\t\t\n\t\t        insertBtn = (Button)findViewById(R.id.insertBtn);\n\t\t        insertBtn.setOnClickListener(this);\n\t\t\n\t\t        updateBtn = (Button)findViewById(R.id.updateBtn);\n\t\t        updateBtn.setOnClickListener(this);\n\t\t\n\t\t        deleteBtn = (Button)findViewById(R.id.deleteBtn);\n\t\t        deleteBtn.setOnClickListener(this);\n\t\t\n\t\t        sqlListview = (ListView)findViewById(R.id.dbListview);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    void initData() {\n\t\t        dbOpenHelper = new DbOpenHelper(this, \"BookStore\", null, 1);\n\t\t        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n\t\t        readDataFromSql();\n\t\t        arrayAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1\n\t\t                                        , stringList);\n\t\t        sqlListview.setAdapter(arrayAdapter);\n\t\t    }\n\t\t\n\t\t    private void readDataFromSql() {\n\t\t        stringList.clear();\n\t\t        Cursor cursor = sqLiteDatabase.query(Book.TABLE_NAME, null, null, null, null, null, null);\n\t\t        if (cursor.moveToFirst()) {\n\t\t            do {\n\t\t                stringList.add(Book.getBookFromCursor(cursor).toString());\n\t\t            } while (cursor.moveToNext());\n\t\t        }\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void onClick(View v) {\n\t\t        switch (v.getId()) {\n\t\t            case R.id.createDbBtn:\n\t\t                dbOpenHelper.getWritableDatabase();\n\t\t                break;\n\t\t            case R.id.insertBtn:\n\t\t                Book book = new Book(\"wilbert\", \"mybook\", 99, 100);\n\t\t                long id = sqLiteDatabase.insert(Book.TABLE_NAME, null, book.makeContenValues());\n\t\t                if (id != -1) {\n\t\t                    Toast.makeText(this, \"insert successfully\", Toast.LENGTH_SHORT).show();\n\t\t                }\n\t\t                break;\n\t\t            case R.id.updateBtn:\n\t\t                Book book2 = new Book(\"wilbert\", \"mybook\", 50, 100);\n\t\t                int effects = sqLiteDatabase.update(Book.TABLE_NAME, book2.makeContenValues(), \"name = ?\",\n\t\t                        new String[]{\"mybook\"});\n\t\t                if (effects != 0) {\n\t\t                    Toast.makeText(this, \"update successfully\", Toast.LENGTH_SHORT).show();\n\t\t                }\n\t\t                break;\n\t\t            case R.id.deleteBtn:\n\t\t//                sqLiteDatabase.beginTransaction();\n\t\t                int i = sqLiteDatabase.delete(Book.TABLE_NAME, \"pages > ? OR name = ?\",\n\t\t                        new String[]{\"10\", \"wilbert\"});\n\t\t                if (i != 0) {\n\t\t                    showToasts(i + \" delete successfully\");\n\t\t                }\n\t\t//                sqLiteDatabase.endTransaction();\n\t\t                break;\n\t\t        }\n\t\t        readDataFromSql();\n\t\t        arrayAdapter.notifyDataSetChanged();\n\t\t    }\n\t\t\n\t\t    private void showToasts(String s) {\n\t\t        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();\n\t\t    }\n\t\t}\n\n\n### ContentProvider\n* contentProvider类\n\n\t\tpackage com.wilbert.firstlinecode.model;\n\t\t\n\t\timport android.content.ContentProvider;\n\t\timport android.content.ContentValues;\n\t\timport android.content.UriMatcher;\n\t\timport android.database.Cursor;\n\t\timport android.database.sqlite.SQLiteDatabase;\n\t\timport android.net.Uri;\n\t\timport android.support.annotation.Nullable;\n\t\t\n\t\timport com.wilbert.firstlinecode.DB.DbOpenHelper;\n\t\t\n\t\timport java.net.Inet4Address;\n\t\t\n\t\t/**\n\t\t * Created by wilbert on 2016/4/15.\n\t\t */\n\t\tpublic class BookProvider extends ContentProvider {\n\t\t\n\t\t    public static final int BOOK_DIR = 0;\n\t\t    public static final int BOOK_ITEM = 1;\n\t\t    public static final String AUTHORITY = \"com.example.databasetest.provider\";\n\t\t    private static UriMatcher uriMatcher;\n\t\t    private DbOpenHelper dbOpenHelper;\n\t\t    private SQLiteDatabase sqLiteDatabase;\n\t\t\n\t\t    static {\n\t\t        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n\t\t        uriMatcher.addURI(AUTHORITY, \"book\", BOOK_DIR);\n\t\t        uriMatcher.addURI(AUTHORITY, \"book/# \", BOOK_ITEM);\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public boolean onCreate() {\n\t\t        dbOpenHelper = new DbOpenHelper(getContext(), \"BookStore\", null, 1);\n\t\t        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n\t\t        return true;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n\t\t        Cursor cursor = null;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                cursor = sqLiteDatabase.query(\"Book\", projection, selection, selectionArgs,\n\t\t                        null, null, sortOrder);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                cursor = sqLiteDatabase.query(\"Book\", projection, \"id = ?\", new String[]\n\t\t                        {bookId}, null, null, sortOrder);\n\t\t                break;\n\t\t        }\n\t\t        return cursor;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public String getType(Uri uri) {\n\t\t            switch (uriMatcher.match(uri)) {\n\t\t                case BOOK_DIR:\n\t\t                    return \"vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book\";\n\t\t                case BOOK_ITEM:\n\t\t                    return \"vnd.android.cursor.item/vnd.com.example.databasetest.provider.book\";\n\t\t            }\n\t\t        return null;\n\t\t    }\n\t\t\n\t\t    @Nullable\n\t\t    @Override\n\t\t    public Uri insert(Uri uri, ContentValues values) {\n\t\t        Uri returnUri = null;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t            case BOOK_ITEM:\n\t\t                long newBookId = sqLiteDatabase.insert(\"Book\", null, values);\n\t\t                returnUri = Uri.parse(\"content://\" + AUTHORITY + \"/book/\" +\n\t\t                        newBookId);\n\t\t                break;\n\t\t        }\n\t\t        return returnUri;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int delete(Uri uri, String selection, String[] selectionArgs) {\n\t\t        int deletedRows = 0;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                deletedRows = sqLiteDatabase.delete(\"Book\", selection, selectionArgs);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                deletedRows = sqLiteDatabase.delete(\"Book\", \"id = ?\", new String[] { bookId });\n\t\t                break;\n\t\t        }\n\t\t        return deletedRows;\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n\t\t        int updatedRows = 0;\n\t\t        switch (uriMatcher.match(uri)) {\n\t\t            case BOOK_DIR:\n\t\t                updatedRows = sqLiteDatabase.update(\"Book\", values, selection, selectionArgs);\n\t\t                break;\n\t\t            case BOOK_ITEM:\n\t\t                String bookId = uri.getPathSegments().get(1);\n\t\t                updatedRows = sqLiteDatabase.update(\"Book\", values, \"id = ?\", new String[]\n\t\t                        {bookId});\n\t\t                break;\n\t\t        }\n\t\t        return updatedRows;\n\t\t    }\n\t\t}\n\n* provider activity \n\n\n\t    public void onClick(View v) {\n\t        // TODO: 2016/4/15 query operation cursor\n\t        String newId;\n\t        switch (v.getId()) {\n\t            case R.id.queryBtn:\n\t                Uri uri2 = Uri.parse(\"content://com.example.databasetest.provider/book/1\");\n\t                Cursor cursor = getContentResolver().query(uri2, null, null, null, null);\n\t                if (cursor != null) {\n\t                    Book book = Book.getBookFromCursor(cursor);\n\t                    stringList.add(book.toString());\n\t                    arrayAdapter.notifyDataSetChanged();\n\t                }\n\t\n\t                break;\n\t            case R.id.insertBtn:\n\t                Uri uri = Uri.parse(\"content://com.example.databasetest.provider/book\");\n\t                Book book = new Book(\"wilbdd\", \"nae\", 100, 100);\n\t                Uri newUri = getContentResolver().insert(uri, book.makeContenValues());\n\t\n\t                //newId = newUri.getPathSegments().get(1);\n\t                makeToast(\"  \" + \"insert\");\n\t                makeToast(newUri.toString());\n\t                break;\n\t        }\n\t    }","slug":"面试","published":1,"updated":"2018-07-01T08:30:49.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjv0r50w002wlq0htv92ek3x","content":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"android面试题目\"><a href=\"#android面试题目\" class=\"headerlink\" title=\"android面试题目\"></a>android面试题目</h2><h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><ul>\n<li>Activity中</li>\n</ul>\n<pre><code>void initData() {\n        mConnection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName name, IBinder service) {\n                myBinder = (MyBinder)service;\n                myBinder.showMessage();\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                SomeMethod.makeToast(ServiceActivity.this, &quot;service disconnected&quot;);\n            }\n        };\n    }\n\npublic void onClick(View v) {\n    Intent intent = null;\n    switch (v.getId()) {\n        case R.id.startSerBtn:\n            intent = new Intent(this, MyService.class);\n            startService(intent);\n            break;\n        case R.id.endSerBtn:\n            intent = new Intent(this, MyService.class);\n            stopService(intent);\n            break;\n        case R.id.bindBtn:\n            intent = new Intent(this, MyService.class);\n            bindService(intent, mConnection, BIND_AUTO_CREATE);\n            isBind = true;\n            break;\n        case R.id.unBinBtn:\n            if (isBind) {\n                unbindService(mConnection);\n                isBind = false;\n            }\n            break;\n    }\n}\n}\n</code></pre><ul>\n<li><p>MyBinder类</p>\n<pre><code>public class MyBinder extends Binder {\n    Context mContext;\n    public MyBinder(Context context) {\n        mContext = context;\n    }\n\n    public void showMessage() {\n        SomeMethod.makeToast(mContext, &quot;in myBinder&quot;);\n    }\n}\n</code></pre></li>\n<li><p>MyService类</p>\n<pre><code>public class MyService extends Service {\n    public static final String w = &quot;wilbert&quot;;\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        SomeMethod.makeToast(this, &quot;onCreate&quot;);\n        Log.d(w, &quot;onCreate&quot;);\n        myBinder = new MyBinder(this);\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(w, &quot;onStartCommand&quot;);\n        SomeMethod.makeToast(this, &quot;onStartCommand&quot;);\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        SomeMethod.makeToast(this, &quot;onDestroy&quot;);\n        Log.d(w, &quot;onDestroy&quot;);\n        super.onDestroy();\n    }\n\n    MyBinder myBinder;\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        Log.d(w, &quot;onBind&quot;);\n        return myBinder;\n    }\n}\n</code></pre></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><p>OpenHelper</p>\n<pre><code>package com.wilbert.firstlinecode.DB;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.widget.Toast;\n\n/**\n * Created by wilbert on 2016/4/15.\n */\npublic class DbOpenHelper extends SQLiteOpenHelper {\n    public static final String CREATE_BOOK = &quot;create table book (&quot;\n            + &quot;id integer primary key autoincrement, &quot;\n            + &quot;author text, &quot;\n            + &quot;price real, &quot;\n            + &quot;pages integer, &quot;\n            + &quot;name text)&quot;;\n    public static final String CREATE_CATEGORY = &quot;create table Category (&quot;\n            + &quot;id integer primary key autoincrement, &quot;\n            + &quot;category_name text, &quot;\n            + &quot;category_code integer)&quot;;\n    private Context mContext;\n    public DbOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n        mContext = context;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_BOOK);\n        db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext, &quot;create db successfully&quot;, Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n</code></pre></li>\n<li><p>SqlActivity</p>\n<pre><code>public class SqlActivity extends BaseActivity {\n    Button createDbBtn;\n    Button insertBtn;\n    Button updateBtn;\n    Button deleteBtn;\n    ListView sqlListview;\n\n    DbOpenHelper dbOpenHelper;\n    SQLiteDatabase sqLiteDatabase;\n    List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();\n    ArrayAdapter&lt;String&gt; arrayAdapter;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_sql);\n        initView();\n        initData();\n        Log.v(&quot;w&quot;, &quot;onCreate&quot;);\n    }\n\n    @Override\n    void initView() {\n        createDbBtn = (Button)findViewById(R.id.createDbBtn);\n        createDbBtn.setOnClickListener(this);\n\n        insertBtn = (Button)findViewById(R.id.insertBtn);\n        insertBtn.setOnClickListener(this);\n\n        updateBtn = (Button)findViewById(R.id.updateBtn);\n        updateBtn.setOnClickListener(this);\n\n        deleteBtn = (Button)findViewById(R.id.deleteBtn);\n        deleteBtn.setOnClickListener(this);\n\n        sqlListview = (ListView)findViewById(R.id.dbListview);\n    }\n\n    @Override\n    void initData() {\n        dbOpenHelper = new DbOpenHelper(this, &quot;BookStore&quot;, null, 1);\n        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n        readDataFromSql();\n        arrayAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_1\n                                        , stringList);\n        sqlListview.setAdapter(arrayAdapter);\n    }\n\n    private void readDataFromSql() {\n        stringList.clear();\n        Cursor cursor = sqLiteDatabase.query(Book.TABLE_NAME, null, null, null, null, null, null);\n        if (cursor.moveToFirst()) {\n            do {\n                stringList.add(Book.getBookFromCursor(cursor).toString());\n            } while (cursor.moveToNext());\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.createDbBtn:\n                dbOpenHelper.getWritableDatabase();\n                break;\n            case R.id.insertBtn:\n                Book book = new Book(&quot;wilbert&quot;, &quot;mybook&quot;, 99, 100);\n                long id = sqLiteDatabase.insert(Book.TABLE_NAME, null, book.makeContenValues());\n                if (id != -1) {\n                    Toast.makeText(this, &quot;insert successfully&quot;, Toast.LENGTH_SHORT).show();\n                }\n                break;\n            case R.id.updateBtn:\n                Book book2 = new Book(&quot;wilbert&quot;, &quot;mybook&quot;, 50, 100);\n                int effects = sqLiteDatabase.update(Book.TABLE_NAME, book2.makeContenValues(), &quot;name = ?&quot;,\n                        new String[]{&quot;mybook&quot;});\n                if (effects != 0) {\n                    Toast.makeText(this, &quot;update successfully&quot;, Toast.LENGTH_SHORT).show();\n                }\n                break;\n            case R.id.deleteBtn:\n//                sqLiteDatabase.beginTransaction();\n                int i = sqLiteDatabase.delete(Book.TABLE_NAME, &quot;pages &gt; ? OR name = ?&quot;,\n                        new String[]{&quot;10&quot;, &quot;wilbert&quot;});\n                if (i != 0) {\n                    showToasts(i + &quot; delete successfully&quot;);\n                }\n//                sqLiteDatabase.endTransaction();\n                break;\n        }\n        readDataFromSql();\n        arrayAdapter.notifyDataSetChanged();\n    }\n\n    private void showToasts(String s) {\n        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre></li>\n</ul>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><ul>\n<li><p>contentProvider类</p>\n<pre><code>package com.wilbert.firstlinecode.model;\n\nimport android.content.ContentProvider;\nimport android.content.ContentValues;\nimport android.content.UriMatcher;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.net.Uri;\nimport android.support.annotation.Nullable;\n\nimport com.wilbert.firstlinecode.DB.DbOpenHelper;\n\nimport java.net.Inet4Address;\n\n/**\n * Created by wilbert on 2016/4/15.\n */\npublic class BookProvider extends ContentProvider {\n\n    public static final int BOOK_DIR = 0;\n    public static final int BOOK_ITEM = 1;\n    public static final String AUTHORITY = &quot;com.example.databasetest.provider&quot;;\n    private static UriMatcher uriMatcher;\n    private DbOpenHelper dbOpenHelper;\n    private SQLiteDatabase sqLiteDatabase;\n\n    static {\n        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n        uriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_DIR);\n        uriMatcher.addURI(AUTHORITY, &quot;book/# &quot;, BOOK_ITEM);\n    }\n\n    @Override\n    public boolean onCreate() {\n        dbOpenHelper = new DbOpenHelper(getContext(), &quot;BookStore&quot;, null, 1);\n        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n        return true;\n    }\n\n    @Nullable\n    @Override\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n        Cursor cursor = null;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                cursor = sqLiteDatabase.query(&quot;Book&quot;, projection, selection, selectionArgs,\n                        null, null, sortOrder);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                cursor = sqLiteDatabase.query(&quot;Book&quot;, projection, &quot;id = ?&quot;, new String[]\n                        {bookId}, null, null, sortOrder);\n                break;\n        }\n        return cursor;\n    }\n\n    @Nullable\n    @Override\n    public String getType(Uri uri) {\n            switch (uriMatcher.match(uri)) {\n                case BOOK_DIR:\n                    return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book&quot;;\n                case BOOK_ITEM:\n                    return &quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.book&quot;;\n            }\n        return null;\n    }\n\n    @Nullable\n    @Override\n    public Uri insert(Uri uri, ContentValues values) {\n        Uri returnUri = null;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n            case BOOK_ITEM:\n                long newBookId = sqLiteDatabase.insert(&quot;Book&quot;, null, values);\n                returnUri = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/book/&quot; +\n                        newBookId);\n                break;\n        }\n        return returnUri;\n    }\n\n    @Override\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n        int deletedRows = 0;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                deletedRows = sqLiteDatabase.delete(&quot;Book&quot;, selection, selectionArgs);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                deletedRows = sqLiteDatabase.delete(&quot;Book&quot;, &quot;id = ?&quot;, new String[] { bookId });\n                break;\n        }\n        return deletedRows;\n    }\n\n    @Override\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        int updatedRows = 0;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                updatedRows = sqLiteDatabase.update(&quot;Book&quot;, values, selection, selectionArgs);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                updatedRows = sqLiteDatabase.update(&quot;Book&quot;, values, &quot;id = ?&quot;, new String[]\n                        {bookId});\n                break;\n        }\n        return updatedRows;\n    }\n}\n</code></pre></li>\n<li><p>provider activity </p>\n</li>\n</ul>\n<pre><code>public void onClick(View v) {\n    // TODO: 2016/4/15 query operation cursor\n    String newId;\n    switch (v.getId()) {\n        case R.id.queryBtn:\n            Uri uri2 = Uri.parse(&quot;content://com.example.databasetest.provider/book/1&quot;);\n            Cursor cursor = getContentResolver().query(uri2, null, null, null, null);\n            if (cursor != null) {\n                Book book = Book.getBookFromCursor(cursor);\n                stringList.add(book.toString());\n                arrayAdapter.notifyDataSetChanged();\n            }\n\n            break;\n        case R.id.insertBtn:\n            Uri uri = Uri.parse(&quot;content://com.example.databasetest.provider/book&quot;);\n            Book book = new Book(&quot;wilbdd&quot;, &quot;nae&quot;, 100, 100);\n            Uri newUri = getContentResolver().insert(uri, book.makeContenValues());\n\n            //newId = newUri.getPathSegments().get(1);\n            makeToast(&quot;  &quot; + &quot;insert&quot;);\n            makeToast(newUri.toString());\n            break;\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><font style=\"font-family:微软雅黑\"></font></p>\n<h2 id=\"android面试题目\"><a href=\"#android面试题目\" class=\"headerlink\" title=\"android面试题目\"></a>android面试题目</h2><h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><ul>\n<li>Activity中</li>\n</ul>\n<pre><code>void initData() {\n        mConnection = new ServiceConnection() {\n            @Override\n            public void onServiceConnected(ComponentName name, IBinder service) {\n                myBinder = (MyBinder)service;\n                myBinder.showMessage();\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                SomeMethod.makeToast(ServiceActivity.this, &quot;service disconnected&quot;);\n            }\n        };\n    }\n\npublic void onClick(View v) {\n    Intent intent = null;\n    switch (v.getId()) {\n        case R.id.startSerBtn:\n            intent = new Intent(this, MyService.class);\n            startService(intent);\n            break;\n        case R.id.endSerBtn:\n            intent = new Intent(this, MyService.class);\n            stopService(intent);\n            break;\n        case R.id.bindBtn:\n            intent = new Intent(this, MyService.class);\n            bindService(intent, mConnection, BIND_AUTO_CREATE);\n            isBind = true;\n            break;\n        case R.id.unBinBtn:\n            if (isBind) {\n                unbindService(mConnection);\n                isBind = false;\n            }\n            break;\n    }\n}\n}\n</code></pre><ul>\n<li><p>MyBinder类</p>\n<pre><code>public class MyBinder extends Binder {\n    Context mContext;\n    public MyBinder(Context context) {\n        mContext = context;\n    }\n\n    public void showMessage() {\n        SomeMethod.makeToast(mContext, &quot;in myBinder&quot;);\n    }\n}\n</code></pre></li>\n<li><p>MyService类</p>\n<pre><code>public class MyService extends Service {\n    public static final String w = &quot;wilbert&quot;;\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        SomeMethod.makeToast(this, &quot;onCreate&quot;);\n        Log.d(w, &quot;onCreate&quot;);\n        myBinder = new MyBinder(this);\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(w, &quot;onStartCommand&quot;);\n        SomeMethod.makeToast(this, &quot;onStartCommand&quot;);\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public void onDestroy() {\n        SomeMethod.makeToast(this, &quot;onDestroy&quot;);\n        Log.d(w, &quot;onDestroy&quot;);\n        super.onDestroy();\n    }\n\n    MyBinder myBinder;\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        Log.d(w, &quot;onBind&quot;);\n        return myBinder;\n    }\n}\n</code></pre></li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><p>OpenHelper</p>\n<pre><code>package com.wilbert.firstlinecode.DB;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.widget.Toast;\n\n/**\n * Created by wilbert on 2016/4/15.\n */\npublic class DbOpenHelper extends SQLiteOpenHelper {\n    public static final String CREATE_BOOK = &quot;create table book (&quot;\n            + &quot;id integer primary key autoincrement, &quot;\n            + &quot;author text, &quot;\n            + &quot;price real, &quot;\n            + &quot;pages integer, &quot;\n            + &quot;name text)&quot;;\n    public static final String CREATE_CATEGORY = &quot;create table Category (&quot;\n            + &quot;id integer primary key autoincrement, &quot;\n            + &quot;category_name text, &quot;\n            + &quot;category_code integer)&quot;;\n    private Context mContext;\n    public DbOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n        mContext = context;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(CREATE_BOOK);\n        db.execSQL(CREATE_CATEGORY);\n        Toast.makeText(mContext, &quot;create db successfully&quot;, Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n</code></pre></li>\n<li><p>SqlActivity</p>\n<pre><code>public class SqlActivity extends BaseActivity {\n    Button createDbBtn;\n    Button insertBtn;\n    Button updateBtn;\n    Button deleteBtn;\n    ListView sqlListview;\n\n    DbOpenHelper dbOpenHelper;\n    SQLiteDatabase sqLiteDatabase;\n    List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();\n    ArrayAdapter&lt;String&gt; arrayAdapter;\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_sql);\n        initView();\n        initData();\n        Log.v(&quot;w&quot;, &quot;onCreate&quot;);\n    }\n\n    @Override\n    void initView() {\n        createDbBtn = (Button)findViewById(R.id.createDbBtn);\n        createDbBtn.setOnClickListener(this);\n\n        insertBtn = (Button)findViewById(R.id.insertBtn);\n        insertBtn.setOnClickListener(this);\n\n        updateBtn = (Button)findViewById(R.id.updateBtn);\n        updateBtn.setOnClickListener(this);\n\n        deleteBtn = (Button)findViewById(R.id.deleteBtn);\n        deleteBtn.setOnClickListener(this);\n\n        sqlListview = (ListView)findViewById(R.id.dbListview);\n    }\n\n    @Override\n    void initData() {\n        dbOpenHelper = new DbOpenHelper(this, &quot;BookStore&quot;, null, 1);\n        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n        readDataFromSql();\n        arrayAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_1\n                                        , stringList);\n        sqlListview.setAdapter(arrayAdapter);\n    }\n\n    private void readDataFromSql() {\n        stringList.clear();\n        Cursor cursor = sqLiteDatabase.query(Book.TABLE_NAME, null, null, null, null, null, null);\n        if (cursor.moveToFirst()) {\n            do {\n                stringList.add(Book.getBookFromCursor(cursor).toString());\n            } while (cursor.moveToNext());\n        }\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.createDbBtn:\n                dbOpenHelper.getWritableDatabase();\n                break;\n            case R.id.insertBtn:\n                Book book = new Book(&quot;wilbert&quot;, &quot;mybook&quot;, 99, 100);\n                long id = sqLiteDatabase.insert(Book.TABLE_NAME, null, book.makeContenValues());\n                if (id != -1) {\n                    Toast.makeText(this, &quot;insert successfully&quot;, Toast.LENGTH_SHORT).show();\n                }\n                break;\n            case R.id.updateBtn:\n                Book book2 = new Book(&quot;wilbert&quot;, &quot;mybook&quot;, 50, 100);\n                int effects = sqLiteDatabase.update(Book.TABLE_NAME, book2.makeContenValues(), &quot;name = ?&quot;,\n                        new String[]{&quot;mybook&quot;});\n                if (effects != 0) {\n                    Toast.makeText(this, &quot;update successfully&quot;, Toast.LENGTH_SHORT).show();\n                }\n                break;\n            case R.id.deleteBtn:\n//                sqLiteDatabase.beginTransaction();\n                int i = sqLiteDatabase.delete(Book.TABLE_NAME, &quot;pages &gt; ? OR name = ?&quot;,\n                        new String[]{&quot;10&quot;, &quot;wilbert&quot;});\n                if (i != 0) {\n                    showToasts(i + &quot; delete successfully&quot;);\n                }\n//                sqLiteDatabase.endTransaction();\n                break;\n        }\n        readDataFromSql();\n        arrayAdapter.notifyDataSetChanged();\n    }\n\n    private void showToasts(String s) {\n        Toast.makeText(this, s, Toast.LENGTH_SHORT).show();\n    }\n}\n</code></pre></li>\n</ul>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><ul>\n<li><p>contentProvider类</p>\n<pre><code>package com.wilbert.firstlinecode.model;\n\nimport android.content.ContentProvider;\nimport android.content.ContentValues;\nimport android.content.UriMatcher;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.net.Uri;\nimport android.support.annotation.Nullable;\n\nimport com.wilbert.firstlinecode.DB.DbOpenHelper;\n\nimport java.net.Inet4Address;\n\n/**\n * Created by wilbert on 2016/4/15.\n */\npublic class BookProvider extends ContentProvider {\n\n    public static final int BOOK_DIR = 0;\n    public static final int BOOK_ITEM = 1;\n    public static final String AUTHORITY = &quot;com.example.databasetest.provider&quot;;\n    private static UriMatcher uriMatcher;\n    private DbOpenHelper dbOpenHelper;\n    private SQLiteDatabase sqLiteDatabase;\n\n    static {\n        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n        uriMatcher.addURI(AUTHORITY, &quot;book&quot;, BOOK_DIR);\n        uriMatcher.addURI(AUTHORITY, &quot;book/# &quot;, BOOK_ITEM);\n    }\n\n    @Override\n    public boolean onCreate() {\n        dbOpenHelper = new DbOpenHelper(getContext(), &quot;BookStore&quot;, null, 1);\n        sqLiteDatabase = dbOpenHelper.getWritableDatabase();\n        return true;\n    }\n\n    @Nullable\n    @Override\n    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n        Cursor cursor = null;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                cursor = sqLiteDatabase.query(&quot;Book&quot;, projection, selection, selectionArgs,\n                        null, null, sortOrder);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                cursor = sqLiteDatabase.query(&quot;Book&quot;, projection, &quot;id = ?&quot;, new String[]\n                        {bookId}, null, null, sortOrder);\n                break;\n        }\n        return cursor;\n    }\n\n    @Nullable\n    @Override\n    public String getType(Uri uri) {\n            switch (uriMatcher.match(uri)) {\n                case BOOK_DIR:\n                    return &quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book&quot;;\n                case BOOK_ITEM:\n                    return &quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.book&quot;;\n            }\n        return null;\n    }\n\n    @Nullable\n    @Override\n    public Uri insert(Uri uri, ContentValues values) {\n        Uri returnUri = null;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n            case BOOK_ITEM:\n                long newBookId = sqLiteDatabase.insert(&quot;Book&quot;, null, values);\n                returnUri = Uri.parse(&quot;content://&quot; + AUTHORITY + &quot;/book/&quot; +\n                        newBookId);\n                break;\n        }\n        return returnUri;\n    }\n\n    @Override\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n        int deletedRows = 0;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                deletedRows = sqLiteDatabase.delete(&quot;Book&quot;, selection, selectionArgs);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                deletedRows = sqLiteDatabase.delete(&quot;Book&quot;, &quot;id = ?&quot;, new String[] { bookId });\n                break;\n        }\n        return deletedRows;\n    }\n\n    @Override\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        int updatedRows = 0;\n        switch (uriMatcher.match(uri)) {\n            case BOOK_DIR:\n                updatedRows = sqLiteDatabase.update(&quot;Book&quot;, values, selection, selectionArgs);\n                break;\n            case BOOK_ITEM:\n                String bookId = uri.getPathSegments().get(1);\n                updatedRows = sqLiteDatabase.update(&quot;Book&quot;, values, &quot;id = ?&quot;, new String[]\n                        {bookId});\n                break;\n        }\n        return updatedRows;\n    }\n}\n</code></pre></li>\n<li><p>provider activity </p>\n</li>\n</ul>\n<pre><code>public void onClick(View v) {\n    // TODO: 2016/4/15 query operation cursor\n    String newId;\n    switch (v.getId()) {\n        case R.id.queryBtn:\n            Uri uri2 = Uri.parse(&quot;content://com.example.databasetest.provider/book/1&quot;);\n            Cursor cursor = getContentResolver().query(uri2, null, null, null, null);\n            if (cursor != null) {\n                Book book = Book.getBookFromCursor(cursor);\n                stringList.add(book.toString());\n                arrayAdapter.notifyDataSetChanged();\n            }\n\n            break;\n        case R.id.insertBtn:\n            Uri uri = Uri.parse(&quot;content://com.example.databasetest.provider/book&quot;);\n            Book book = new Book(&quot;wilbdd&quot;, &quot;nae&quot;, 100, 100);\n            Uri newUri = getContentResolver().insert(uri, book.makeContenValues());\n\n            //newId = newUri.getPathSegments().get(1);\n            makeToast(&quot;  &quot; + &quot;insert&quot;);\n            makeToast(newUri.toString());\n            break;\n    }\n}\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjjv0r4yx0001lq0hs2hvu655","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4z90008lq0h8cjx08u5"},{"post_id":"cjjv0r4z90009lq0h098tmnov","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zc000clq0hzdy976fn"},{"post_id":"cjjv0r4z00002lq0hgdrx1cfe","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zg000hlq0hu1mbfaxp"},{"post_id":"cjjv0r4z00002lq0hgdrx1cfe","tag_id":"cjjv0r4zb000blq0hesjp5bf2","_id":"cjjv0r4zi000jlq0hv8fam9qh"},{"post_id":"cjjv0r4z30004lq0htac42fl6","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zj000mlq0h0zc4lrpf"},{"post_id":"cjjv0r4z50005lq0hex0dqo6w","tag_id":"cjjv0r4zi000klq0ht293xsme","_id":"cjjv0r4zo000tlq0h6of9zmol"},{"post_id":"cjjv0r4z50005lq0hex0dqo6w","tag_id":"cjjv0r4zk000olq0h3jbgywyw","_id":"cjjv0r4zp000vlq0hsnor6gqg"},{"post_id":"cjjv0r4zn000slq0hdozqvn15","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zq000ylq0ho7vs78bf"},{"post_id":"cjjv0r4z60006lq0hv48ctk4z","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zr0010lq0han98e8oz"},{"post_id":"cjjv0r4z60006lq0hv48ctk4z","tag_id":"cjjv0r4zb000blq0hesjp5bf2","_id":"cjjv0r4zt0013lq0hyp4698ze"},{"post_id":"cjjv0r4zr000zlq0hd0vs5w8b","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zu0015lq0hl5x8axeg"},{"post_id":"cjjv0r4zr000zlq0hd0vs5w8b","tag_id":"cjjv0r4zb000blq0hesjp5bf2","_id":"cjjv0r4zw0018lq0h7evb25vi"},{"post_id":"cjjv0r4zb000alq0h3qzo5z8v","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r4zx001alq0hp2ir24x3"},{"post_id":"cjjv0r4zs0011lq0hkukzr29o","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r4zy001dlq0hk8jxdvqk"},{"post_id":"cjjv0r4zt0014lq0h08hmymk9","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r500001flq0hh0773kz5"},{"post_id":"cjjv0r4zc000dlq0h3ac8tqxu","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r501001ilq0hqam58cz3"},{"post_id":"cjjv0r4zu0016lq0hp1r9bt38","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r503001klq0hrinp7juw"},{"post_id":"cjjv0r4zw0019lq0h9ckb1ex1","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r505001nlq0hru5r6twh"},{"post_id":"cjjv0r4zx001blq0hdvu2ykzq","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r506001plq0hvxml5phx"},{"post_id":"cjjv0r4zz001elq0hz0u1zql3","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r507001slq0hbmkn5jg6"},{"post_id":"cjjv0r4zz001elq0hz0u1zql3","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r50e001ulq0h9jyz38n4"},{"post_id":"cjjv0r4ze000elq0hry76g6xy","tag_id":"cjjv0r4zv0017lq0hrx9v4ljx","_id":"cjjv0r50f001wlq0hhtm6uv06"},{"post_id":"cjjv0r4ze000elq0hry76g6xy","tag_id":"cjjv0r4zy001clq0hc6k72lzr","_id":"cjjv0r50g001zlq0ha4hyxxqn"},{"post_id":"cjjv0r500001glq0hnqrle5uo","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r50h0021lq0h57lqb5ad"},{"post_id":"cjjv0r500001glq0hnqrle5uo","tag_id":"cjjv0r4zb000blq0hesjp5bf2","_id":"cjjv0r50i0024lq0hrsy0kgbu"},{"post_id":"cjjv0r4zg000glq0hsvm3byys","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r50j0026lq0hrdwq9u2c"},{"post_id":"cjjv0r505001olq0h46jkh0uo","tag_id":"cjjv0r4zv0017lq0hrx9v4ljx","_id":"cjjv0r50l0029lq0h39fg77m5"},{"post_id":"cjjv0r4zh000ilq0huz2ngyvr","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r50m002blq0h6rlcrb39"},{"post_id":"cjjv0r4zh000ilq0huz2ngyvr","tag_id":"cjjv0r507001rlq0hdko6sp7s","_id":"cjjv0r50n002elq0hhloynvc6"},{"post_id":"cjjv0r50j0025lq0hsowqz0di","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r50o002glq0hqrhe32ea"},{"post_id":"cjjv0r4zi000llq0hwarla5no","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r50q002jlq0hr297mxan"},{"post_id":"cjjv0r4zi000llq0hwarla5no","tag_id":"cjjv0r50h0022lq0hrnt9z4ng","_id":"cjjv0r50r002llq0hwvgz7045"},{"post_id":"cjjv0r50j0027lq0h0ium1dkz","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r50s002olq0hzwn8br2z"},{"post_id":"cjjv0r4zj000nlq0hj4t9y6by","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r50t002qlq0huarhxpzg"},{"post_id":"cjjv0r50p002hlq0hznv0fmtp","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r50u002slq0hcx1t8uhm"},{"post_id":"cjjv0r50q002klq0h59h1q8bu","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r50w002vlq0hk6ixgrri"},{"post_id":"cjjv0r4zk000plq0h7ihwvkw3","tag_id":"cjjv0r50n002dlq0hu57hr6bg","_id":"cjjv0r50x002xlq0hfwiti62a"},{"post_id":"cjjv0r4zk000plq0h7ihwvkw3","tag_id":"cjjv0r50p002ilq0hwpu7khu7","_id":"cjjv0r50x002zlq0hxssk1zwm"},{"post_id":"cjjv0r4zm000qlq0hndpve7yz","tag_id":"cjjv0r50s002nlq0hsji62v6i","_id":"cjjv0r50y0030lq0hptw3g8tw"},{"post_id":"cjjv0r4zo000ulq0hwgp84e9z","tag_id":"cjjv0r50u002tlq0hyk3pkyz3","_id":"cjjv0r50z0032lq0hfly288io"},{"post_id":"cjjv0r4zo000ulq0hwgp84e9z","tag_id":"cjjv0r50x002ylq0hzg73dxzo","_id":"cjjv0r50z0033lq0hgk2pih93"},{"post_id":"cjjv0r4zp000xlq0hlpdsts5a","tag_id":"cjjv0r50u002tlq0hyk3pkyz3","_id":"cjjv0r5100036lq0hsyya0y7m"},{"post_id":"cjjv0r4zp000xlq0hlpdsts5a","tag_id":"cjjv0r50x002ylq0hzg73dxzo","_id":"cjjv0r5100037lq0hg32yk3um"},{"post_id":"cjjv0r502001jlq0h7m26tk1g","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r5110039lq0h5tk6giwe"},{"post_id":"cjjv0r502001jlq0h7m26tk1g","tag_id":"cjjv0r5100035lq0h899iihcb","_id":"cjjv0r511003alq0hc4bjl5cd"},{"post_id":"cjjv0r504001llq0hs50vsup7","tag_id":"cjjv0r5100038lq0hfj3r8qs9","_id":"cjjv0r511003clq0h852ww249"},{"post_id":"cjjv0r506001qlq0hiuiaumdf","tag_id":"cjjv0r511003blq0hzjxyreu8","_id":"cjjv0r513003flq0heaxdxiys"},{"post_id":"cjjv0r506001qlq0hiuiaumdf","tag_id":"cjjv0r512003dlq0hjxiltgze","_id":"cjjv0r513003glq0hmerjfz2r"},{"post_id":"cjjv0r508001tlq0hay9gbcsw","tag_id":"cjjv0r512003elq0hx758ba7x","_id":"cjjv0r514003jlq0hhg3l86z2"},{"post_id":"cjjv0r508001tlq0hay9gbcsw","tag_id":"cjjv0r513003hlq0hvmp1hokl","_id":"cjjv0r514003klq0h0x0bymtk"},{"post_id":"cjjv0r50e001vlq0h0q3q7k83","tag_id":"cjjv0r512003elq0hx758ba7x","_id":"cjjv0r515003nlq0h1dt2yppr"},{"post_id":"cjjv0r50e001vlq0h0q3q7k83","tag_id":"cjjv0r515003llq0hyo7ubmmp","_id":"cjjv0r515003olq0hdfrsd7ia"},{"post_id":"cjjv0r50f001ylq0hir2hxg93","tag_id":"cjjv0r515003mlq0hrqhgogq4","_id":"cjjv0r516003rlq0hefs8xc17"},{"post_id":"cjjv0r50f001ylq0hir2hxg93","tag_id":"cjjv0r515003plq0hemofdnxk","_id":"cjjv0r516003slq0h8eq0bhta"},{"post_id":"cjjv0r50g0020lq0hmve3plbn","tag_id":"cjjv0r515003qlq0hypxuy6ds","_id":"cjjv0r517003wlq0hu70ha3og"},{"post_id":"cjjv0r50g0020lq0hmve3plbn","tag_id":"cjjv0r516003tlq0htlmk9q0q","_id":"cjjv0r517003xlq0hc7st90we"},{"post_id":"cjjv0r50g0020lq0hmve3plbn","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r517003zlq0hf35dy74f"},{"post_id":"cjjv0r50g0020lq0hmve3plbn","tag_id":"cjjv0r515003mlq0hrqhgogq4","_id":"cjjv0r5170040lq0hxjdjhucw"},{"post_id":"cjjv0r50i0023lq0hd7a9fc1m","tag_id":"cjjv0r516003vlq0hxierfq21","_id":"cjjv0r5190042lq0hf0vvao60"},{"post_id":"cjjv0r50l002alq0ha2sztd2c","tag_id":"cjjv0r517003ylq0hdx4xiuv6","_id":"cjjv0r5190045lq0h3hmx3ljd"},{"post_id":"cjjv0r50l002alq0ha2sztd2c","tag_id":"cjjv0r5170041lq0hfgml3aij","_id":"cjjv0r5190046lq0hbt0rdzhr"},{"post_id":"cjjv0r50l002alq0ha2sztd2c","tag_id":"cjjv0r5190043lq0hy22nh1f1","_id":"cjjv0r51a0048lq0htul3gjmx"},{"post_id":"cjjv0r50m002clq0h8hf03ozd","tag_id":"cjjv0r5170041lq0hfgml3aij","_id":"cjjv0r51b004dlq0hk8pspdio"},{"post_id":"cjjv0r50m002clq0h8hf03ozd","tag_id":"cjjv0r51a0047lq0h2dzbez0g","_id":"cjjv0r51b004elq0hmzvmnx6g"},{"post_id":"cjjv0r50m002clq0h8hf03ozd","tag_id":"cjjv0r5100038lq0hfj3r8qs9","_id":"cjjv0r51b004glq0hspwb9oyo"},{"post_id":"cjjv0r50m002clq0h8hf03ozd","tag_id":"cjjv0r5190043lq0hy22nh1f1","_id":"cjjv0r51b004hlq0hy3uznla2"},{"post_id":"cjjv0r50m002clq0h8hf03ozd","tag_id":"cjjv0r51a004blq0hjrv7iziv","_id":"cjjv0r51c004jlq0hrjo8gpl2"},{"post_id":"cjjv0r50o002flq0hoxgdk5zr","tag_id":"cjjv0r4zp000wlq0h3nbc7nqu","_id":"cjjv0r51c004klq0hii6eolvv"},{"post_id":"cjjv0r50o002flq0hoxgdk5zr","tag_id":"cjjv0r512003dlq0hjxiltgze","_id":"cjjv0r51c004mlq0h573wwqr9"},{"post_id":"cjjv0r50o002flq0hoxgdk5zr","tag_id":"cjjv0r51b004flq0h48yfy0u7","_id":"cjjv0r51c004nlq0h9r6g2han"},{"post_id":"cjjv0r50t002rlq0h2m73zo1x","tag_id":"cjjv0r51c004ilq0hzago3gjl","_id":"cjjv0r51d004plq0h013b72ik"},{"post_id":"cjjv0r50t002rlq0h2m73zo1x","tag_id":"cjjv0r51c004llq0helq90bha","_id":"cjjv0r51d004qlq0h5qugzvmb"},{"post_id":"cjjv0r50v002ulq0hub1jql7r","tag_id":"cjjv0r4z20003lq0h89wp24k1","_id":"cjjv0r51d004slq0hbocygf47"},{"post_id":"cjjv0r50v002ulq0hub1jql7r","tag_id":"cjjv0r51c004olq0hi5hrv59h","_id":"cjjv0r51e004tlq0hf4qmob2o"},{"post_id":"cjjv0r50w002wlq0htv92ek3x","tag_id":"cjjv0r51d004rlq0h4wxah5ve","_id":"cjjv0r51e004ulq0hlohbhgb4"}],"Tag":[{"name":"android","_id":"cjjv0r4z20003lq0h89wp24k1"},{"name":"第一行代码","_id":"cjjv0r4zb000blq0hesjp5bf2"},{"name":"web安全","_id":"cjjv0r4zi000klq0ht293xsme"},{"name":"CSRF","_id":"cjjv0r4zk000olq0h3jbgywyw"},{"name":"java","_id":"cjjv0r4zp000wlq0h3nbc7nqu"},{"name":"JavaScript","_id":"cjjv0r4zv0017lq0hrx9v4ljx"},{"name":"面向对象","_id":"cjjv0r4zy001clq0hc6k72lzr"},{"name":"设计模式","_id":"cjjv0r507001rlq0hdko6sp7s"},{"name":"读书笔记","_id":"cjjv0r50h0022lq0hrnt9z4ng"},{"name":"javascript","_id":"cjjv0r50n002dlq0hu57hr6bg"},{"name":"继承","_id":"cjjv0r50p002ilq0hwpu7khu7"},{"name":"Maven","_id":"cjjv0r50s002nlq0hsji62v6i"},{"name":"SQL","_id":"cjjv0r50u002tlq0hyk3pkyz3"},{"name":"数据库","_id":"cjjv0r50x002ylq0hzg73dxzo"},{"name":"elasticsearch","_id":"cjjv0r5100035lq0h899iihcb"},{"name":"hexo","_id":"cjjv0r5100038lq0hfj3r8qs9"},{"name":"mybatis","_id":"cjjv0r511003blq0hzjxyreu8"},{"name":"spring","_id":"cjjv0r512003dlq0hjxiltgze"},{"name":"python","_id":"cjjv0r512003elq0hx758ba7x"},{"name":"爬虫","_id":"cjjv0r513003hlq0hvmp1hokl"},{"name":"tips","_id":"cjjv0r515003llq0hyo7ubmmp"},{"name":"java web","_id":"cjjv0r515003mlq0hrqhgogq4"},{"name":"servlet","_id":"cjjv0r515003plq0hemofdnxk"},{"name":"session","_id":"cjjv0r515003qlq0hypxuy6ds"},{"name":"cookie","_id":"cjjv0r516003tlq0htlmk9q0q"},{"name":"sql","_id":"cjjv0r516003vlq0hxierfq21"},{"name":"ubuntu","_id":"cjjv0r517003ylq0hdx4xiuv6"},{"name":"vps","_id":"cjjv0r5170041lq0hfgml3aij"},{"name":"nginx","_id":"cjjv0r5190043lq0hy22nh1f1"},{"name":"git","_id":"cjjv0r51a0047lq0h2dzbez0g"},{"name":"blog","_id":"cjjv0r51a004blq0hjrv7iziv"},{"name":"线程安全","_id":"cjjv0r51b004flq0h48yfy0u7"},{"name":"http","_id":"cjjv0r51c004ilq0hzago3gjl"},{"name":"网络","_id":"cjjv0r51c004llq0helq90bha"},{"name":"面试","_id":"cjjv0r51c004olq0hi5hrv59h"},{"name":"android面试题目","_id":"cjjv0r51d004rlq0h4wxah5ve"}]}}